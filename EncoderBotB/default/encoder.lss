
encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000045e  00800200  00002c70  00002d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e00  0080065e  0080065e  00003162  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003162  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000477  00000000  00000000  00003182  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ba8  00000000  00000000  000035f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002e0  00000000  00000000  000051a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015a0  00000000  00000000  00005481  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  00006a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005af  00000000  00000000  00006d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d1b  00000000  00000000  00007313  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000802e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__vector_5>
      18:	0c 94 97 08 	jmp	0x112e	; 0x112e <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <getNodesOfNote+0x19c>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	16 e0       	ldi	r17, 0x06	; 6
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e0 e7       	ldi	r30, 0x70	; 112
     17e:	fc e2       	ldi	r31, 0x2C	; 44
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	ae 35       	cpi	r26, 0x5E	; 94
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	14 e1       	ldi	r17, 0x14	; 20
     192:	ae e5       	ldi	r26, 0x5E	; 94
     194:	b6 e0       	ldi	r27, 0x06	; 6
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ae 35       	cpi	r26, 0x5E	; 94
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 e6 08 	call	0x11cc	; 0x11cc <main>
     1a4:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	9e e0       	ldi	r25, 0x0E	; 14
     1b0:	fc 01       	movw	r30, r24
     1b2:	31 97       	sbiw	r30, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_set_4bit+0x6>
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ba:	40 e3       	ldi	r20, 0x30	; 48
     1bc:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	38 e4       	ldi	r19, 0x48	; 72
     1c4:	f9 01       	movw	r30, r18
     1c6:	31 97       	sbiw	r30, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ca:	42 98       	cbi	0x08, 2	; 8
     1cc:	fc 01       	movw	r30, r24
     1ce:	31 97       	sbiw	r30, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1d2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1d4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1d6:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1d8:	42 9a       	sbi	0x08, 2	; 8
     1da:	f9 01       	movw	r30, r18
     1dc:	31 97       	sbiw	r30, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1e0:	42 98       	cbi	0x08, 2	; 8
     1e2:	fc 01       	movw	r30, r24
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1e8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1ea:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ec:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1ee:	42 9a       	sbi	0x08, 2	; 8
     1f0:	f9 01       	movw	r30, r18
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1f6:	42 98       	cbi	0x08, 2	; 8
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1fc:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1fe:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     200:	80 e2       	ldi	r24, 0x20	; 32
     202:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     204:	42 9a       	sbi	0x08, 2	; 8
     206:	c9 01       	movw	r24, r18
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     20c:	42 98       	cbi	0x08, 2	; 8

	
}
     20e:	08 95       	ret

00000210 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     210:	98 b1       	in	r25, 0x08	; 8
     212:	9f 70       	andi	r25, 0x0F	; 15
     214:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     216:	28 b1       	in	r18, 0x08	; 8
     218:	98 2f       	mov	r25, r24
     21a:	90 7f       	andi	r25, 0xF0	; 240
     21c:	92 2b       	or	r25, r18
     21e:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     220:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     222:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     224:	42 9a       	sbi	0x08, 2	; 8
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	38 e4       	ldi	r19, 0x48	; 72
     22a:	f9 01       	movw	r30, r18
     22c:	31 97       	sbiw	r30, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     230:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     232:	98 b1       	in	r25, 0x08	; 8
     234:	9f 70       	andi	r25, 0x0F	; 15
     236:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     238:	98 b1       	in	r25, 0x08	; 8
     23a:	82 95       	swap	r24
     23c:	80 7f       	andi	r24, 0xF0	; 240
     23e:	98 2b       	or	r25, r24
     240:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     242:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     244:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     246:	42 9a       	sbi	0x08, 2	; 8
     248:	c9 01       	movw	r24, r18
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     24e:	42 98       	cbi	0x08, 2	; 8
}
     250:	08 95       	ret

00000252 <lcd_init>:
     252:	86 e6       	ldi	r24, 0x66	; 102
     254:	9e e0       	ldi	r25, 0x0E	; 14
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <lcd_init+0x4>
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     25a:	88 e2       	ldi	r24, 0x28	; 40
     25c:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x01);
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x06);
     266:	86 e0       	ldi	r24, 0x06	; 6
     268:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x0E);
     26c:	8e e0       	ldi	r24, 0x0E	; 14
     26e:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x80);
     272:	80 e8       	ldi	r24, 0x80	; 128
     274:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
		
}
     278:	08 95       	ret

0000027a <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     27a:	98 b1       	in	r25, 0x08	; 8
     27c:	9f 70       	andi	r25, 0x0F	; 15
     27e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     280:	28 b1       	in	r18, 0x08	; 8
     282:	98 2f       	mov	r25, r24
     284:	90 7f       	andi	r25, 0xF0	; 240
     286:	92 2b       	or	r25, r18
     288:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     28a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     28c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     28e:	42 9a       	sbi	0x08, 2	; 8
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	38 e4       	ldi	r19, 0x48	; 72
     294:	f9 01       	movw	r30, r18
     296:	31 97       	sbiw	r30, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     29a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     29c:	98 b1       	in	r25, 0x08	; 8
     29e:	9f 70       	andi	r25, 0x0F	; 15
     2a0:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2a2:	98 b1       	in	r25, 0x08	; 8
     2a4:	82 95       	swap	r24
     2a6:	80 7f       	andi	r24, 0xF0	; 240
     2a8:	98 2b       	or	r25, r24
     2aa:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2ac:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2ae:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2b0:	42 9a       	sbi	0x08, 2	; 8
     2b2:	c9 01       	movw	r24, r18
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     2b8:	42 98       	cbi	0x08, 2	; 8
}
     2ba:	08 95       	ret

000002bc <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     2bc:	80 e8       	ldi	r24, 0x80	; 128
     2be:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
}
     2c2:	08 95       	ret

000002c4 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	ec 01       	movw	r28, r24
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     2cc:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
		str++;
     2d0:	21 96       	adiw	r28, 0x01	; 1


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     2d2:	88 81       	ld	r24, Y
     2d4:	88 23       	and	r24, r24
     2d6:	d1 f7       	brne	.-12     	; 0x2cc <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	69 f0       	breq	.+26     	; 0x2fc <lcd_cursor+0x1e>
     2e2:	83 30       	cpi	r24, 0x03	; 3
     2e4:	18 f4       	brcc	.+6      	; 0x2ec <lcd_cursor+0xe>
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	a9 f4       	brne	.+42     	; 0x314 <lcd_cursor+0x36>
     2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <lcd_cursor+0x18>
     2ec:	83 30       	cpi	r24, 0x03	; 3
     2ee:	49 f0       	breq	.+18     	; 0x302 <lcd_cursor+0x24>
     2f0:	84 30       	cpi	r24, 0x04	; 4
     2f2:	81 f4       	brne	.+32     	; 0x314 <lcd_cursor+0x36>
     2f4:	0b c0       	rjmp	.+22     	; 0x30c <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     2f6:	86 2f       	mov	r24, r22
     2f8:	81 58       	subi	r24, 0x81	; 129
     2fa:	05 c0       	rjmp	.+10     	; 0x306 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     2fc:	86 2f       	mov	r24, r22
     2fe:	81 54       	subi	r24, 0x41	; 65
     300:	02 c0       	rjmp	.+4      	; 0x306 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     302:	86 2f       	mov	r24, r22
     304:	8d 56       	subi	r24, 0x6D	; 109
     306:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
     30a:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     30c:	86 2f       	mov	r24, r22
     30e:	8d 52       	subi	r24, 0x2D	; 45
     310:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
     314:	08 95       	ret

00000316 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	8a 01       	movw	r16, r20
     320:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     322:	88 23       	and	r24, r24
     324:	11 f0       	breq	.+4      	; 0x32a <lcd_print+0x14>
     326:	66 23       	and	r22, r22
     328:	19 f4       	brne	.+6      	; 0x330 <lcd_print+0x1a>
	{
		lcd_home();
     32a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_home>
     32e:	02 c0       	rjmp	.+4      	; 0x334 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     330:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_cursor>
	}
	if(digits==5 || flag==1)
     334:	c5 30       	cpi	r28, 0x05	; 5
     336:	d1 05       	cpc	r29, r1
     338:	71 f4       	brne	.+28     	; 0x356 <lcd_print+0x40>
	{
		million=value/10000+48;
     33a:	c8 01       	movw	r24, r16
     33c:	60 e1       	ldi	r22, 0x10	; 16
     33e:	77 e2       	ldi	r23, 0x27	; 39
     340:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__udivmodhi4>
     344:	cb 01       	movw	r24, r22
     346:	c0 96       	adiw	r24, 0x30	; 48
     348:	90 93 74 06 	sts	0x0674, r25
     34c:	80 93 73 06 	sts	0x0673, r24
		lcd_wr_char(million);
     350:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     354:	05 c0       	rjmp	.+10     	; 0x360 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     356:	c4 30       	cpi	r28, 0x04	; 4
     358:	d1 05       	cpc	r29, r1
     35a:	11 f0       	breq	.+4      	; 0x360 <lcd_print+0x4a>
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	16 c0       	rjmp	.+44     	; 0x38c <lcd_print+0x76>
	{
		temp = value/1000;
     360:	c8 01       	movw	r24, r16
     362:	68 ee       	ldi	r22, 0xE8	; 232
     364:	73 e0       	ldi	r23, 0x03	; 3
     366:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__udivmodhi4>
     36a:	cb 01       	movw	r24, r22
     36c:	60 93 e9 09 	sts	0x09E9, r22
     370:	90 93 ea 09 	sts	0x09EA, r25
		thousand = temp%10 + 48;
     374:	6a e0       	ldi	r22, 0x0A	; 10
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__udivmodhi4>
     37c:	c0 96       	adiw	r24, 0x30	; 48
     37e:	90 93 e5 10 	sts	0x10E5, r25
     382:	80 93 e4 10 	sts	0x10E4, r24
		lcd_wr_char(thousand);
     386:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     38a:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     38c:	c3 30       	cpi	r28, 0x03	; 3
     38e:	d1 05       	cpc	r29, r1
     390:	21 f0       	breq	.+8      	; 0x39a <lcd_print+0x84>
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	11 f0       	breq	.+4      	; 0x39a <lcd_print+0x84>
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	16 c0       	rjmp	.+44     	; 0x3c6 <lcd_print+0xb0>
	{
		temp = value/100;
     39a:	c8 01       	movw	r24, r16
     39c:	64 e6       	ldi	r22, 0x64	; 100
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__udivmodhi4>
     3a4:	cb 01       	movw	r24, r22
     3a6:	60 93 e9 09 	sts	0x09E9, r22
     3aa:	90 93 ea 09 	sts	0x09EA, r25
		hundred = temp%10 + 48;
     3ae:	6a e0       	ldi	r22, 0x0A	; 10
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__udivmodhi4>
     3b6:	c0 96       	adiw	r24, 0x30	; 48
     3b8:	90 93 df 10 	sts	0x10DF, r25
     3bc:	80 93 de 10 	sts	0x10DE, r24
		lcd_wr_char(hundred);
     3c0:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     3c4:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     3c6:	c2 30       	cpi	r28, 0x02	; 2
     3c8:	d1 05       	cpc	r29, r1
     3ca:	21 f0       	breq	.+8      	; 0x3d4 <lcd_print+0xbe>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	11 f0       	breq	.+4      	; 0x3d4 <lcd_print+0xbe>
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	16 c0       	rjmp	.+44     	; 0x400 <lcd_print+0xea>
	{
		temp = value/10;
     3d4:	c8 01       	movw	r24, r16
     3d6:	6a e0       	ldi	r22, 0x0A	; 10
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__udivmodhi4>
     3de:	cb 01       	movw	r24, r22
     3e0:	60 93 e9 09 	sts	0x09E9, r22
     3e4:	90 93 ea 09 	sts	0x09EA, r25
		tens = temp%10 + 48;
     3e8:	6a e0       	ldi	r22, 0x0A	; 10
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__udivmodhi4>
     3f0:	c0 96       	adiw	r24, 0x30	; 48
     3f2:	90 93 6b 0d 	sts	0x0D6B, r25
     3f6:	80 93 6a 0d 	sts	0x0D6A, r24
		lcd_wr_char(tens);
     3fa:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     3fe:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     400:	c1 30       	cpi	r28, 0x01	; 1
     402:	d1 05       	cpc	r29, r1
     404:	11 f0       	breq	.+4      	; 0x40a <lcd_print+0xf4>
     406:	81 30       	cpi	r24, 0x01	; 1
     408:	61 f4       	brne	.+24     	; 0x422 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     40a:	c8 01       	movw	r24, r16
     40c:	6a e0       	ldi	r22, 0x0A	; 10
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__udivmodhi4>
     414:	c0 96       	adiw	r24, 0x30	; 48
     416:	90 93 e3 10 	sts	0x10E3, r25
     41a:	80 93 e2 10 	sts	0x10E2, r24
		lcd_wr_char(unit);
     41e:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
	}
	if(digits>5)
     422:	26 97       	sbiw	r28, 0x06	; 6
     424:	1c f0       	brlt	.+6      	; 0x42c <lcd_print+0x116>
	{
		lcd_wr_char('E');
     426:	85 e4       	ldi	r24, 0x45	; 69
     428:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
	}
	
}
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	08 95       	ret

00000436 <initValues>:
void initValues() {
     436:	4f 92       	push	r4
     438:	5f 92       	push	r5
     43a:	6f 92       	push	r6
     43c:	7f 92       	push	r7
     43e:	8f 92       	push	r8
     440:	9f 92       	push	r9
     442:	af 92       	push	r10
     444:	bf 92       	push	r11
     446:	cf 92       	push	r12
     448:	df 92       	push	r13
     44a:	ef 92       	push	r14
     44c:	ff 92       	push	r15
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	df 93       	push	r29
     454:	cf 93       	push	r28
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	cc 5b       	subi	r28, 0xBC	; 188
     45c:	d2 40       	sbci	r29, 0x02	; 2
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
	int tempA[98] = {57,275,63,219,84,169,117,121,164,89,216,65,271,59,328,63,381,88,426,125,463,168,480,221,489,276,480,330,458,384,425,425,381,458,328,484,273,489,214,485,161,461,116,428,83,382,63,333,116,223,146,278,114,329,147,167,209,167,241,217,206,272,240,112,397,164,333,166,302,115,429,225,397,277,336,276,304,223,430,329,305,439,334,382,398,386,241,437,214,382,240,333,302,328,145,382,271,275},
     468:	de 01       	movw	r26, r28
     46a:	a3 50       	subi	r26, 0x03	; 3
     46c:	bf 4f       	sbci	r27, 0xFF	; 255
     46e:	e9 e9       	ldi	r30, 0x99	; 153
     470:	f5 e0       	ldi	r31, 0x05	; 5
     472:	84 ec       	ldi	r24, 0xC4	; 196
     474:	01 90       	ld	r0, Z+
     476:	0d 92       	st	X+, r0
     478:	81 50       	subi	r24, 0x01	; 1
     47a:	e1 f7       	brne	.-8      	; 0x474 <initValues+0x3e>
	tempB[126] = {0,1,23,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,2,24,24,25,25,26,26,22,24,27,27,28,28,29,29,30,30,25,2,27,31,6,31,28,6,34,34,33,33,32,32,10,32,35,35,36,36,37,37,38,38,33,10,35,36,39,39,14,42,14,42,41,40,41,40,18,41,46,46,45,45,44,44,43,43,40,18,43,44,47,47,22,25,44,28,33,36,41},
     47c:	de 01       	movw	r26, r28
     47e:	af 53       	subi	r26, 0x3F	; 63
     480:	be 4f       	sbci	r27, 0xFE	; 254
     482:	ed e9       	ldi	r30, 0x9D	; 157
     484:	f4 e0       	ldi	r31, 0x04	; 4
     486:	8c ef       	ldi	r24, 0xFC	; 252
     488:	01 90       	ld	r0, Z+
     48a:	0d 92       	st	X+, r0
     48c:	81 50       	subi	r24, 0x01	; 1
     48e:	e1 f7       	brne	.-8      	; 0x488 <initValues+0x52>
	tempC[63] = {82,97,67,52,37,22,7,-7,-22,-37,-52,-67,-82,-97,-112,-127,-142,-157,-172,172,157,142,127,112,-60,-60,-120,-120,60,0,-60,-120,180,0,60,-120,-60,-60,0,0,-60,-120,180,120,60,-120,-60,-60,0,180,60,-120,120,180,-120,-60,0,120,180,180,-60,0,-120},
     490:	de 01       	movw	r26, r28
     492:	11 96       	adiw	r26, 0x01	; 1
     494:	ef e1       	ldi	r30, 0x1F	; 31
     496:	f4 e0       	ldi	r31, 0x04	; 4
     498:	8e e7       	ldi	r24, 0x7E	; 126
     49a:	01 90       	ld	r0, Z+
     49c:	0d 92       	st	X+, r0
     49e:	81 50       	subi	r24, 0x01	; 1
     4a0:	e1 f7       	brne	.-8      	; 0x49a <initValues+0x64>
	tempD[63] = {20,21,19,21,20,20,20,20,21,21,20,20,20,19,21,18,20,21,20,21,21,20,20,18,22,21,21,22,21,21,21,23,21,23,22,23,23,21,23,24,24,22,22,22,23,24,22,22,21,23,23,21,22,22,20,22,23,22,25,22,45,45,44},
     4a2:	de 01       	movw	r26, r28
     4a4:	a1 58       	subi	r26, 0x81	; 129
     4a6:	bf 4f       	sbci	r27, 0xFF	; 255
     4a8:	e1 ea       	ldi	r30, 0xA1	; 161
     4aa:	f3 e0       	ldi	r31, 0x03	; 3
     4ac:	8e e7       	ldi	r24, 0x7E	; 126
     4ae:	01 90       	ld	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	81 50       	subi	r24, 0x01	; 1
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <initValues+0x78>
     4b6:	de 01       	movw	r26, r28
     4b8:	a3 50       	subi	r26, 0x03	; 3
     4ba:	bf 4f       	sbci	r27, 0xFF	; 255
     4bc:	ec e6       	ldi	r30, 0x6C	; 108
     4be:	fd e0       	ldi	r31, 0x0D	; 13
	i;
	for (i = 0; i < 49; i++) {
     4c0:	9e 01       	movw	r18, r28
     4c2:	2f 53       	subi	r18, 0x3F	; 63
     4c4:	3e 4f       	sbci	r19, 0xFE	; 254
		nodes[i].x = tempA[2*i];
     4c6:	8d 91       	ld	r24, X+
     4c8:	9c 91       	ld	r25, X
     4ca:	11 97       	sbiw	r26, 0x01	; 1
     4cc:	91 83       	std	Z+1, r25	; 0x01
     4ce:	80 83       	st	Z, r24
		nodes[i].y = tempA[2*i+1];
     4d0:	12 96       	adiw	r26, 0x02	; 2
     4d2:	8d 91       	ld	r24, X+
     4d4:	9c 91       	ld	r25, X
     4d6:	13 97       	sbiw	r26, 0x03	; 3
     4d8:	93 83       	std	Z+3, r25	; 0x03
     4da:	82 83       	std	Z+2, r24	; 0x02
		nodes[i].edgeCount = 0;
     4dc:	15 82       	std	Z+5, r1	; 0x05
     4de:	14 82       	std	Z+4, r1	; 0x04
     4e0:	14 96       	adiw	r26, 0x04	; 4
     4e2:	72 96       	adiw	r30, 0x12	; 18
	int tempA[98] = {57,275,63,219,84,169,117,121,164,89,216,65,271,59,328,63,381,88,426,125,463,168,480,221,489,276,480,330,458,384,425,425,381,458,328,484,273,489,214,485,161,461,116,428,83,382,63,333,116,223,146,278,114,329,147,167,209,167,241,217,206,272,240,112,397,164,333,166,302,115,429,225,397,277,336,276,304,223,430,329,305,439,334,382,398,386,241,437,214,382,240,333,302,328,145,382,271,275},
	tempB[126] = {0,1,23,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,2,24,24,25,25,26,26,22,24,27,27,28,28,29,29,30,30,25,2,27,31,6,31,28,6,34,34,33,33,32,32,10,32,35,35,36,36,37,37,38,38,33,10,35,36,39,39,14,42,14,42,41,40,41,40,18,41,46,46,45,45,44,44,43,43,40,18,43,44,47,47,22,25,44,28,33,36,41},
	tempC[63] = {82,97,67,52,37,22,7,-7,-22,-37,-52,-67,-82,-97,-112,-127,-142,-157,-172,172,157,142,127,112,-60,-60,-120,-120,60,0,-60,-120,180,0,60,-120,-60,-60,0,0,-60,-120,180,120,60,-120,-60,-60,0,180,60,-120,120,180,-120,-60,0,120,180,180,-60,0,-120},
	tempD[63] = {20,21,19,21,20,20,20,20,21,21,20,20,20,19,21,18,20,21,20,21,21,20,20,18,22,21,21,22,21,21,21,23,21,23,22,23,23,21,23,24,24,22,22,22,23,24,22,22,21,23,23,21,22,22,20,22,23,22,25,22,45,45,44},
	i;
	for (i = 0; i < 49; i++) {
     4e4:	a2 17       	cp	r26, r18
     4e6:	b3 07       	cpc	r27, r19
     4e8:	71 f7       	brne	.-36     	; 0x4c6 <initValues+0x90>
     4ea:	07 e7       	ldi	r16, 0x77	; 119
     4ec:	16 e0       	ldi	r17, 0x06	; 6
     4ee:	6d 01       	movw	r12, r26
     4f0:	4e 01       	movw	r8, r28
     4f2:	08 94       	sec
     4f4:	81 1c       	adc	r8, r1
     4f6:	91 1c       	adc	r9, r1
     4f8:	8f e7       	ldi	r24, 0x7F	; 127
     4fa:	a8 2e       	mov	r10, r24
     4fc:	b1 2c       	mov	r11, r1
     4fe:	ac 0e       	add	r10, r28
     500:	bd 1e       	adc	r11, r29
     502:	ee 24       	eor	r14, r14
     504:	ff 24       	eor	r15, r15
		nodes[edgeList[i].end].edgeIndices[(nodes[edgeList[i].end].edgeCount)++] = i;
		if ((edgeList[i].startCompass) % 10 == 0) {
			edgeList[i].leftSpeedRatio = 3;
			edgeList[i].rightSpeedRatio = 3;
		} else {
			edgeList[i].leftSpeedRatio = 3;
     506:	b3 e0       	ldi	r27, 0x03	; 3
     508:	6b 2e       	mov	r6, r27
     50a:	71 2c       	mov	r7, r1
			edgeList[i].rightSpeedRatio = 2;
     50c:	a2 e0       	ldi	r26, 0x02	; 2
     50e:	4a 2e       	mov	r4, r26
     510:	51 2c       	mov	r5, r1
		nodes[i].x = tempA[2*i];
		nodes[i].y = tempA[2*i+1];
		nodes[i].edgeCount = 0;
	}
	for (i = 0; i < 63; i++) {
		edgeList[i].obstacle = 0;
     512:	f8 01       	movw	r30, r16
     514:	15 82       	std	Z+5, r1	; 0x05
     516:	14 82       	std	Z+4, r1	; 0x04
		edgeList[i].start = tempB[2*i];
     518:	f6 01       	movw	r30, r12
     51a:	40 81       	ld	r20, Z
     51c:	51 81       	ldd	r21, Z+1	; 0x01
     51e:	f8 01       	movw	r30, r16
     520:	51 83       	std	Z+1, r21	; 0x01
     522:	40 83       	st	Z, r20
		edgeList[i].end = tempB[2*i+1];
     524:	f6 01       	movw	r30, r12
     526:	62 81       	ldd	r22, Z+2	; 0x02
     528:	73 81       	ldd	r23, Z+3	; 0x03
     52a:	f8 01       	movw	r30, r16
     52c:	73 83       	std	Z+3, r23	; 0x03
     52e:	62 83       	std	Z+2, r22	; 0x02
		edgeList[i].startCompass = tempC[i];
     530:	f4 01       	movw	r30, r8
     532:	80 81       	ld	r24, Z
     534:	91 81       	ldd	r25, Z+1	; 0x01
     536:	f8 01       	movw	r30, r16
     538:	97 83       	std	Z+7, r25	; 0x07
     53a:	86 83       	std	Z+6, r24	; 0x06
		edgeList[i].distance = tempD[i];
     53c:	f5 01       	movw	r30, r10
     53e:	20 81       	ld	r18, Z
     540:	31 81       	ldd	r19, Z+1	; 0x01
     542:	f8 01       	movw	r30, r16
     544:	35 87       	std	Z+13, r19	; 0x0d
     546:	24 87       	std	Z+12, r18	; 0x0c
		nodes[edgeList[i].start].edgeIndices[(nodes[edgeList[i].start].edgeCount)++] = i;
     548:	9a 01       	movw	r18, r20
     54a:	22 0f       	add	r18, r18
     54c:	33 1f       	adc	r19, r19
     54e:	d9 01       	movw	r26, r18
     550:	e3 e0       	ldi	r30, 0x03	; 3
     552:	aa 0f       	add	r26, r26
     554:	bb 1f       	adc	r27, r27
     556:	ea 95       	dec	r30
     558:	e1 f7       	brne	.-8      	; 0x552 <initValues+0x11c>
     55a:	a2 0f       	add	r26, r18
     55c:	b3 1f       	adc	r27, r19
     55e:	a4 59       	subi	r26, 0x94	; 148
     560:	b2 4f       	sbci	r27, 0xF2	; 242
     562:	14 96       	adiw	r26, 0x04	; 4
     564:	2d 91       	ld	r18, X+
     566:	3c 91       	ld	r19, X
     568:	15 97       	sbiw	r26, 0x05	; 5
     56a:	fa 01       	movw	r30, r20
     56c:	ee 0f       	add	r30, r30
     56e:	ff 1f       	adc	r31, r31
     570:	ee 0f       	add	r30, r30
     572:	ff 1f       	adc	r31, r31
     574:	ee 0f       	add	r30, r30
     576:	ff 1f       	adc	r31, r31
     578:	e4 0f       	add	r30, r20
     57a:	f5 1f       	adc	r31, r21
     57c:	e2 0f       	add	r30, r18
     57e:	f3 1f       	adc	r31, r19
     580:	ee 0f       	add	r30, r30
     582:	ff 1f       	adc	r31, r31
     584:	e4 59       	subi	r30, 0x94	; 148
     586:	f2 4f       	sbci	r31, 0xF2	; 242
     588:	f7 82       	std	Z+7, r15	; 0x07
     58a:	e6 82       	std	Z+6, r14	; 0x06
     58c:	2f 5f       	subi	r18, 0xFF	; 255
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
     590:	15 96       	adiw	r26, 0x05	; 5
     592:	3c 93       	st	X, r19
     594:	2e 93       	st	-X, r18
     596:	14 97       	sbiw	r26, 0x04	; 4
		nodes[edgeList[i].end].edgeIndices[(nodes[edgeList[i].end].edgeCount)++] = i;
     598:	9b 01       	movw	r18, r22
     59a:	22 0f       	add	r18, r18
     59c:	33 1f       	adc	r19, r19
     59e:	d9 01       	movw	r26, r18
     5a0:	e3 e0       	ldi	r30, 0x03	; 3
     5a2:	aa 0f       	add	r26, r26
     5a4:	bb 1f       	adc	r27, r27
     5a6:	ea 95       	dec	r30
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <initValues+0x16c>
     5aa:	a2 0f       	add	r26, r18
     5ac:	b3 1f       	adc	r27, r19
     5ae:	a4 59       	subi	r26, 0x94	; 148
     5b0:	b2 4f       	sbci	r27, 0xF2	; 242
     5b2:	14 96       	adiw	r26, 0x04	; 4
     5b4:	2d 91       	ld	r18, X+
     5b6:	3c 91       	ld	r19, X
     5b8:	15 97       	sbiw	r26, 0x05	; 5
     5ba:	fb 01       	movw	r30, r22
     5bc:	53 e0       	ldi	r21, 0x03	; 3
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 1f       	adc	r31, r31
     5c2:	5a 95       	dec	r21
     5c4:	e1 f7       	brne	.-8      	; 0x5be <initValues+0x188>
     5c6:	e6 0f       	add	r30, r22
     5c8:	f7 1f       	adc	r31, r23
     5ca:	e2 0f       	add	r30, r18
     5cc:	f3 1f       	adc	r31, r19
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	e4 59       	subi	r30, 0x94	; 148
     5d4:	f2 4f       	sbci	r31, 0xF2	; 242
     5d6:	f7 82       	std	Z+7, r15	; 0x07
     5d8:	e6 82       	std	Z+6, r14	; 0x06
     5da:	2f 5f       	subi	r18, 0xFF	; 255
     5dc:	3f 4f       	sbci	r19, 0xFF	; 255
     5de:	15 96       	adiw	r26, 0x05	; 5
     5e0:	3c 93       	st	X, r19
     5e2:	2e 93       	st	-X, r18
     5e4:	14 97       	sbiw	r26, 0x04	; 4
		if ((edgeList[i].startCompass) % 10 == 0) {
     5e6:	6a e0       	ldi	r22, 0x0A	; 10
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__divmodhi4>
     5ee:	89 2b       	or	r24, r25
     5f0:	31 f4       	brne	.+12     	; 0x5fe <initValues+0x1c8>
			edgeList[i].leftSpeedRatio = 3;
     5f2:	f8 01       	movw	r30, r16
     5f4:	71 86       	std	Z+9, r7	; 0x09
     5f6:	60 86       	std	Z+8, r6	; 0x08
			edgeList[i].rightSpeedRatio = 3;
     5f8:	73 86       	std	Z+11, r7	; 0x0b
     5fa:	62 86       	std	Z+10, r6	; 0x0a
     5fc:	05 c0       	rjmp	.+10     	; 0x608 <initValues+0x1d2>
		} else {
			edgeList[i].leftSpeedRatio = 3;
     5fe:	f8 01       	movw	r30, r16
     600:	71 86       	std	Z+9, r7	; 0x09
     602:	60 86       	std	Z+8, r6	; 0x08
			edgeList[i].rightSpeedRatio = 2;
     604:	53 86       	std	Z+11, r5	; 0x0b
     606:	42 86       	std	Z+10, r4	; 0x0a
	for (i = 0; i < 49; i++) {
		nodes[i].x = tempA[2*i];
		nodes[i].y = tempA[2*i+1];
		nodes[i].edgeCount = 0;
	}
	for (i = 0; i < 63; i++) {
     608:	08 94       	sec
     60a:	e1 1c       	adc	r14, r1
     60c:	f1 1c       	adc	r15, r1
     60e:	02 5f       	subi	r16, 0xF2	; 242
     610:	1f 4f       	sbci	r17, 0xFF	; 255
     612:	84 e0       	ldi	r24, 0x04	; 4
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	c8 0e       	add	r12, r24
     618:	d9 1e       	adc	r13, r25
     61a:	e2 e0       	ldi	r30, 0x02	; 2
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	8e 0e       	add	r8, r30
     620:	9f 1e       	adc	r9, r31
     622:	ae 0e       	add	r10, r30
     624:	bf 1e       	adc	r11, r31
     626:	ff e3       	ldi	r31, 0x3F	; 63
     628:	ef 16       	cp	r14, r31
     62a:	f1 04       	cpc	r15, r1
     62c:	09 f0       	breq	.+2      	; 0x630 <initValues+0x1fa>
     62e:	71 cf       	rjmp	.-286    	; 0x512 <initValues+0xdc>
		} else {
			edgeList[i].leftSpeedRatio = 3;
			edgeList[i].rightSpeedRatio = 2;
		}
	}
	pathLenA = pathLenB = 0;
     630:	10 92 e1 10 	sts	0x10E1, r1
     634:	10 92 e0 10 	sts	0x10E0, r1
     638:	10 92 76 06 	sts	0x0676, r1
     63c:	10 92 75 06 	sts	0x0675, r1
     640:	c4 54       	subi	r28, 0x44	; 68
     642:	dd 4f       	sbci	r29, 0xFD	; 253
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	cf 91       	pop	r28
     650:	df 91       	pop	r29
     652:	1f 91       	pop	r17
     654:	0f 91       	pop	r16
     656:	ff 90       	pop	r15
     658:	ef 90       	pop	r14
     65a:	df 90       	pop	r13
     65c:	cf 90       	pop	r12
     65e:	bf 90       	pop	r11
     660:	af 90       	pop	r10
     662:	9f 90       	pop	r9
     664:	8f 90       	pop	r8
     666:	7f 90       	pop	r7
     668:	6f 90       	pop	r6
     66a:	5f 90       	pop	r5
     66c:	4f 90       	pop	r4
     66e:	08 95       	ret

00000670 <receiveAB>:
void receiveAB(char share[]) {
     670:	fc 01       	movw	r30, r24
	int n, m, i, j;
	share[7] = 3;
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	87 83       	std	Z+7, r24	; 0x07
	while (share[3] == 0);
     676:	83 81       	ldd	r24, Z+3	; 0x03
     678:	88 23       	and	r24, r24
     67a:	91 f0       	breq	.+36     	; 0x6a0 <receiveAB+0x30>
	pathLenB = share[7];
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	90 93 e1 10 	sts	0x10E1, r25
     684:	80 93 e0 10 	sts	0x10E0, r24
	share[3] = 0;
     688:	13 82       	std	Z+3, r1	; 0x03
	n = pathLenB;
	for (i = 0; i < n; i++) {
     68a:	80 91 e0 10 	lds	r24, 0x10E0
     68e:	90 91 e1 10 	lds	r25, 0x10E1
     692:	18 16       	cp	r1, r24
     694:	19 06       	cpc	r1, r25
     696:	0c f4       	brge	.+2      	; 0x69a <receiveAB+0x2a>
     698:	ff cf       	rjmp	.-2      	; 0x698 <receiveAB+0x28>
			botB[i].subPath[j] = share[7];
			share[3] = 0;
		}
		while (share[3] == 0);
	}
	share[7] = 1;
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	87 83       	std	Z+7, r24	; 0x07
}
     69e:	08 95       	ret
     6a0:	ff cf       	rjmp	.-2      	; 0x6a0 <receiveAB+0x30>

000006a2 <transferAB>:

void transferAB(char share[]) {
     6a2:	fc 01       	movw	r30, r24
	int i, j;
	share[3] = 0;
     6a4:	13 82       	std	Z+3, r1	; 0x03
	share[7] = 2;
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	87 83       	std	Z+7, r24	; 0x07
     6aa:	ff cf       	rjmp	.-2      	; 0x6aa <transferAB+0x8>

000006ac <initShare>:
		}
	}
	share[3] = 1;
}

void initShare(char share[]) {
     6ac:	fc 01       	movw	r30, r24
	share[0] = 0; botAstat.node = 0;
     6ae:	10 82       	st	Z, r1
     6b0:	10 92 f7 09 	sts	0x09F7, r1
     6b4:	10 92 f6 09 	sts	0x09F6, r1
	share[1] = 0; botAstat.ready = 0;
     6b8:	11 82       	std	Z+1, r1	; 0x01
     6ba:	10 92 f5 09 	sts	0x09F5, r1
     6be:	10 92 f4 09 	sts	0x09F4, r1
	share[2] = 0;
     6c2:	12 82       	std	Z+2, r1	; 0x02
	share[3] = 1;
     6c4:	21 e0       	ldi	r18, 0x01	; 1
     6c6:	23 83       	std	Z+3, r18	; 0x03
	// Below actually belongs to only botB
	share[4] = 12; botBstat.node = 12;
     6c8:	8c e0       	ldi	r24, 0x0C	; 12
     6ca:	84 83       	std	Z+4, r24	; 0x04
     6cc:	8c e0       	ldi	r24, 0x0C	; 12
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	90 93 ef 09 	sts	0x09EF, r25
     6d4:	80 93 ee 09 	sts	0x09EE, r24
	share[5] = 0; botBstat.ready = 0;
     6d8:	15 82       	std	Z+5, r1	; 0x05
     6da:	10 92 ed 09 	sts	0x09ED, r1
     6de:	10 92 ec 09 	sts	0x09EC, r1
	share[6] = 0;
     6e2:	16 82       	std	Z+6, r1	; 0x06
	share[7] = 1;
     6e4:	27 83       	std	Z+7, r18	; 0x07
}
     6e6:	08 95       	ret

000006e8 <updateShareA>:

void updateShareA(char share[]) {
     6e8:	fc 01       	movw	r30, r24
	if (share[3] == 1) {
     6ea:	83 81       	ldd	r24, Z+3	; 0x03
     6ec:	81 30       	cpi	r24, 0x01	; 1
     6ee:	d9 f4       	brne	.+54     	; 0x726 <updateShareA+0x3e>
		botBstat.node = share[4];
     6f0:	84 81       	ldd	r24, Z+4	; 0x04
     6f2:	80 93 ee 09 	sts	0x09EE, r24
     6f6:	10 92 ef 09 	sts	0x09EF, r1
		botAstat.ready = share[1];
     6fa:	81 81       	ldd	r24, Z+1	; 0x01
     6fc:	80 93 f4 09 	sts	0x09F4, r24
     700:	10 92 f5 09 	sts	0x09F5, r1
		share[0] = botAstat.node;
     704:	80 91 f6 09 	lds	r24, 0x09F6
     708:	80 83       	st	Z, r24
		if (share[6] != 0) {
     70a:	26 81       	ldd	r18, Z+6	; 0x06
     70c:	22 23       	and	r18, r18
     70e:	59 f0       	breq	.+22     	; 0x726 <updateShareA+0x3e>
			noteCount -= share[6];
     710:	80 91 9f 03 	lds	r24, 0x039F
     714:	90 91 a0 03 	lds	r25, 0x03A0
     718:	82 1b       	sub	r24, r18
     71a:	91 09       	sbc	r25, r1
     71c:	90 93 a0 03 	sts	0x03A0, r25
     720:	80 93 9f 03 	sts	0x039F, r24
			share[6] = 0;
     724:	16 82       	std	Z+6, r1	; 0x06
     726:	08 95       	ret

00000728 <updateShareB>:
		}
	}
}

void updateShareB(char share[]) {
     728:	fc 01       	movw	r30, r24
	if (share[7] == 1) {
     72a:	87 81       	ldd	r24, Z+7	; 0x07
     72c:	81 30       	cpi	r24, 0x01	; 1
     72e:	e1 f4       	brne	.+56     	; 0x768 <updateShareB+0x40>
		botAstat.node = share[0];
     730:	80 81       	ld	r24, Z
     732:	80 93 f6 09 	sts	0x09F6, r24
     736:	10 92 f7 09 	sts	0x09F7, r1
		botBstat.ready = share[5];
     73a:	85 81       	ldd	r24, Z+5	; 0x05
     73c:	80 93 ec 09 	sts	0x09EC, r24
     740:	10 92 ed 09 	sts	0x09ED, r1
		share[4] = botBstat.node;
     744:	80 91 ee 09 	lds	r24, 0x09EE
     748:	84 83       	std	Z+4, r24	; 0x04
		if (share[2] != 0) {
     74a:	22 81       	ldd	r18, Z+2	; 0x02
     74c:	22 23       	and	r18, r18
     74e:	89 f0       	breq	.+34     	; 0x772 <updateShareB+0x4a>
			noteCount -= share[2];
     750:	80 91 9f 03 	lds	r24, 0x039F
     754:	90 91 a0 03 	lds	r25, 0x03A0
     758:	82 1b       	sub	r24, r18
     75a:	91 09       	sbc	r25, r1
     75c:	90 93 a0 03 	sts	0x03A0, r25
     760:	80 93 9f 03 	sts	0x039F, r24
			share[2] = 0;
     764:	12 82       	std	Z+2, r1	; 0x02
     766:	08 95       	ret
		}
	} else if (share[7] == 2) { // other bot ready for communication
     768:	82 30       	cpi	r24, 0x02	; 2
     76a:	19 f4       	brne	.+6      	; 0x772 <updateShareB+0x4a>
		receiveAB(share);
     76c:	cf 01       	movw	r24, r30
     76e:	0e 94 38 03 	call	0x670	; 0x670 <receiveAB>
     772:	08 95       	ret

00000774 <changeReadyA>:
	}
}

void changeReadyA(char share[], int val) {
	botAstat.ready = val;
     774:	60 93 f4 09 	sts	0x09F4, r22
     778:	70 93 f5 09 	sts	0x09F5, r23
	share[1] = val;
     77c:	fc 01       	movw	r30, r24
     77e:	61 83       	std	Z+1, r22	; 0x01
}
     780:	08 95       	ret

00000782 <changeReadyB>:

void changeReadyB(char share[], int val) {
	botBstat.ready = val;
     782:	60 93 ec 09 	sts	0x09EC, r22
     786:	70 93 ed 09 	sts	0x09ED, r23
	share[5] = val;
     78a:	fc 01       	movw	r30, r24
     78c:	65 83       	std	Z+5, r22	; 0x05
     78e:	08 95       	ret

00000790 <addToArr>:
void addToArr(int array[], int a, int b, int c, int d, int e, int f) {
     790:	cf 92       	push	r12
     792:	df 92       	push	r13
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	fc 01       	movw	r30, r24
	array[0] = a; array[1] = b; array[2] = c;
     79e:	71 83       	std	Z+1, r23	; 0x01
     7a0:	60 83       	st	Z, r22
     7a2:	53 83       	std	Z+3, r21	; 0x03
     7a4:	42 83       	std	Z+2, r20	; 0x02
     7a6:	35 83       	std	Z+5, r19	; 0x05
     7a8:	24 83       	std	Z+4, r18	; 0x04
	array[3] = d; array[4] = e; array[5] = f;
     7aa:	17 83       	std	Z+7, r17	; 0x07
     7ac:	06 83       	std	Z+6, r16	; 0x06
     7ae:	f1 86       	std	Z+9, r15	; 0x09
     7b0:	e0 86       	std	Z+8, r14	; 0x08
     7b2:	d3 86       	std	Z+11, r13	; 0x0b
     7b4:	c2 86       	std	Z+10, r12	; 0x0a
}
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	08 95       	ret

000007c4 <getNodesOfNote>:

int getNodesOfNote(int note, int nodeList[]) {
     7c4:	9c 01       	movw	r18, r24
     7c6:	fb 01       	movw	r30, r22
	if (note < 25) {
     7c8:	89 31       	cpi	r24, 0x19	; 25
     7ca:	91 05       	cpc	r25, r1
     7cc:	3c f4       	brge	.+14     	; 0x7dc <getNodesOfNote+0x18>
		nodeList[0] = note - 1;
     7ce:	21 50       	subi	r18, 0x01	; 1
     7d0:	30 40       	sbci	r19, 0x00	; 0
     7d2:	31 83       	std	Z+1, r19	; 0x01
     7d4:	20 83       	st	Z, r18
     7d6:	21 e0       	ldi	r18, 0x01	; 1
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	cf c0       	rjmp	.+414    	; 0x97a <getNodesOfNote+0x1b6>
		return 1;
	} else {
		switch(note) {
     7dc:	8d 31       	cpi	r24, 0x1D	; 29
     7de:	91 05       	cpc	r25, r1
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <getNodesOfNote+0x20>
     7e2:	65 c0       	rjmp	.+202    	; 0x8ae <getNodesOfNote+0xea>
     7e4:	8e 31       	cpi	r24, 0x1E	; 30
     7e6:	91 05       	cpc	r25, r1
     7e8:	8c f4       	brge	.+34     	; 0x80c <getNodesOfNote+0x48>
     7ea:	8a 31       	cpi	r24, 0x1A	; 26
     7ec:	91 05       	cpc	r25, r1
     7ee:	61 f1       	breq	.+88     	; 0x848 <getNodesOfNote+0x84>
     7f0:	8b 31       	cpi	r24, 0x1B	; 27
     7f2:	91 05       	cpc	r25, r1
     7f4:	24 f4       	brge	.+8      	; 0x7fe <getNodesOfNote+0x3a>
     7f6:	89 31       	cpi	r24, 0x19	; 25
     7f8:	91 05       	cpc	r25, r1
     7fa:	c1 f4       	brne	.+48     	; 0x82c <getNodesOfNote+0x68>
     7fc:	1a c0       	rjmp	.+52     	; 0x832 <getNodesOfNote+0x6e>
     7fe:	8b 31       	cpi	r24, 0x1B	; 27
     800:	91 05       	cpc	r25, r1
     802:	c9 f1       	breq	.+114    	; 0x876 <getNodesOfNote+0xb2>
     804:	8c 31       	cpi	r24, 0x1C	; 28
     806:	91 05       	cpc	r25, r1
     808:	89 f4       	brne	.+34     	; 0x82c <getNodesOfNote+0x68>
     80a:	42 c0       	rjmp	.+132    	; 0x890 <getNodesOfNote+0xcc>
     80c:	8f 31       	cpi	r24, 0x1F	; 31
     80e:	91 05       	cpc	r25, r1
     810:	09 f4       	brne	.+2      	; 0x814 <getNodesOfNote+0x50>
     812:	73 c0       	rjmp	.+230    	; 0x8fa <getNodesOfNote+0x136>
     814:	8f 31       	cpi	r24, 0x1F	; 31
     816:	91 05       	cpc	r25, r1
     818:	0c f4       	brge	.+2      	; 0x81c <getNodesOfNote+0x58>
     81a:	60 c0       	rjmp	.+192    	; 0x8dc <getNodesOfNote+0x118>
     81c:	80 32       	cpi	r24, 0x20	; 32
     81e:	91 05       	cpc	r25, r1
     820:	09 f4       	brne	.+2      	; 0x824 <getNodesOfNote+0x60>
     822:	7a c0       	rjmp	.+244    	; 0x918 <getNodesOfNote+0x154>
     824:	81 32       	cpi	r24, 0x21	; 33
     826:	91 05       	cpc	r25, r1
     828:	09 f4       	brne	.+2      	; 0x82c <getNodesOfNote+0x68>
     82a:	91 c0       	rjmp	.+290    	; 0x94e <getNodesOfNote+0x18a>
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	a4 c0       	rjmp	.+328    	; 0x97a <getNodesOfNote+0x1b6>
void addToArr(int array[], int a, int b, int c, int d, int e, int f) {
	array[0] = a; array[1] = b; array[2] = c;
     832:	11 82       	std	Z+1, r1	; 0x01
     834:	10 82       	st	Z, r1
     836:	88 e1       	ldi	r24, 0x18	; 24
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	93 83       	std	Z+3, r25	; 0x03
     83c:	82 83       	std	Z+2, r24	; 0x02
     83e:	35 83       	std	Z+5, r19	; 0x05
     840:	24 83       	std	Z+4, r18	; 0x04
	array[3] = d; array[4] = e; array[5] = f;
     842:	8a e1       	ldi	r24, 0x1A	; 26
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	91 c0       	rjmp	.+290    	; 0x96a <getNodesOfNote+0x1a6>
void addToArr(int array[], int a, int b, int c, int d, int e, int f) {
	array[0] = a; array[1] = b; array[2] = c;
     848:	88 e1       	ldi	r24, 0x18	; 24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	91 83       	std	Z+1, r25	; 0x01
     84e:	80 83       	st	Z, r24
     850:	89 e1       	ldi	r24, 0x19	; 25
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	93 83       	std	Z+3, r25	; 0x03
     856:	82 83       	std	Z+2, r24	; 0x02
     858:	8b e1       	ldi	r24, 0x1B	; 27
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	95 83       	std	Z+5, r25	; 0x05
     85e:	84 83       	std	Z+4, r24	; 0x04
	array[3] = d; array[4] = e; array[5] = f;
     860:	8c e1       	ldi	r24, 0x1C	; 28
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	97 83       	std	Z+7, r25	; 0x07
     866:	86 83       	std	Z+6, r24	; 0x06
     868:	8d e1       	ldi	r24, 0x1D	; 29
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	91 87       	std	Z+9, r25	; 0x09
     86e:	80 87       	std	Z+8, r24	; 0x08
     870:	8e e1       	ldi	r24, 0x1E	; 30
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	67 c0       	rjmp	.+206    	; 0x944 <getNodesOfNote+0x180>
void addToArr(int array[], int a, int b, int c, int d, int e, int f) {
	array[0] = a; array[1] = b; array[2] = c;
     876:	84 e0       	ldi	r24, 0x04	; 4
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	91 83       	std	Z+1, r25	; 0x01
     87c:	80 83       	st	Z, r24
     87e:	33 83       	std	Z+3, r19	; 0x03
     880:	22 83       	std	Z+2, r18	; 0x02
     882:	8c e1       	ldi	r24, 0x1C	; 28
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	95 83       	std	Z+5, r25	; 0x05
     888:	84 83       	std	Z+4, r24	; 0x04
	array[3] = d; array[4] = e; array[5] = f;
     88a:	8f e1       	ldi	r24, 0x1F	; 31
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	6d c0       	rjmp	.+218    	; 0x96a <getNodesOfNote+0x1a6>
void addToArr(int array[], int a, int b, int c, int d, int e, int f) {
	array[0] = a; array[1] = b; array[2] = c;
     890:	88 e0       	ldi	r24, 0x08	; 8
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	91 83       	std	Z+1, r25	; 0x01
     896:	80 83       	st	Z, r24
     898:	80 e2       	ldi	r24, 0x20	; 32
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	93 83       	std	Z+3, r25	; 0x03
     89e:	82 83       	std	Z+2, r24	; 0x02
     8a0:	81 e2       	ldi	r24, 0x21	; 33
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	95 83       	std	Z+5, r25	; 0x05
     8a6:	84 83       	std	Z+4, r24	; 0x04
	array[3] = d; array[4] = e; array[5] = f;
     8a8:	82 e2       	ldi	r24, 0x22	; 34
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	5e c0       	rjmp	.+188    	; 0x96a <getNodesOfNote+0x1a6>
void addToArr(int array[], int a, int b, int c, int d, int e, int f) {
	array[0] = a; array[1] = b; array[2] = c;
     8ae:	80 e2       	ldi	r24, 0x20	; 32
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	91 83       	std	Z+1, r25	; 0x01
     8b4:	80 83       	st	Z, r24
     8b6:	81 e2       	ldi	r24, 0x21	; 33
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	93 83       	std	Z+3, r25	; 0x03
     8bc:	82 83       	std	Z+2, r24	; 0x02
     8be:	83 e2       	ldi	r24, 0x23	; 35
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	95 83       	std	Z+5, r25	; 0x05
     8c4:	84 83       	std	Z+4, r24	; 0x04
	array[3] = d; array[4] = e; array[5] = f;
     8c6:	84 e2       	ldi	r24, 0x24	; 36
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	97 83       	std	Z+7, r25	; 0x07
     8cc:	86 83       	std	Z+6, r24	; 0x06
     8ce:	85 e2       	ldi	r24, 0x25	; 37
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	91 87       	std	Z+9, r25	; 0x09
     8d4:	80 87       	std	Z+8, r24	; 0x08
     8d6:	86 e2       	ldi	r24, 0x26	; 38
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	34 c0       	rjmp	.+104    	; 0x944 <getNodesOfNote+0x180>
void addToArr(int array[], int a, int b, int c, int d, int e, int f) {
	array[0] = a; array[1] = b; array[2] = c;
     8dc:	8c e0       	ldi	r24, 0x0C	; 12
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	91 83       	std	Z+1, r25	; 0x01
     8e2:	80 83       	st	Z, r24
     8e4:	83 e2       	ldi	r24, 0x23	; 35
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	93 83       	std	Z+3, r25	; 0x03
     8ea:	82 83       	std	Z+2, r24	; 0x02
     8ec:	84 e2       	ldi	r24, 0x24	; 36
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	95 83       	std	Z+5, r25	; 0x05
     8f2:	84 83       	std	Z+4, r24	; 0x04
	array[3] = d; array[4] = e; array[5] = f;
     8f4:	87 e2       	ldi	r24, 0x27	; 39
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	38 c0       	rjmp	.+112    	; 0x96a <getNodesOfNote+0x1a6>
void addToArr(int array[], int a, int b, int c, int d, int e, int f) {
	array[0] = a; array[1] = b; array[2] = c;
     8fa:	80 e1       	ldi	r24, 0x10	; 16
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	91 83       	std	Z+1, r25	; 0x01
     900:	80 83       	st	Z, r24
     902:	88 e2       	ldi	r24, 0x28	; 40
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	93 83       	std	Z+3, r25	; 0x03
     908:	82 83       	std	Z+2, r24	; 0x02
     90a:	89 e2       	ldi	r24, 0x29	; 41
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	95 83       	std	Z+5, r25	; 0x05
     910:	84 83       	std	Z+4, r24	; 0x04
	array[3] = d; array[4] = e; array[5] = f;
     912:	8a e2       	ldi	r24, 0x2A	; 42
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	29 c0       	rjmp	.+82     	; 0x96a <getNodesOfNote+0x1a6>
void addToArr(int array[], int a, int b, int c, int d, int e, int f) {
	array[0] = a; array[1] = b; array[2] = c;
     918:	88 e2       	ldi	r24, 0x28	; 40
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	91 83       	std	Z+1, r25	; 0x01
     91e:	80 83       	st	Z, r24
     920:	89 e2       	ldi	r24, 0x29	; 41
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	93 83       	std	Z+3, r25	; 0x03
     926:	82 83       	std	Z+2, r24	; 0x02
     928:	8b e2       	ldi	r24, 0x2B	; 43
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	95 83       	std	Z+5, r25	; 0x05
     92e:	84 83       	std	Z+4, r24	; 0x04
	array[3] = d; array[4] = e; array[5] = f;
     930:	8c e2       	ldi	r24, 0x2C	; 44
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	97 83       	std	Z+7, r25	; 0x07
     936:	86 83       	std	Z+6, r24	; 0x06
     938:	8d e2       	ldi	r24, 0x2D	; 45
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	91 87       	std	Z+9, r25	; 0x09
     93e:	80 87       	std	Z+8, r24	; 0x08
     940:	8e e2       	ldi	r24, 0x2E	; 46
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	93 87       	std	Z+11, r25	; 0x0b
     946:	82 87       	std	Z+10, r24	; 0x0a
     948:	26 e0       	ldi	r18, 0x06	; 6
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	16 c0       	rjmp	.+44     	; 0x97a <getNodesOfNote+0x1b6>
void addToArr(int array[], int a, int b, int c, int d, int e, int f) {
	array[0] = a; array[1] = b; array[2] = c;
     94e:	84 e1       	ldi	r24, 0x14	; 20
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	91 83       	std	Z+1, r25	; 0x01
     954:	80 83       	st	Z, r24
     956:	8b e2       	ldi	r24, 0x2B	; 43
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	93 83       	std	Z+3, r25	; 0x03
     95c:	82 83       	std	Z+2, r24	; 0x02
     95e:	8c e2       	ldi	r24, 0x2C	; 44
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	95 83       	std	Z+5, r25	; 0x05
     964:	84 83       	std	Z+4, r24	; 0x04
	array[3] = d; array[4] = e; array[5] = f;
     966:	8f e2       	ldi	r24, 0x2F	; 47
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	97 83       	std	Z+7, r25	; 0x07
     96c:	86 83       	std	Z+6, r24	; 0x06
     96e:	11 86       	std	Z+9, r1	; 0x09
     970:	10 86       	std	Z+8, r1	; 0x08
     972:	13 86       	std	Z+11, r1	; 0x0b
     974:	12 86       	std	Z+10, r1	; 0x0a
     976:	24 e0       	ldi	r18, 0x04	; 4
     978:	30 e0       	ldi	r19, 0x00	; 0
			case 32: addToArr(nodeList,40,41,43,44,45,46); return 6;
			case 33: addToArr(nodeList,20,43,44,47,0,0); return 4;
		}
	}
	return 0;
}
     97a:	c9 01       	movw	r24, r18
     97c:	08 95       	ret

0000097e <getOtherSide>:

int getOtherSide(int edgeIndex, int oneEnd) {
     97e:	9c 01       	movw	r18, r24
	if (edgeList[edgeIndex].start != oneEnd)
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	fc 01       	movw	r30, r24
     986:	43 e0       	ldi	r20, 0x03	; 3
     988:	ee 0f       	add	r30, r30
     98a:	ff 1f       	adc	r31, r31
     98c:	4a 95       	dec	r20
     98e:	e1 f7       	brne	.-8      	; 0x988 <getOtherSide+0xa>
     990:	e8 1b       	sub	r30, r24
     992:	f9 0b       	sbc	r31, r25
     994:	e9 58       	subi	r30, 0x89	; 137
     996:	f9 4f       	sbci	r31, 0xF9	; 249
     998:	01 90       	ld	r0, Z+
     99a:	f0 81       	ld	r31, Z
     99c:	e0 2d       	mov	r30, r0
     99e:	e6 17       	cp	r30, r22
     9a0:	f7 07       	cpc	r31, r23
     9a2:	81 f4       	brne	.+32     	; 0x9c4 <getOtherSide+0x46>
		return edgeList[edgeIndex].start;
	return edgeList[edgeIndex].end;
     9a4:	c9 01       	movw	r24, r18
     9a6:	88 0f       	add	r24, r24
     9a8:	99 1f       	adc	r25, r25
     9aa:	fc 01       	movw	r30, r24
     9ac:	23 e0       	ldi	r18, 0x03	; 3
     9ae:	ee 0f       	add	r30, r30
     9b0:	ff 1f       	adc	r31, r31
     9b2:	2a 95       	dec	r18
     9b4:	e1 f7       	brne	.-8      	; 0x9ae <getOtherSide+0x30>
     9b6:	e8 1b       	sub	r30, r24
     9b8:	f9 0b       	sbc	r31, r25
     9ba:	e9 58       	subi	r30, 0x89	; 137
     9bc:	f9 4f       	sbci	r31, 0xF9	; 249
     9be:	02 80       	ldd	r0, Z+2	; 0x02
     9c0:	f3 81       	ldd	r31, Z+3	; 0x03
     9c2:	e0 2d       	mov	r30, r0
}
     9c4:	cf 01       	movw	r24, r30
     9c6:	08 95       	ret

000009c8 <removeFromList>:

void removeFromList(int list[],int listLen,int pos) {
     9c8:	9a 01       	movw	r18, r20
     9ca:	fa 01       	movw	r30, r20
     9cc:	31 96       	adiw	r30, 0x01	; 1
     9ce:	ee 0f       	add	r30, r30
     9d0:	ff 1f       	adc	r31, r31
     9d2:	e8 0f       	add	r30, r24
     9d4:	f9 1f       	adc	r31, r25
     9d6:	d9 01       	movw	r26, r18
     9d8:	aa 0f       	add	r26, r26
     9da:	bb 1f       	adc	r27, r27
     9dc:	a8 0f       	add	r26, r24
     9de:	b9 1f       	adc	r27, r25
	int i;
	for (i = pos; i < listLen-1; i++) {
     9e0:	61 50       	subi	r22, 0x01	; 1
     9e2:	70 40       	sbci	r23, 0x00	; 0
     9e4:	06 c0       	rjmp	.+12     	; 0x9f2 <removeFromList+0x2a>
		list[i] = list[i+1];
     9e6:	81 91       	ld	r24, Z+
     9e8:	91 91       	ld	r25, Z+
     9ea:	8d 93       	st	X+, r24
     9ec:	9d 93       	st	X+, r25
	return edgeList[edgeIndex].end;
}

void removeFromList(int list[],int listLen,int pos) {
	int i;
	for (i = pos; i < listLen-1; i++) {
     9ee:	2f 5f       	subi	r18, 0xFF	; 255
     9f0:	3f 4f       	sbci	r19, 0xFF	; 255
     9f2:	26 17       	cp	r18, r22
     9f4:	37 07       	cpc	r19, r23
     9f6:	bc f3       	brlt	.-18     	; 0x9e6 <removeFromList+0x1e>
		list[i] = list[i+1];
	}
}
     9f8:	08 95       	ret

000009fa <addToList>:

void addToList(int list[],int listLen,int pos,int el) {
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	ec 01       	movw	r28, r24
     a00:	fb 01       	movw	r30, r22
     a02:	31 97       	sbiw	r30, 0x01	; 1
     a04:	ee 0f       	add	r30, r30
     a06:	ff 1f       	adc	r31, r31
     a08:	ec 0f       	add	r30, r28
     a0a:	fd 1f       	adc	r31, r29
     a0c:	db 01       	movw	r26, r22
     a0e:	aa 0f       	add	r26, r26
     a10:	bb 1f       	adc	r27, r27
     a12:	ac 0f       	add	r26, r28
     a14:	bd 1f       	adc	r27, r29
     a16:	07 c0       	rjmp	.+14     	; 0xa26 <addToList+0x2c>
	int i;
	for (i = listLen-1; i >= pos; i--) {
		list[i+1] = list[i];
     a18:	80 81       	ld	r24, Z
     a1a:	91 81       	ldd	r25, Z+1	; 0x01
     a1c:	11 96       	adiw	r26, 0x01	; 1
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	32 97       	sbiw	r30, 0x02	; 2
     a24:	12 97       	sbiw	r26, 0x02	; 2
     a26:	61 50       	subi	r22, 0x01	; 1
     a28:	70 40       	sbci	r23, 0x00	; 0
	}
}

void addToList(int list[],int listLen,int pos,int el) {
	int i;
	for (i = listLen-1; i >= pos; i--) {
     a2a:	64 17       	cp	r22, r20
     a2c:	75 07       	cpc	r23, r21
     a2e:	a4 f7       	brge	.-24     	; 0xa18 <addToList+0x1e>
		list[i+1] = list[i];
	}
	list[pos] = el;
     a30:	44 0f       	add	r20, r20
     a32:	55 1f       	adc	r21, r21
     a34:	c4 0f       	add	r28, r20
     a36:	d5 1f       	adc	r29, r21
     a38:	39 83       	std	Y+1, r19	; 0x01
     a3a:	28 83       	st	Y, r18
}
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <addPath>:

void addPath(struct path bot[], int pos, int src, int dest) {
     a42:	2f 92       	push	r2
     a44:	3f 92       	push	r3
     a46:	4f 92       	push	r4
     a48:	5f 92       	push	r5
     a4a:	6f 92       	push	r6
     a4c:	7f 92       	push	r7
     a4e:	8f 92       	push	r8
     a50:	9f 92       	push	r9
     a52:	af 92       	push	r10
     a54:	bf 92       	push	r11
     a56:	cf 92       	push	r12
     a58:	df 92       	push	r13
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	df 93       	push	r29
     a64:	cf 93       	push	r28
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	ca 53       	subi	r28, 0x3A	; 58
     a6c:	d1 40       	sbci	r29, 0x01	; 1
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	8a 01       	movw	r16, r20
	int dests[6], destsCount, prevNode[49], dist[49], list[50], listLen = 0, i, j, k, x;
	bot[pos].note = dest;
     a7a:	48 e5       	ldi	r20, 0x58	; 88
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	64 9f       	mul	r22, r20
     a80:	40 01       	movw	r8, r0
     a82:	65 9f       	mul	r22, r21
     a84:	90 0c       	add	r9, r0
     a86:	74 9f       	mul	r23, r20
     a88:	90 0c       	add	r9, r0
     a8a:	11 24       	eor	r1, r1
     a8c:	88 0e       	add	r8, r24
     a8e:	99 1e       	adc	r9, r25
     a90:	d4 01       	movw	r26, r8
     a92:	13 96       	adiw	r26, 0x03	; 3
     a94:	3c 93       	st	X, r19
     a96:	2e 93       	st	-X, r18
     a98:	12 97       	sbiw	r26, 0x02	; 2
	destsCount = getNodesOfNote(dest, dests);
     a9a:	c9 01       	movw	r24, r18
     a9c:	be 01       	movw	r22, r28
     a9e:	6f 5f       	subi	r22, 0xFF	; 255
     aa0:	7f 4f       	sbci	r23, 0xFF	; 255
     aa2:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <getNodesOfNote>
     aa6:	cb 5c       	subi	r28, 0xCB	; 203
     aa8:	de 4f       	sbci	r29, 0xFE	; 254
     aaa:	99 83       	std	Y+1, r25	; 0x01
     aac:	88 83       	st	Y, r24
     aae:	c5 53       	subi	r28, 0x35	; 53
     ab0:	d1 40       	sbci	r29, 0x01	; 1
     ab2:	fe 01       	movw	r30, r28
     ab4:	3d 96       	adiw	r30, 0x0d	; 13
	for (i = 0; i < 49; i++)
		prevNode[i] = -1;
     ab6:	2f ef       	ldi	r18, 0xFF	; 255
     ab8:	3f ef       	ldi	r19, 0xFF	; 255

void addPath(struct path bot[], int pos, int src, int dest) {
	int dests[6], destsCount, prevNode[49], dist[49], list[50], listLen = 0, i, j, k, x;
	bot[pos].note = dest;
	destsCount = getNodesOfNote(dest, dests);
	for (i = 0; i < 49; i++)
     aba:	ce 01       	movw	r24, r28
     abc:	81 59       	subi	r24, 0x91	; 145
     abe:	9f 4f       	sbci	r25, 0xFF	; 255
		prevNode[i] = -1;
     ac0:	21 93       	st	Z+, r18
     ac2:	31 93       	st	Z+, r19

void addPath(struct path bot[], int pos, int src, int dest) {
	int dests[6], destsCount, prevNode[49], dist[49], list[50], listLen = 0, i, j, k, x;
	bot[pos].note = dest;
	destsCount = getNodesOfNote(dest, dests);
	for (i = 0; i < 49; i++)
     ac4:	e8 17       	cp	r30, r24
     ac6:	f9 07       	cpc	r31, r25
     ac8:	d9 f7       	brne	.-10     	; 0xac0 <addPath+0x7e>
		prevNode[i] = -1;
	for (i = 0; i < 49; i++)
		dist[i] = 32767;
     aca:	2f ef       	ldi	r18, 0xFF	; 255
     acc:	3f e7       	ldi	r19, 0x7F	; 127
	int dests[6], destsCount, prevNode[49], dist[49], list[50], listLen = 0, i, j, k, x;
	bot[pos].note = dest;
	destsCount = getNodesOfNote(dest, dests);
	for (i = 0; i < 49; i++)
		prevNode[i] = -1;
	for (i = 0; i < 49; i++)
     ace:	af 01       	movw	r20, r30
     ad0:	ce 01       	movw	r24, r28
     ad2:	8f 52       	subi	r24, 0x2F	; 47
     ad4:	9f 4f       	sbci	r25, 0xFF	; 255
		dist[i] = 32767;
     ad6:	21 93       	st	Z+, r18
     ad8:	31 93       	st	Z+, r19
	int dests[6], destsCount, prevNode[49], dist[49], list[50], listLen = 0, i, j, k, x;
	bot[pos].note = dest;
	destsCount = getNodesOfNote(dest, dests);
	for (i = 0; i < 49; i++)
		prevNode[i] = -1;
	for (i = 0; i < 49; i++)
     ada:	e8 17       	cp	r30, r24
     adc:	f9 07       	cpc	r31, r25
     ade:	d9 f7       	brne	.-10     	; 0xad6 <addPath+0x94>
void addToList(int list[],int listLen,int pos,int el) {
	int i;
	for (i = listLen-1; i >= pos; i--) {
		list[i+1] = list[i];
	}
	list[pos] = el;
     ae0:	11 83       	std	Z+1, r17	; 0x01
     ae2:	00 83       	st	Z, r16
	for (i = 0; i < 49; i++)
		prevNode[i] = -1;
	for (i = 0; i < 49; i++)
		dist[i] = 32767;
	addToList(list, listLen++, 0, src);
	dist[src] = 0;
     ae4:	00 0f       	add	r16, r16
     ae6:	11 1f       	adc	r17, r17
     ae8:	04 0f       	add	r16, r20
     aea:	15 1f       	adc	r17, r21
     aec:	f8 01       	movw	r30, r16
     aee:	11 82       	std	Z+1, r1	; 0x01
     af0:	10 82       	st	Z, r1
     af2:	01 e0       	ldi	r16, 0x01	; 1
     af4:	10 e0       	ldi	r17, 0x00	; 0
	while (listLen > 0) {
		for (i = 0; i < destsCount; i++) {
			if (prevNode[i] != -1) {
     af6:	51 ed       	ldi	r21, 0xD1	; 209
     af8:	45 2e       	mov	r4, r21
     afa:	51 2c       	mov	r5, r1
     afc:	4c 0e       	add	r4, r28
     afe:	5d 1e       	adc	r5, r29
				for (j = 0; j < listLen; j++) {
					if (dist[list[j]] >= dist[dests[i]])
     b00:	4f e6       	ldi	r20, 0x6F	; 111
     b02:	24 2e       	mov	r2, r20
     b04:	31 2c       	mov	r3, r1
     b06:	2c 0e       	add	r2, r28
     b08:	3d 1e       	adc	r3, r29
     b0a:	4c c1       	rjmp	.+664    	; 0xda4 <addPath+0x362>
		dist[i] = 32767;
	addToList(list, listLen++, 0, src);
	dist[src] = 0;
	while (listLen > 0) {
		for (i = 0; i < destsCount; i++) {
			if (prevNode[i] != -1) {
     b0c:	d6 01       	movw	r26, r12
     b0e:	8d 91       	ld	r24, X+
     b10:	9c 91       	ld	r25, X
     b12:	8f 5f       	subi	r24, 0xFF	; 255
     b14:	9f 4f       	sbci	r25, 0xFF	; 255
     b16:	89 f1       	breq	.+98     	; 0xb7a <addPath+0x138>
     b18:	a2 01       	movw	r20, r4
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	2a c0       	rjmp	.+84     	; 0xb74 <addPath+0x132>
				for (j = 0; j < listLen; j++) {
					if (dist[list[j]] >= dist[dests[i]])
     b20:	fa 01       	movw	r30, r20
     b22:	a0 81       	ld	r26, Z
     b24:	b1 81       	ldd	r27, Z+1	; 0x01
     b26:	aa 0f       	add	r26, r26
     b28:	bb 1f       	adc	r27, r27
     b2a:	a2 0d       	add	r26, r2
     b2c:	b3 1d       	adc	r27, r3
     b2e:	f5 01       	movw	r30, r10
     b30:	80 81       	ld	r24, Z
     b32:	91 81       	ldd	r25, Z+1	; 0x01
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	82 0d       	add	r24, r2
     b3a:	93 1d       	adc	r25, r3
     b3c:	2d 91       	ld	r18, X+
     b3e:	3c 91       	ld	r19, X
     b40:	dc 01       	movw	r26, r24
     b42:	8d 91       	ld	r24, X+
     b44:	9c 91       	ld	r25, X
     b46:	28 17       	cp	r18, r24
     b48:	39 07       	cpc	r19, r25
     b4a:	84 f0       	brlt	.+32     	; 0xb6c <addPath+0x12a>
						removeFromList(list, listLen--, j);
     b4c:	01 50       	subi	r16, 0x01	; 1
     b4e:	10 40       	sbci	r17, 0x00	; 0
     b50:	da 01       	movw	r26, r20
     b52:	12 96       	adiw	r26, 0x02	; 2
     b54:	9b 01       	movw	r18, r22
     b56:	fa 01       	movw	r30, r20
     b58:	06 c0       	rjmp	.+12     	; 0xb66 <addPath+0x124>
}

void removeFromList(int list[],int listLen,int pos) {
	int i;
	for (i = pos; i < listLen-1; i++) {
		list[i] = list[i+1];
     b5a:	8d 91       	ld	r24, X+
     b5c:	9d 91       	ld	r25, X+
     b5e:	81 93       	st	Z+, r24
     b60:	91 93       	st	Z+, r25
	return edgeList[edgeIndex].end;
}

void removeFromList(int list[],int listLen,int pos) {
	int i;
	for (i = pos; i < listLen-1; i++) {
     b62:	2f 5f       	subi	r18, 0xFF	; 255
     b64:	3f 4f       	sbci	r19, 0xFF	; 255
     b66:	20 17       	cp	r18, r16
     b68:	31 07       	cpc	r19, r17
     b6a:	bc f3       	brlt	.-18     	; 0xb5a <addPath+0x118>
	addToList(list, listLen++, 0, src);
	dist[src] = 0;
	while (listLen > 0) {
		for (i = 0; i < destsCount; i++) {
			if (prevNode[i] != -1) {
				for (j = 0; j < listLen; j++) {
     b6c:	6f 5f       	subi	r22, 0xFF	; 255
     b6e:	7f 4f       	sbci	r23, 0xFF	; 255
     b70:	4e 5f       	subi	r20, 0xFE	; 254
     b72:	5f 4f       	sbci	r21, 0xFF	; 255
     b74:	60 17       	cp	r22, r16
     b76:	71 07       	cpc	r23, r17
     b78:	9c f2       	brlt	.-90     	; 0xb20 <addPath+0xde>
	for (i = 0; i < 49; i++)
		dist[i] = 32767;
	addToList(list, listLen++, 0, src);
	dist[src] = 0;
	while (listLen > 0) {
		for (i = 0; i < destsCount; i++) {
     b7a:	08 94       	sec
     b7c:	e1 1c       	adc	r14, r1
     b7e:	f1 1c       	adc	r15, r1
     b80:	e2 e0       	ldi	r30, 0x02	; 2
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	ce 0e       	add	r12, r30
     b86:	df 1e       	adc	r13, r31
     b88:	ae 0e       	add	r10, r30
     b8a:	bf 1e       	adc	r11, r31
     b8c:	cb 5c       	subi	r28, 0xCB	; 203
     b8e:	de 4f       	sbci	r29, 0xFE	; 254
     b90:	28 81       	ld	r18, Y
     b92:	39 81       	ldd	r19, Y+1	; 0x01
     b94:	c5 53       	subi	r28, 0x35	; 53
     b96:	d1 40       	sbci	r29, 0x01	; 1
     b98:	e2 16       	cp	r14, r18
     b9a:	f3 06       	cpc	r15, r19
     b9c:	0c f4       	brge	.+2      	; 0xba0 <addPath+0x15e>
     b9e:	b6 cf       	rjmp	.-148    	; 0xb0c <addPath+0xca>
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	e8 c0       	rjmp	.+464    	; 0xd76 <addPath+0x334>
						removeFromList(list, listLen--, j);
				}
			}
		}
		for (i = 0; i < listLen; i++) {
			k = list[i];
     ba6:	fa 01       	movw	r30, r20
     ba8:	ee 0f       	add	r30, r30
     baa:	ff 1f       	adc	r31, r31
     bac:	e4 0d       	add	r30, r4
     bae:	f5 1d       	adc	r31, r5
     bb0:	60 80       	ld	r6, Z
     bb2:	71 80       	ldd	r7, Z+1	; 0x01
			removeFromList(list, listLen--, i--);
     bb4:	01 50       	subi	r16, 0x01	; 1
     bb6:	10 40       	sbci	r17, 0x00	; 0
		list[i+1] = list[i];
	}
	list[pos] = el;
}

void addPath(struct path bot[], int pos, int src, int dest) {
     bb8:	da 01       	movw	r26, r20
     bba:	11 96       	adiw	r26, 0x01	; 1
     bbc:	aa 0f       	add	r26, r26
     bbe:	bb 1f       	adc	r27, r27
     bc0:	a4 0d       	add	r26, r4
     bc2:	b5 1d       	adc	r27, r5
     bc4:	9a 01       	movw	r18, r20
     bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <addPath+0x192>
}

void removeFromList(int list[],int listLen,int pos) {
	int i;
	for (i = pos; i < listLen-1; i++) {
		list[i] = list[i+1];
     bc8:	8d 91       	ld	r24, X+
     bca:	9d 91       	ld	r25, X+
     bcc:	81 93       	st	Z+, r24
     bce:	91 93       	st	Z+, r25
	return edgeList[edgeIndex].end;
}

void removeFromList(int list[],int listLen,int pos) {
	int i;
	for (i = pos; i < listLen-1; i++) {
     bd0:	2f 5f       	subi	r18, 0xFF	; 255
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	20 17       	cp	r18, r16
     bd6:	31 07       	cpc	r19, r17
     bd8:	bc f3       	brlt	.-18     	; 0xbc8 <addPath+0x186>
				}
			}
		}
		for (i = 0; i < listLen; i++) {
			k = list[i];
			removeFromList(list, listLen--, i--);
     bda:	7a 01       	movw	r14, r20
     bdc:	08 94       	sec
     bde:	e1 08       	sbc	r14, r1
     be0:	f1 08       	sbc	r15, r1
			for (j = 0; j < nodes[k].edgeCount; j++) {
     be2:	c3 01       	movw	r24, r6
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	9c 01       	movw	r18, r24
     bea:	53 e0       	ldi	r21, 0x03	; 3
     bec:	22 0f       	add	r18, r18
     bee:	33 1f       	adc	r19, r19
     bf0:	5a 95       	dec	r21
     bf2:	e1 f7       	brne	.-8      	; 0xbec <addPath+0x1aa>
     bf4:	28 0f       	add	r18, r24
     bf6:	39 1f       	adc	r19, r25
     bf8:	f9 01       	movw	r30, r18
     bfa:	e4 59       	subi	r30, 0x94	; 148
     bfc:	f2 4f       	sbci	r31, 0xF2	; 242
     bfe:	44 81       	ldd	r20, Z+4	; 0x04
     c00:	55 81       	ldd	r21, Z+5	; 0x05
     c02:	c9 5c       	subi	r28, 0xC9	; 201
     c04:	de 4f       	sbci	r29, 0xFE	; 254
     c06:	59 83       	std	Y+1, r21	; 0x01
     c08:	48 83       	st	Y, r20
     c0a:	c7 53       	subi	r28, 0x37	; 55
     c0c:	d1 40       	sbci	r29, 0x01	; 1
     c0e:	42 e7       	ldi	r20, 0x72	; 114
     c10:	c4 2e       	mov	r12, r20
     c12:	4d e0       	ldi	r20, 0x0D	; 13
     c14:	d4 2e       	mov	r13, r20
     c16:	c2 0e       	add	r12, r18
     c18:	d3 1e       	adc	r13, r19
     c1a:	aa 24       	eor	r10, r10
     c1c:	bb 24       	eor	r11, r11
				if (edgeList[nodes[k].edgeIndices[j]].obstacle == 1)
					continue;
				x = getOtherSide(nodes[k].edgeIndices[j], k);
				if (dist[x] > dist[k] + edgeList[nodes[k].edgeIndices[j]].distance) {
     c1e:	d1 01       	movw	r26, r2
     c20:	a8 0f       	add	r26, r24
     c22:	b9 1f       	adc	r27, r25
     c24:	c7 5c       	subi	r28, 0xC7	; 199
     c26:	de 4f       	sbci	r29, 0xFE	; 254
     c28:	b9 83       	std	Y+1, r27	; 0x01
     c2a:	a8 83       	st	Y, r26
     c2c:	c9 53       	subi	r28, 0x39	; 57
     c2e:	d1 40       	sbci	r29, 0x01	; 1
     c30:	95 c0       	rjmp	.+298    	; 0xd5c <addPath+0x31a>
		}
		for (i = 0; i < listLen; i++) {
			k = list[i];
			removeFromList(list, listLen--, i--);
			for (j = 0; j < nodes[k].edgeCount; j++) {
				if (edgeList[nodes[k].edgeIndices[j]].obstacle == 1)
     c32:	f6 01       	movw	r30, r12
     c34:	20 81       	ld	r18, Z
     c36:	31 81       	ldd	r19, Z+1	; 0x01
     c38:	c9 01       	movw	r24, r18
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	fc 01       	movw	r30, r24
     c40:	a3 e0       	ldi	r26, 0x03	; 3
     c42:	ee 0f       	add	r30, r30
     c44:	ff 1f       	adc	r31, r31
     c46:	aa 95       	dec	r26
     c48:	e1 f7       	brne	.-8      	; 0xc42 <addPath+0x200>
     c4a:	e8 1b       	sub	r30, r24
     c4c:	f9 0b       	sbc	r31, r25
     c4e:	e9 58       	subi	r30, 0x89	; 137
     c50:	f9 4f       	sbci	r31, 0xF9	; 249
     c52:	84 81       	ldd	r24, Z+4	; 0x04
     c54:	95 81       	ldd	r25, Z+5	; 0x05
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	09 f4       	brne	.+2      	; 0xc5c <addPath+0x21a>
     c5a:	79 c0       	rjmp	.+242    	; 0xd4e <addPath+0x30c>
	}
	return 0;
}

int getOtherSide(int edgeIndex, int oneEnd) {
	if (edgeList[edgeIndex].start != oneEnd)
     c5c:	c9 01       	movw	r24, r18
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	fc 01       	movw	r30, r24
     c64:	63 e0       	ldi	r22, 0x03	; 3
     c66:	ee 0f       	add	r30, r30
     c68:	ff 1f       	adc	r31, r31
     c6a:	6a 95       	dec	r22
     c6c:	e1 f7       	brne	.-8      	; 0xc66 <addPath+0x224>
     c6e:	e8 1b       	sub	r30, r24
     c70:	f9 0b       	sbc	r31, r25
     c72:	e9 58       	subi	r30, 0x89	; 137
     c74:	f9 4f       	sbci	r31, 0xF9	; 249
     c76:	60 81       	ld	r22, Z
     c78:	71 81       	ldd	r23, Z+1	; 0x01
     c7a:	66 15       	cp	r22, r6
     c7c:	77 05       	cpc	r23, r7
     c7e:	79 f4       	brne	.+30     	; 0xc9e <addPath+0x25c>
		return edgeList[edgeIndex].start;
	return edgeList[edgeIndex].end;
     c80:	c9 01       	movw	r24, r18
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	fc 01       	movw	r30, r24
     c88:	43 e0       	ldi	r20, 0x03	; 3
     c8a:	ee 0f       	add	r30, r30
     c8c:	ff 1f       	adc	r31, r31
     c8e:	4a 95       	dec	r20
     c90:	e1 f7       	brne	.-8      	; 0xc8a <addPath+0x248>
     c92:	e8 1b       	sub	r30, r24
     c94:	f9 0b       	sbc	r31, r25
     c96:	e9 58       	subi	r30, 0x89	; 137
     c98:	f9 4f       	sbci	r31, 0xF9	; 249
     c9a:	62 81       	ldd	r22, Z+2	; 0x02
     c9c:	73 81       	ldd	r23, Z+3	; 0x03
			removeFromList(list, listLen--, i--);
			for (j = 0; j < nodes[k].edgeCount; j++) {
				if (edgeList[nodes[k].edgeIndices[j]].obstacle == 1)
					continue;
				x = getOtherSide(nodes[k].edgeIndices[j], k);
				if (dist[x] > dist[k] + edgeList[nodes[k].edgeIndices[j]].distance) {
     c9e:	c9 01       	movw	r24, r18
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	fc 01       	movw	r30, r24
     ca6:	23 e0       	ldi	r18, 0x03	; 3
     ca8:	ee 0f       	add	r30, r30
     caa:	ff 1f       	adc	r31, r31
     cac:	2a 95       	dec	r18
     cae:	e1 f7       	brne	.-8      	; 0xca8 <addPath+0x266>
     cb0:	e8 1b       	sub	r30, r24
     cb2:	f9 0b       	sbc	r31, r25
     cb4:	e9 58       	subi	r30, 0x89	; 137
     cb6:	f9 4f       	sbci	r31, 0xF9	; 249
     cb8:	c7 5c       	subi	r28, 0xC7	; 199
     cba:	de 4f       	sbci	r29, 0xFE	; 254
     cbc:	a8 81       	ld	r26, Y
     cbe:	b9 81       	ldd	r27, Y+1	; 0x01
     cc0:	c9 53       	subi	r28, 0x39	; 57
     cc2:	d1 40       	sbci	r29, 0x01	; 1
     cc4:	4d 91       	ld	r20, X+
     cc6:	5c 91       	ld	r21, X
     cc8:	84 85       	ldd	r24, Z+12	; 0x0c
     cca:	95 85       	ldd	r25, Z+13	; 0x0d
     ccc:	48 0f       	add	r20, r24
     cce:	59 1f       	adc	r21, r25
     cd0:	fb 01       	movw	r30, r22
     cd2:	ee 0f       	add	r30, r30
     cd4:	ff 1f       	adc	r31, r31
     cd6:	e2 0d       	add	r30, r2
     cd8:	f3 1d       	adc	r31, r3
     cda:	80 81       	ld	r24, Z
     cdc:	91 81       	ldd	r25, Z+1	; 0x01
     cde:	48 17       	cp	r20, r24
     ce0:	59 07       	cpc	r21, r25
     ce2:	ac f5       	brge	.+106    	; 0xd4e <addPath+0x30c>
					dist[x] = dist[k] + edgeList[nodes[k].edgeIndices[j]].distance;
					prevNode[x] = k;
					addToList(list, listLen++, ++i, x);
     ce4:	08 94       	sec
     ce6:	e1 1c       	adc	r14, r1
     ce8:	f1 1c       	adc	r15, r1
     cea:	98 01       	movw	r18, r16
     cec:	f8 01       	movw	r30, r16
     cee:	31 97       	sbiw	r30, 0x01	; 1
     cf0:	ee 0f       	add	r30, r30
     cf2:	ff 1f       	adc	r31, r31
     cf4:	e4 0d       	add	r30, r4
     cf6:	f5 1d       	adc	r31, r5
     cf8:	d8 01       	movw	r26, r16
     cfa:	aa 0f       	add	r26, r26
     cfc:	bb 1f       	adc	r27, r27
     cfe:	a4 0d       	add	r26, r4
     d00:	b5 1d       	adc	r27, r5
     d02:	07 c0       	rjmp	.+14     	; 0xd12 <addPath+0x2d0>
}

void addToList(int list[],int listLen,int pos,int el) {
	int i;
	for (i = listLen-1; i >= pos; i--) {
		list[i+1] = list[i];
     d04:	80 81       	ld	r24, Z
     d06:	91 81       	ldd	r25, Z+1	; 0x01
     d08:	11 96       	adiw	r26, 0x01	; 1
     d0a:	9c 93       	st	X, r25
     d0c:	8e 93       	st	-X, r24
     d0e:	32 97       	sbiw	r30, 0x02	; 2
     d10:	12 97       	sbiw	r26, 0x02	; 2
     d12:	21 50       	subi	r18, 0x01	; 1
     d14:	30 40       	sbci	r19, 0x00	; 0
	}
}

void addToList(int list[],int listLen,int pos,int el) {
	int i;
	for (i = listLen-1; i >= pos; i--) {
     d16:	2e 15       	cp	r18, r14
     d18:	3f 05       	cpc	r19, r15
     d1a:	a4 f7       	brge	.-24     	; 0xd04 <addPath+0x2c2>
			for (j = 0; j < nodes[k].edgeCount; j++) {
				if (edgeList[nodes[k].edgeIndices[j]].obstacle == 1)
					continue;
				x = getOtherSide(nodes[k].edgeIndices[j], k);
				if (dist[x] > dist[k] + edgeList[nodes[k].edgeIndices[j]].distance) {
					dist[x] = dist[k] + edgeList[nodes[k].edgeIndices[j]].distance;
     d1c:	fb 01       	movw	r30, r22
     d1e:	ee 0f       	add	r30, r30
     d20:	ff 1f       	adc	r31, r31
     d22:	d1 01       	movw	r26, r2
     d24:	ae 0f       	add	r26, r30
     d26:	bf 1f       	adc	r27, r31
     d28:	4d 93       	st	X+, r20
     d2a:	5c 93       	st	X, r21
					prevNode[x] = k;
     d2c:	21 e0       	ldi	r18, 0x01	; 1
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	2c 0f       	add	r18, r28
     d32:	3d 1f       	adc	r19, r29
     d34:	e2 0f       	add	r30, r18
     d36:	f3 1f       	adc	r31, r19
     d38:	75 86       	std	Z+13, r7	; 0x0d
     d3a:	64 86       	std	Z+12, r6	; 0x0c
					addToList(list, listLen++, ++i, x);
     d3c:	0f 5f       	subi	r16, 0xFF	; 255
     d3e:	1f 4f       	sbci	r17, 0xFF	; 255
void addToList(int list[],int listLen,int pos,int el) {
	int i;
	for (i = listLen-1; i >= pos; i--) {
		list[i+1] = list[i];
	}
	list[pos] = el;
     d40:	f7 01       	movw	r30, r14
     d42:	ee 0f       	add	r30, r30
     d44:	ff 1f       	adc	r31, r31
     d46:	e4 0d       	add	r30, r4
     d48:	f5 1d       	adc	r31, r5
     d4a:	71 83       	std	Z+1, r23	; 0x01
     d4c:	60 83       	st	Z, r22
			}
		}
		for (i = 0; i < listLen; i++) {
			k = list[i];
			removeFromList(list, listLen--, i--);
			for (j = 0; j < nodes[k].edgeCount; j++) {
     d4e:	08 94       	sec
     d50:	a1 1c       	adc	r10, r1
     d52:	b1 1c       	adc	r11, r1
     d54:	42 e0       	ldi	r20, 0x02	; 2
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	c4 0e       	add	r12, r20
     d5a:	d5 1e       	adc	r13, r21
     d5c:	c9 5c       	subi	r28, 0xC9	; 201
     d5e:	de 4f       	sbci	r29, 0xFE	; 254
     d60:	88 81       	ld	r24, Y
     d62:	99 81       	ldd	r25, Y+1	; 0x01
     d64:	c7 53       	subi	r28, 0x37	; 55
     d66:	d1 40       	sbci	r29, 0x01	; 1
     d68:	a8 16       	cp	r10, r24
     d6a:	b9 06       	cpc	r11, r25
     d6c:	0c f4       	brge	.+2      	; 0xd70 <addPath+0x32e>
     d6e:	61 cf       	rjmp	.-318    	; 0xc32 <addPath+0x1f0>
					if (dist[list[j]] >= dist[dests[i]])
						removeFromList(list, listLen--, j);
				}
			}
		}
		for (i = 0; i < listLen; i++) {
     d70:	a7 01       	movw	r20, r14
     d72:	4f 5f       	subi	r20, 0xFF	; 255
     d74:	5f 4f       	sbci	r21, 0xFF	; 255
     d76:	40 17       	cp	r20, r16
     d78:	51 07       	cpc	r21, r17
     d7a:	0c f4       	brge	.+2      	; 0xd7e <addPath+0x33c>
     d7c:	14 cf       	rjmp	.-472    	; 0xba6 <addPath+0x164>
		prevNode[i] = -1;
	for (i = 0; i < 49; i++)
		dist[i] = 32767;
	addToList(list, listLen++, 0, src);
	dist[src] = 0;
	while (listLen > 0) {
     d7e:	10 16       	cp	r1, r16
     d80:	11 06       	cpc	r1, r17
     d82:	84 f0       	brlt	.+32     	; 0xda4 <addPath+0x362>
     d84:	a3 e0       	ldi	r26, 0x03	; 3
     d86:	ea 2e       	mov	r14, r26
     d88:	f1 2c       	mov	r15, r1
     d8a:	ec 0e       	add	r14, r28
     d8c:	fd 1e       	adc	r15, r29
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	cc 24       	eor	r12, r12
     d94:	dd 24       	eor	r13, r13
     d96:	8e 01       	movw	r16, r28
     d98:	0f 5f       	subi	r16, 0xFF	; 255
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
     d9c:	ae 01       	movw	r20, r28
     d9e:	41 59       	subi	r20, 0x91	; 145
     da0:	5f 4f       	sbci	r21, 0xFF	; 255
     da2:	2b c0       	rjmp	.+86     	; 0xdfa <addPath+0x3b8>
     da4:	5e 01       	movw	r10, r28
     da6:	08 94       	sec
     da8:	a1 1c       	adc	r10, r1
     daa:	b1 1c       	adc	r11, r1
     dac:	fd e0       	ldi	r31, 0x0D	; 13
     dae:	cf 2e       	mov	r12, r31
     db0:	d1 2c       	mov	r13, r1
     db2:	cc 0e       	add	r12, r28
     db4:	dd 1e       	adc	r13, r29
     db6:	ee 24       	eor	r14, r14
     db8:	ff 24       	eor	r15, r15
     dba:	e8 ce       	rjmp	.-560    	; 0xb8c <addPath+0x14a>
				}
			}
		}
	}
	for (x = 0, i = 1; i < destsCount; i++) {
		if (dist[dests[i]] < dist[dests[x]])
     dbc:	f7 01       	movw	r30, r14
     dbe:	a0 81       	ld	r26, Z
     dc0:	b1 81       	ldd	r27, Z+1	; 0x01
     dc2:	aa 0f       	add	r26, r26
     dc4:	bb 1f       	adc	r27, r27
     dc6:	a4 0f       	add	r26, r20
     dc8:	b5 1f       	adc	r27, r21
     dca:	20 0f       	add	r18, r16
     dcc:	31 1f       	adc	r19, r17
     dce:	f9 01       	movw	r30, r18
     dd0:	80 81       	ld	r24, Z
     dd2:	91 81       	ldd	r25, Z+1	; 0x01
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	84 0f       	add	r24, r20
     dda:	95 1f       	adc	r25, r21
     ddc:	2d 91       	ld	r18, X+
     dde:	3c 91       	ld	r19, X
     de0:	dc 01       	movw	r26, r24
     de2:	8d 91       	ld	r24, X+
     de4:	9c 91       	ld	r25, X
     de6:	28 17       	cp	r18, r24
     de8:	39 07       	cpc	r19, r25
     dea:	0c f4       	brge	.+2      	; 0xdee <addPath+0x3ac>
     dec:	6b 01       	movw	r12, r22
					addToList(list, listLen++, ++i, x);
				}
			}
		}
	}
	for (x = 0, i = 1; i < destsCount; i++) {
     dee:	6f 5f       	subi	r22, 0xFF	; 255
     df0:	7f 4f       	sbci	r23, 0xFF	; 255
     df2:	e2 e0       	ldi	r30, 0x02	; 2
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	ee 0e       	add	r14, r30
     df8:	ff 1e       	adc	r15, r31
     dfa:	96 01       	movw	r18, r12
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	cb 5c       	subi	r28, 0xCB	; 203
     e02:	de 4f       	sbci	r29, 0xFE	; 254
     e04:	88 81       	ld	r24, Y
     e06:	99 81       	ldd	r25, Y+1	; 0x01
     e08:	c5 53       	subi	r28, 0x35	; 53
     e0a:	d1 40       	sbci	r29, 0x01	; 1
     e0c:	68 17       	cp	r22, r24
     e0e:	79 07       	cpc	r23, r25
     e10:	ac f2       	brlt	.-86     	; 0xdbc <addPath+0x37a>
		if (dist[dests[i]] < dist[dests[x]])
			x = i;
	}
	bot[pos].nextNode = dests[x];
     e12:	02 0f       	add	r16, r18
     e14:	13 1f       	adc	r17, r19
     e16:	d8 01       	movw	r26, r16
     e18:	2d 91       	ld	r18, X+
     e1a:	3c 91       	ld	r19, X
     e1c:	f4 01       	movw	r30, r8
     e1e:	31 83       	std	Z+1, r19	; 0x01
     e20:	20 83       	st	Z, r18
	bot[pos].distance = dist[dests[x]];
     e22:	c9 01       	movw	r24, r18
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	48 0f       	add	r20, r24
     e2a:	59 1f       	adc	r21, r25
     e2c:	da 01       	movw	r26, r20
     e2e:	8d 91       	ld	r24, X+
     e30:	9c 91       	ld	r25, X
     e32:	95 83       	std	Z+5, r25	; 0x05
     e34:	84 83       	std	Z+4, r24	; 0x04
	for (i = dests[x], bot[pos].subPathCount = 0; prevNode[i] != -1; i = prevNode[i])
     e36:	ea 5a       	subi	r30, 0xAA	; 170
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	11 82       	std	Z+1, r1	; 0x01
     e3c:	10 82       	st	Z, r1
     e3e:	be 01       	movw	r22, r28
     e40:	6f 5f       	subi	r22, 0xFF	; 255
     e42:	7f 4f       	sbci	r23, 0xFF	; 255
		bot[pos].subPath[bot[pos].subPathCount++] = i;
     e44:	df 01       	movw	r26, r30
     e46:	0f c0       	rjmp	.+30     	; 0xe66 <addPath+0x424>
     e48:	8d 91       	ld	r24, X+
     e4a:	9c 91       	ld	r25, X
     e4c:	11 97       	sbiw	r26, 0x01	; 1
     e4e:	fc 01       	movw	r30, r24
     e50:	ee 0f       	add	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	e8 0d       	add	r30, r8
     e56:	f9 1d       	adc	r31, r9
     e58:	37 83       	std	Z+7, r19	; 0x07
     e5a:	26 83       	std	Z+6, r18	; 0x06
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	11 96       	adiw	r26, 0x01	; 1
     e60:	9c 93       	st	X, r25
     e62:	8e 93       	st	-X, r24
     e64:	9a 01       	movw	r18, r20
		if (dist[dests[i]] < dist[dests[x]])
			x = i;
	}
	bot[pos].nextNode = dests[x];
	bot[pos].distance = dist[dests[x]];
	for (i = dests[x], bot[pos].subPathCount = 0; prevNode[i] != -1; i = prevNode[i])
     e66:	f9 01       	movw	r30, r18
     e68:	ee 0f       	add	r30, r30
     e6a:	ff 1f       	adc	r31, r31
     e6c:	e6 0f       	add	r30, r22
     e6e:	f7 1f       	adc	r31, r23
     e70:	44 85       	ldd	r20, Z+12	; 0x0c
     e72:	55 85       	ldd	r21, Z+13	; 0x0d
     e74:	ef ef       	ldi	r30, 0xFF	; 255
     e76:	4f 3f       	cpi	r20, 0xFF	; 255
     e78:	5e 07       	cpc	r21, r30
     e7a:	31 f7       	brne	.-52     	; 0xe48 <addPath+0x406>
		bot[pos].subPath[bot[pos].subPathCount++] = i;
     e7c:	c6 5c       	subi	r28, 0xC6	; 198
     e7e:	de 4f       	sbci	r29, 0xFE	; 254
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	9f 90       	pop	r9
     ea0:	8f 90       	pop	r8
     ea2:	7f 90       	pop	r7
     ea4:	6f 90       	pop	r6
     ea6:	5f 90       	pop	r5
     ea8:	4f 90       	pop	r4
     eaa:	3f 90       	pop	r3
     eac:	2f 90       	pop	r2
     eae:	08 95       	ret

00000eb0 <ADC_Conversion>:
* Logic:			Converting the analog Readings to Digital values
* Example Call:		ADC_Conversion(3)
*/

unsigned char ADC_Conversion(unsigned char ch)
{
     eb0:	98 2f       	mov	r25, r24
	unsigned char a;
	if(ch>7)
     eb2:	88 30       	cpi	r24, 0x08	; 8
     eb4:	18 f0       	brcs	.+6      	; 0xebc <ADC_Conversion+0xc>
	{
		ADCSRB=0x08;
     eb6:	88 e0       	ldi	r24, 0x08	; 8
     eb8:	80 93 7b 00 	sts	0x007B, r24
	}
	ch=ch & 0x07;
	ADMUX=0x20 | ch;
     ebc:	97 70       	andi	r25, 0x07	; 7
     ebe:	90 62       	ori	r25, 0x20	; 32
     ec0:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA =ADCSRA | 0x40;		//set start conv bit
     ec4:	80 91 7a 00 	lds	r24, 0x007A
     ec8:	80 64       	ori	r24, 0x40	; 64
     eca:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA & 0x10)==0);	//wait for adc conv to complete
     ece:	80 91 7a 00 	lds	r24, 0x007A
     ed2:	84 ff       	sbrs	r24, 4
     ed4:	fc cf       	rjmp	.-8      	; 0xece <ADC_Conversion+0x1e>
	a=ADCH;						//Result stored here after convo
     ed6:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA=ADCSRA | 0x10;		//Clear ADIF by setting it to 1
     eda:	90 91 7a 00 	lds	r25, 0x007A
     ede:	90 61       	ori	r25, 0x10	; 16
     ee0:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB=0x00;
     ee4:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     ee8:	08 95       	ret

00000eea <print_sensor>:
* Logic:			Converting the analog Readings to Digital values and printing them on LCD
* Example Call:		print_sensor(1,1,3);
*/

void print_sensor(char row,char col,unsigned char channel)
{
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	18 2f       	mov	r17, r24
     ef0:	06 2f       	mov	r16, r22
     ef2:	84 2f       	mov	r24, r20
	ADC_Value=ADC_Conversion(channel);
     ef4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <ADC_Conversion>
     ef8:	48 2f       	mov	r20, r24
     efa:	80 93 eb 09 	sts	0x09EB, r24
	lcd_print(row,col,ADC_Value,3);
     efe:	81 2f       	mov	r24, r17
     f00:	60 2f       	mov	r22, r16
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	23 e0       	ldi	r18, 0x03	; 3
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	08 95       	ret

00000f12 <initBotDevices>:
volatile unsigned long int ShaftCountLeft = 0, ShaftCountRight = 0;
volatile unsigned int Degrees; 
void initBotDevices() {
	cli();
     f12:	f8 94       	cli
	DDRA = DDRA | 0x0F;
     f14:	81 b1       	in	r24, 0x01	; 1
     f16:	8f 60       	ori	r24, 0x0F	; 15
     f18:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
     f1a:	82 b1       	in	r24, 0x02	; 2
     f1c:	80 7f       	andi	r24, 0xF0	; 240
     f1e:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;
     f20:	ea e0       	ldi	r30, 0x0A	; 10
     f22:	f1 e0       	ldi	r31, 0x01	; 1
     f24:	80 81       	ld	r24, Z
     f26:	88 61       	ori	r24, 0x18	; 24
     f28:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18;
     f2a:	eb e0       	ldi	r30, 0x0B	; 11
     f2c:	f1 e0       	ldi	r31, 0x01	; 1
     f2e:	80 81       	ld	r24, Z
     f30:	88 61       	ori	r24, 0x18	; 24
     f32:	80 83       	st	Z, r24
	DDRE  = DDRE & 0xEF;
     f34:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10;
     f36:	74 9a       	sbi	0x0e, 4	; 14
	DDRE  = DDRE & 0xDF;
     f38:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20;
     f3a:	75 9a       	sbi	0x0e, 5	; 14
	DDRC=DDRC | 0x08;
     f3c:	3b 9a       	sbi	0x07, 3	; 7
	PORTC=PORTC & 0xF7;
     f3e:	43 98       	cbi	0x08, 3	; 8
	DDRC = DDRC | 0xF7;
     f40:	87 b1       	in	r24, 0x07	; 7
     f42:	87 6f       	ori	r24, 0xF7	; 247
     f44:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80;
     f46:	88 b1       	in	r24, 0x08	; 8
     f48:	80 78       	andi	r24, 0x80	; 128
     f4a:	88 b9       	out	0x08, r24	; 8
	DDRF=0x00;
     f4c:	10 ba       	out	0x10, r1	; 16
	PORTF=0x00;
     f4e:	11 ba       	out	0x11, r1	; 17
	DDRK=0x00;
     f50:	10 92 07 01 	sts	0x0107, r1
	PORTK=0x00;
     f54:	10 92 08 01 	sts	0x0108, r1
	TCCR5B = 0x00;
     f58:	a1 e2       	ldi	r26, 0x21	; 33
     f5a:	b1 e0       	ldi	r27, 0x01	; 1
     f5c:	1c 92       	st	X, r1
	TCNT5H = 0xFF;
     f5e:	2f ef       	ldi	r18, 0xFF	; 255
     f60:	20 93 25 01 	sts	0x0125, r18
	TCNT5L = 0x01;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;
     f6a:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;
     f6e:	20 93 28 01 	sts	0x0128, r18
	OCR5BH = 0x00;
     f72:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;
     f76:	20 93 2a 01 	sts	0x012A, r18
	OCR5C  = 0xFF;
     f7a:	ec e2       	ldi	r30, 0x2C	; 44
     f7c:	f1 e0       	ldi	r31, 0x01	; 1
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	91 83       	std	Z+1, r25	; 0x01
     f84:	80 83       	st	Z, r24
	OCR5CH = 0x00;
     f86:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;
     f8a:	20 83       	st	Z, r18
	TCCR5A = 0xA9;
     f8c:	89 ea       	ldi	r24, 0xA9	; 169
     f8e:	80 93 20 01 	sts	0x0120, r24
	TCCR5B = 0x0B;
     f92:	8b e0       	ldi	r24, 0x0B	; 11
     f94:	8c 93       	st	X, r24
	cli();
     f96:	f8 94       	cli
	EICRB = EICRB | 0x02;
     f98:	ea e6       	ldi	r30, 0x6A	; 106
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	82 60       	ori	r24, 0x02	; 2
     fa0:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10;
     fa2:	ec 9a       	sbi	0x1d, 4	; 29
	sei();
     fa4:	78 94       	sei
	cli();
     fa6:	f8 94       	cli
	EICRB = EICRB | 0x08;
     fa8:	ea e6       	ldi	r30, 0x6A	; 106
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	88 60       	ori	r24, 0x08	; 8
     fb0:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20;
     fb2:	ed 9a       	sbi	0x1d, 5	; 29
	sei();
     fb4:	78 94       	sei
	ADCSRA=0x00;
     fb6:	ea e7       	ldi	r30, 0x7A	; 122
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	10 82       	st	Z, r1
	ADCSRB=0x00;
     fbc:	10 92 7b 00 	sts	0x007B, r1
	ADMUX=0x00;
     fc0:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA=0x86;
     fc4:	86 e8       	ldi	r24, 0x86	; 134
     fc6:	80 83       	st	Z, r24
	ACSR=0x80;
     fc8:	80 e8       	ldi	r24, 0x80	; 128
     fca:	80 bf       	out	0x30, r24	; 48
	sei();
     fcc:	78 94       	sei
}
     fce:	08 95       	ret

00000fd0 <buzzerOn>:

// BUZZER OPERATIONS: pin 3 to high/low 0000 1000 / 0000 0000

void buzzerOn() { PORTC = 0x08; }
     fd0:	88 e0       	ldi	r24, 0x08	; 8
     fd2:	88 b9       	out	0x08, r24	; 8
     fd4:	08 95       	ret

00000fd6 <buzzerOff>:
void buzzerOff() { PORTC = 0x00; }
     fd6:	18 b8       	out	0x08, r1	; 8
     fd8:	08 95       	ret

00000fda <motionSet>:
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
     fda:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     fdc:	90 7f       	andi	r25, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     fde:	8f 70       	andi	r24, 0x0F	; 15
     fe0:	89 2b       	or	r24, r25
	PORTA = PortARestore; 		// executing the command
     fe2:	82 b9       	out	0x02, r24	; 2
}
     fe4:	08 95       	ret

00000fe6 <moveForward>:
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
     fe6:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     fe8:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     fea:	86 60       	ori	r24, 0x06	; 6
	PORTA = PortARestore; 		// executing the command
     fec:	82 b9       	out	0x02, r24	; 2
}

void moveForward() { motionSet(0x06); } // both wheels forward
     fee:	08 95       	ret

00000ff0 <moveBackward>:
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
     ff0:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     ff2:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ff4:	89 60       	ori	r24, 0x09	; 9
	PORTA = PortARestore; 		// executing the command
     ff6:	82 b9       	out	0x02, r24	; 2
}

void moveForward() { motionSet(0x06); } // both wheels forward
void moveBackward() { motionSet(0x09); } // both wheels backward
     ff8:	08 95       	ret

00000ffa <moveLeft>:
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
     ffa:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     ffc:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ffe:	85 60       	ori	r24, 0x05	; 5
	PORTA = PortARestore; 		// executing the command
    1000:	82 b9       	out	0x02, r24	; 2
}

void moveForward() { motionSet(0x06); } // both wheels forward
void moveBackward() { motionSet(0x09); } // both wheels backward
void moveLeft() { motionSet(0x05); } // left wheel backward and right wheel forward
    1002:	08 95       	ret

00001004 <moveRight>:
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    1004:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1006:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1008:	8a 60       	ori	r24, 0x0A	; 10
	PORTA = PortARestore; 		// executing the command
    100a:	82 b9       	out	0x02, r24	; 2
}

void moveForward() { motionSet(0x06); } // both wheels forward
void moveBackward() { motionSet(0x09); } // both wheels backward
void moveLeft() { motionSet(0x05); } // left wheel backward and right wheel forward
void moveRight() { motionSet(0x0A); } // right wheel backward and left wheel forward
    100c:	08 95       	ret

0000100e <moveLeftSoft>:
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    100e:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1010:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1012:	84 60       	ori	r24, 0x04	; 4
	PORTA = PortARestore; 		// executing the command
    1014:	82 b9       	out	0x02, r24	; 2

void moveForward() { motionSet(0x06); } // both wheels forward
void moveBackward() { motionSet(0x09); } // both wheels backward
void moveLeft() { motionSet(0x05); } // left wheel backward and right wheel forward
void moveRight() { motionSet(0x0A); } // right wheel backward and left wheel forward
void moveLeftSoft() { motionSet(0x04); } // left wheel stop and right wheel forward
    1016:	08 95       	ret

00001018 <moveRightSoft>:
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    1018:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    101a:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    101c:	82 60       	ori	r24, 0x02	; 2
	PORTA = PortARestore; 		// executing the command
    101e:	82 b9       	out	0x02, r24	; 2
void moveForward() { motionSet(0x06); } // both wheels forward
void moveBackward() { motionSet(0x09); } // both wheels backward
void moveLeft() { motionSet(0x05); } // left wheel backward and right wheel forward
void moveRight() { motionSet(0x0A); } // right wheel backward and left wheel forward
void moveLeftSoft() { motionSet(0x04); } // left wheel stop and right wheel forward
void moveRightSoft() { motionSet(0x02); } // right wheel stop and left wheel forward
    1020:	08 95       	ret

00001022 <stop>:
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    1022:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1024:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore; 		// executing the command
    1026:	82 b9       	out	0x02, r24	; 2
void moveBackward() { motionSet(0x09); } // both wheels backward
void moveLeft() { motionSet(0x05); } // left wheel backward and right wheel forward
void moveRight() { motionSet(0x0A); } // right wheel backward and left wheel forward
void moveLeftSoft() { motionSet(0x04); } // left wheel stop and right wheel forward
void moveRightSoft() { motionSet(0x02); } // right wheel stop and left wheel forward
void stop() { motionSet(0x00); } // stop both wheels
    1028:	08 95       	ret

0000102a <velocityChange>:
void velocityChange (unsigned char left, unsigned char right) { OCR5AL = (unsigned char) left; OCR5BL = (unsigned char) right; } // Set PWM Velocity
    102a:	80 93 28 01 	sts	0x0128, r24
    102e:	60 93 2a 01 	sts	0x012A, r22
    1032:	08 95       	ret

00001034 <rotateAngles>:
void rotateAngles(int degrees) {
    1034:	ef 92       	push	r14
    1036:	ff 92       	push	r15
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	9c 01       	movw	r18, r24
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	if (degrees >= 0) {
    103e:	97 fd       	sbrc	r25, 7
    1040:	05 c0       	rjmp	.+10     	; 0x104c <rotateAngles+0x18>
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    1042:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1044:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1046:	8a 60       	ori	r24, 0x0A	; 10
	PORTA = PortARestore; 		// executing the command
    1048:	82 b9       	out	0x02, r24	; 2
    104a:	07 c0       	rjmp	.+14     	; 0x105a <rotateAngles+0x26>
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    104c:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    104e:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1050:	85 60       	ori	r24, 0x05	; 5
	PORTA = PortARestore; 		// executing the command
    1052:	82 b9       	out	0x02, r24	; 2
	unsigned long int ReqdShaftCountInt = 0;
	if (degrees >= 0) {
		moveRight();
	} else {
		moveLeft();
		degrees = -degrees;
    1054:	30 95       	com	r19
    1056:	21 95       	neg	r18
    1058:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	ReqdShaftCount = (float) degrees/ 4.090; // division by resolution to get shaft count
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    105a:	b9 01       	movw	r22, r18
    105c:	88 27       	eor	r24, r24
    105e:	77 fd       	sbrc	r23, 7
    1060:	80 95       	com	r24
    1062:	98 2f       	mov	r25, r24
    1064:	0e 94 1f 13 	call	0x263e	; 0x263e <__floatsisf>
    1068:	28 e4       	ldi	r18, 0x48	; 72
    106a:	31 ee       	ldi	r19, 0xE1	; 225
    106c:	42 e8       	ldi	r20, 0x82	; 130
    106e:	50 e4       	ldi	r21, 0x40	; 64
    1070:	0e 94 84 12 	call	0x2508	; 0x2508 <__divsf3>
    1074:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__fixunssfsi>
    1078:	7b 01       	movw	r14, r22
    107a:	8c 01       	movw	r16, r24
	ShaftCountLeft = ShaftCountRight = 0;
    107c:	10 92 65 06 	sts	0x0665, r1
    1080:	10 92 66 06 	sts	0x0666, r1
    1084:	10 92 67 06 	sts	0x0667, r1
    1088:	10 92 68 06 	sts	0x0668, r1
    108c:	80 91 65 06 	lds	r24, 0x0665
    1090:	90 91 66 06 	lds	r25, 0x0666
    1094:	a0 91 67 06 	lds	r26, 0x0667
    1098:	b0 91 68 06 	lds	r27, 0x0668
    109c:	80 93 61 06 	sts	0x0661, r24
    10a0:	90 93 62 06 	sts	0x0662, r25
    10a4:	a0 93 63 06 	sts	0x0663, r26
    10a8:	b0 93 64 06 	sts	0x0664, r27
    10ac:	1e c0       	rjmp	.+60     	; 0x10ea <rotateAngles+0xb6>
	while ((ShaftCountRight <= ReqdShaftCountInt) && (ShaftCountLeft <= ReqdShaftCountInt))
	{
		lcd_print(1,1,ShaftCountRight,3);
    10ae:	20 91 65 06 	lds	r18, 0x0665
    10b2:	30 91 66 06 	lds	r19, 0x0666
    10b6:	40 91 67 06 	lds	r20, 0x0667
    10ba:	50 91 68 06 	lds	r21, 0x0668
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	61 e0       	ldi	r22, 0x01	; 1
    10c2:	a9 01       	movw	r20, r18
    10c4:	23 e0       	ldi	r18, 0x03	; 3
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
		lcd_print(2,1,ShaftCountLeft,3);
    10cc:	20 91 61 06 	lds	r18, 0x0661
    10d0:	30 91 62 06 	lds	r19, 0x0662
    10d4:	40 91 63 06 	lds	r20, 0x0663
    10d8:	50 91 64 06 	lds	r21, 0x0664
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	61 e0       	ldi	r22, 0x01	; 1
    10e0:	a9 01       	movw	r20, r18
    10e2:	23 e0       	ldi	r18, 0x03	; 3
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
		degrees = -degrees;
	}
	ReqdShaftCount = (float) degrees/ 4.090; // division by resolution to get shaft count
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
	ShaftCountLeft = ShaftCountRight = 0;
	while ((ShaftCountRight <= ReqdShaftCountInt) && (ShaftCountLeft <= ReqdShaftCountInt))
    10ea:	80 91 65 06 	lds	r24, 0x0665
    10ee:	90 91 66 06 	lds	r25, 0x0666
    10f2:	a0 91 67 06 	lds	r26, 0x0667
    10f6:	b0 91 68 06 	lds	r27, 0x0668
    10fa:	e8 16       	cp	r14, r24
    10fc:	f9 06       	cpc	r15, r25
    10fe:	0a 07       	cpc	r16, r26
    1100:	1b 07       	cpc	r17, r27
    1102:	68 f0       	brcs	.+26     	; 0x111e <rotateAngles+0xea>
    1104:	80 91 61 06 	lds	r24, 0x0661
    1108:	90 91 62 06 	lds	r25, 0x0662
    110c:	a0 91 63 06 	lds	r26, 0x0663
    1110:	b0 91 64 06 	lds	r27, 0x0664
    1114:	e8 16       	cp	r14, r24
    1116:	f9 06       	cpc	r15, r25
    1118:	0a 07       	cpc	r16, r26
    111a:	1b 07       	cpc	r17, r27
    111c:	40 f6       	brcc	.-112    	; 0x10ae <rotateAngles+0x7a>
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    111e:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1120:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore; 		// executing the command
    1122:	82 b9       	out	0x02, r24	; 2
	{
		lcd_print(1,1,ShaftCountRight,3);
		lcd_print(2,1,ShaftCountLeft,3);
	}
	stop();
}
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	ff 90       	pop	r15
    112a:	ef 90       	pop	r14
    112c:	08 95       	ret

0000112e <__vector_6>:

// ENCODER OPERATIONS

ISR(INT5_vect) { ShaftCountLeft++;}
    112e:	1f 92       	push	r1
    1130:	0f 92       	push	r0
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	0f 92       	push	r0
    1136:	11 24       	eor	r1, r1
    1138:	8f 93       	push	r24
    113a:	9f 93       	push	r25
    113c:	af 93       	push	r26
    113e:	bf 93       	push	r27
    1140:	80 91 61 06 	lds	r24, 0x0661
    1144:	90 91 62 06 	lds	r25, 0x0662
    1148:	a0 91 63 06 	lds	r26, 0x0663
    114c:	b0 91 64 06 	lds	r27, 0x0664
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	a1 1d       	adc	r26, r1
    1154:	b1 1d       	adc	r27, r1
    1156:	80 93 61 06 	sts	0x0661, r24
    115a:	90 93 62 06 	sts	0x0662, r25
    115e:	a0 93 63 06 	sts	0x0663, r26
    1162:	b0 93 64 06 	sts	0x0664, r27
    1166:	bf 91       	pop	r27
    1168:	af 91       	pop	r26
    116a:	9f 91       	pop	r25
    116c:	8f 91       	pop	r24
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	0f 90       	pop	r0
    1174:	1f 90       	pop	r1
    1176:	18 95       	reti

00001178 <__vector_5>:
ISR(INT4_vect) { ShaftCountRight++;}
    1178:	1f 92       	push	r1
    117a:	0f 92       	push	r0
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	0f 92       	push	r0
    1180:	11 24       	eor	r1, r1
    1182:	8f 93       	push	r24
    1184:	9f 93       	push	r25
    1186:	af 93       	push	r26
    1188:	bf 93       	push	r27
    118a:	80 91 65 06 	lds	r24, 0x0665
    118e:	90 91 66 06 	lds	r25, 0x0666
    1192:	a0 91 67 06 	lds	r26, 0x0667
    1196:	b0 91 68 06 	lds	r27, 0x0668
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	a1 1d       	adc	r26, r1
    119e:	b1 1d       	adc	r27, r1
    11a0:	80 93 65 06 	sts	0x0665, r24
    11a4:	90 93 66 06 	sts	0x0666, r25
    11a8:	a0 93 67 06 	sts	0x0667, r26
    11ac:	b0 93 68 06 	sts	0x0668, r27
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	9f 91       	pop	r25
    11b6:	8f 91       	pop	r24
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	0f 90       	pop	r0
    11be:	1f 90       	pop	r1
    11c0:	18 95       	reti

000011c2 <obstacleDetect>:
	stop();
}

int obstacleDetect() {
	return 0;
}
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	08 95       	ret

000011c8 <setObstacle>:

void setObstacle(int from, int to) {
	//
}
    11c8:	08 95       	ret

000011ca <playNote>:
	//sleep(1);
}

void playNote(char driver) {
	// sleep(1);
}
    11ca:	08 95       	ret

000011cc <main>:
			while (botBstat.ready != 1 && botAstat.ready != 2);
			while (!completePathB('B', str));
		}
		return 0;
	}*/
	initBotDevices();
    11cc:	0e 94 89 07 	call	0xf12	; 0xf12 <initBotDevices>
	lcd_init();
    11d0:	0e 94 29 01 	call	0x252	; 0x252 <lcd_init>
	//lcd_set_4bit();
	lcd_print(2,5,121,3);
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	65 e0       	ldi	r22, 0x05	; 5
    11d8:	49 e7       	ldi	r20, 0x79	; 121
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	23 e0       	ldi	r18, 0x03	; 3
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	//startBot('A');
	//_delay_ms(1000);
	//stopBot("reason",'A');
	rotateAngles(-90);
    11e4:	86 ea       	ldi	r24, 0xA6	; 166
    11e6:	9f ef       	ldi	r25, 0xFF	; 255
    11e8:	0e 94 1a 08 	call	0x1034	; 0x1034 <rotateAngles>
    11ec:	80 e1       	ldi	r24, 0x10	; 16
    11ee:	97 e2       	ldi	r25, 0x27	; 39
    11f0:	20 e7       	ldi	r18, 0x70	; 112
    11f2:	31 e0       	ldi	r19, 0x01	; 1
    11f4:	f9 01       	movw	r30, r18
    11f6:	31 97       	sbiw	r30, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fc:	d9 f7       	brne	.-10     	; 0x11f4 <main+0x28>
	_delay_ms(1000);
	rotateAngles(-30);
    11fe:	82 ee       	ldi	r24, 0xE2	; 226
    1200:	9f ef       	ldi	r25, 0xFF	; 255
    1202:	0e 94 1a 08 	call	0x1034	; 0x1034 <rotateAngles>
    1206:	80 e1       	ldi	r24, 0x10	; 16
    1208:	97 e2       	ldi	r25, 0x27	; 39
    120a:	20 e7       	ldi	r18, 0x70	; 112
    120c:	31 e0       	ldi	r19, 0x01	; 1
    120e:	f9 01       	movw	r30, r18
    1210:	31 97       	sbiw	r30, 0x01	; 1
    1212:	f1 f7       	brne	.-4      	; 0x1210 <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1214:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1216:	d9 f7       	brne	.-10     	; 0x120e <main+0x42>
	_delay_ms(1000);
	rotateAngles(-360);
    1218:	88 e9       	ldi	r24, 0x98	; 152
    121a:	9e ef       	ldi	r25, 0xFE	; 254
    121c:	0e 94 1a 08 	call	0x1034	; 0x1034 <rotateAngles>
    1220:	80 e1       	ldi	r24, 0x10	; 16
    1222:	97 e2       	ldi	r25, 0x27	; 39
    1224:	20 e7       	ldi	r18, 0x70	; 112
    1226:	31 e0       	ldi	r19, 0x01	; 1
    1228:	f9 01       	movw	r30, r18
    122a:	31 97       	sbiw	r30, 0x01	; 1
    122c:	f1 f7       	brne	.-4      	; 0x122a <main+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1230:	d9 f7       	brne	.-10     	; 0x1228 <main+0x5c>
	_delay_ms(1000);
	rotateAngles(+60);
    1232:	8c e3       	ldi	r24, 0x3C	; 60
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 1a 08 	call	0x1034	; 0x1034 <rotateAngles>
    123a:	80 e1       	ldi	r24, 0x10	; 16
    123c:	97 e2       	ldi	r25, 0x27	; 39
    123e:	20 e7       	ldi	r18, 0x70	; 112
    1240:	31 e0       	ldi	r19, 0x01	; 1
    1242:	f9 01       	movw	r30, r18
    1244:	31 97       	sbiw	r30, 0x01	; 1
    1246:	f1 f7       	brne	.-4      	; 0x1244 <main+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1248:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124a:	d9 f7       	brne	.-10     	; 0x1242 <main+0x76>
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    124c:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    124e:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore; 		// executing the command
    1250:	82 b9       	out	0x02, r24	; 2
	_delay_ms(1000);
	stop();
}
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	08 95       	ret

00001258 <goFromTo>:

void setObstacle(int from, int to) {
	//
}

void goFromTo(int from, int to, char driver) {
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	8b 01       	movw	r16, r22
	printf("%c Going from %d to %d\n", driver, from, to);
    125e:	2d b7       	in	r18, 0x3d	; 61
    1260:	3e b7       	in	r19, 0x3e	; 62
    1262:	28 50       	subi	r18, 0x08	; 8
    1264:	30 40       	sbci	r19, 0x00	; 0
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	3e bf       	out	0x3e, r19	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	2d bf       	out	0x3d, r18	; 61
    1270:	ed b7       	in	r30, 0x3d	; 61
    1272:	fe b7       	in	r31, 0x3e	; 62
    1274:	31 96       	adiw	r30, 0x01	; 1
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	32 e0       	ldi	r19, 0x02	; 2
    127a:	ad b7       	in	r26, 0x3d	; 61
    127c:	be b7       	in	r27, 0x3e	; 62
    127e:	12 96       	adiw	r26, 0x02	; 2
    1280:	3c 93       	st	X, r19
    1282:	2e 93       	st	-X, r18
    1284:	11 97       	sbiw	r26, 0x01	; 1
    1286:	42 83       	std	Z+2, r20	; 0x02
    1288:	13 82       	std	Z+3, r1	; 0x03
    128a:	95 83       	std	Z+5, r25	; 0x05
    128c:	84 83       	std	Z+4, r24	; 0x04
    128e:	77 83       	std	Z+7, r23	; 0x07
    1290:	66 83       	std	Z+6, r22	; 0x06
    1292:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
	botAstat.node = to;
    1296:	10 93 f7 09 	sts	0x09F7, r17
    129a:	00 93 f6 09 	sts	0x09F6, r16
    129e:	2d b7       	in	r18, 0x3d	; 61
    12a0:	3e b7       	in	r19, 0x3e	; 62
    12a2:	28 5f       	subi	r18, 0xF8	; 248
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	3e bf       	out	0x3e, r19	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	2d bf       	out	0x3d, r18	; 61
	//sleep(1);
}
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <stopBot>:
	moveForward();
//	sleep(1);
}

void stopBot(char reason[], char driver) {
	printf("%c Bot stopped, reason: %s\n", driver, reason);
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <stopBot+0x2>
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <stopBot+0x4>
    12ba:	ed b7       	in	r30, 0x3d	; 61
    12bc:	fe b7       	in	r31, 0x3e	; 62
    12be:	31 96       	adiw	r30, 0x01	; 1
    12c0:	28 e1       	ldi	r18, 0x18	; 24
    12c2:	32 e0       	ldi	r19, 0x02	; 2
    12c4:	ad b7       	in	r26, 0x3d	; 61
    12c6:	be b7       	in	r27, 0x3e	; 62
    12c8:	12 96       	adiw	r26, 0x02	; 2
    12ca:	3c 93       	st	X, r19
    12cc:	2e 93       	st	-X, r18
    12ce:	11 97       	sbiw	r26, 0x01	; 1
    12d0:	62 83       	std	Z+2, r22	; 0x02
    12d2:	13 82       	std	Z+3, r1	; 0x03
    12d4:	95 83       	std	Z+5, r25	; 0x05
    12d6:	84 83       	std	Z+4, r24	; 0x04
    12d8:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    12dc:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12de:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore; 		// executing the command
    12e0:	82 b9       	out	0x02, r24	; 2
    12e2:	8d b7       	in	r24, 0x3d	; 61
    12e4:	9e b7       	in	r25, 0x3e	; 62
    12e6:	06 96       	adiw	r24, 0x06	; 6
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	9e bf       	out	0x3e, r25	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	8d bf       	out	0x3d, r24	; 61
	stop();
}
    12f2:	08 95       	ret

000012f4 <startBot>:
#include "botVariables.h"
#include "botPrints.h"
#include "botFunctionsHelper.h"

void startBot(char driver) {
	printf("Bot %c started\n", driver);
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <startBot+0x2>
    12f6:	0f 92       	push	r0
    12f8:	ed b7       	in	r30, 0x3d	; 61
    12fa:	fe b7       	in	r31, 0x3e	; 62
    12fc:	31 96       	adiw	r30, 0x01	; 1
    12fe:	24 e3       	ldi	r18, 0x34	; 52
    1300:	32 e0       	ldi	r19, 0x02	; 2
    1302:	ad b7       	in	r26, 0x3d	; 61
    1304:	be b7       	in	r27, 0x3e	; 62
    1306:	12 96       	adiw	r26, 0x02	; 2
    1308:	3c 93       	st	X, r19
    130a:	2e 93       	st	-X, r18
    130c:	11 97       	sbiw	r26, 0x01	; 1
    130e:	82 83       	std	Z+2, r24	; 0x02
    1310:	13 82       	std	Z+3, r1	; 0x03
    1312:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    1316:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1318:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    131a:	86 60       	ori	r24, 0x06	; 6
	PORTA = PortARestore; 		// executing the command
    131c:	82 b9       	out	0x02, r24	; 2
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
	moveForward();
//	sleep(1);
}
    1326:	08 95       	ret

00001328 <updatePaths>:
#include "algoFunctionsHelper.h"

void updatePaths(char share[]) {
    1328:	2f 92       	push	r2
    132a:	3f 92       	push	r3
    132c:	4f 92       	push	r4
    132e:	5f 92       	push	r5
    1330:	6f 92       	push	r6
    1332:	7f 92       	push	r7
    1334:	8f 92       	push	r8
    1336:	9f 92       	push	r9
    1338:	af 92       	push	r10
    133a:	bf 92       	push	r11
    133c:	cf 92       	push	r12
    133e:	df 92       	push	r13
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	ce 55       	subi	r28, 0x5E	; 94
    1352:	d0 40       	sbci	r29, 0x00	; 0
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	6f 96       	adiw	r28, 0x1f	; 31
    1360:	9f af       	std	Y+63, r25	; 0x3f
    1362:	8e af       	std	Y+62, r24	; 0x3e
    1364:	6f 97       	sbiw	r28, 0x1f	; 31
	int i, j, k, a = botAstat.node, b = botBstat.node, totalA, totalB, x;
    1366:	80 91 f6 09 	lds	r24, 0x09F6
    136a:	90 91 f7 09 	lds	r25, 0x09F7
    136e:	6d 96       	adiw	r28, 0x1d	; 29
    1370:	9f af       	std	Y+63, r25	; 0x3f
    1372:	8e af       	std	Y+62, r24	; 0x3e
    1374:	6d 97       	sbiw	r28, 0x1d	; 29
    1376:	e0 91 ee 09 	lds	r30, 0x09EE
    137a:	f0 91 ef 09 	lds	r31, 0x09EF
    137e:	6b 96       	adiw	r28, 0x1b	; 27
    1380:	ff af       	std	Y+63, r31	; 0x3f
    1382:	ee af       	std	Y+62, r30	; 0x3e
    1384:	6b 97       	sbiw	r28, 0x1b	; 27
	struct path temp;
	j = k = totalA = totalB = 0;
	for (i = noteCount - 1; i >=0; i--) {
    1386:	20 90 9f 03 	lds	r2, 0x039F
    138a:	30 90 a0 03 	lds	r3, 0x03A0
    138e:	08 94       	sec
    1390:	21 08       	sbc	r2, r1
    1392:	31 08       	sbc	r3, r1
    1394:	21 01       	movw	r4, r2
    1396:	44 0c       	add	r4, r4
    1398:	55 1c       	adc	r5, r5
    139a:	8b e8       	ldi	r24, 0x8B	; 139
    139c:	93 e0       	ldi	r25, 0x03	; 3
    139e:	48 0e       	add	r4, r24
    13a0:	59 1e       	adc	r5, r25
    13a2:	66 24       	eor	r6, r6
    13a4:	77 24       	eor	r7, r7
    13a6:	88 24       	eor	r8, r8
    13a8:	99 24       	eor	r9, r9
    13aa:	aa 24       	eor	r10, r10
    13ac:	bb 24       	eor	r11, r11
    13ae:	cc 24       	eor	r12, r12
    13b0:	dd 24       	eor	r13, r13
    13b2:	ce c0       	rjmp	.+412    	; 0x1550 <updatePaths+0x228>
		printf("Adding note %d\n", notes[i]);
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <updatePaths+0x8e>
    13b6:	0f 92       	push	r0
    13b8:	84 e4       	ldi	r24, 0x44	; 68
    13ba:	92 e0       	ldi	r25, 0x02	; 2
    13bc:	ed b7       	in	r30, 0x3d	; 61
    13be:	fe b7       	in	r31, 0x3e	; 62
    13c0:	92 83       	std	Z+2, r25	; 0x02
    13c2:	81 83       	std	Z+1, r24	; 0x01
    13c4:	f2 01       	movw	r30, r4
    13c6:	80 81       	ld	r24, Z
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	ed b7       	in	r30, 0x3d	; 61
    13cc:	fe b7       	in	r31, 0x3e	; 62
    13ce:	94 83       	std	Z+4, r25	; 0x04
    13d0:	83 83       	std	Z+3, r24	; 0x03
    13d2:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		addPath(botA, j, a, notes[i]);
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	f2 01       	movw	r30, r4
    13e0:	20 81       	ld	r18, Z
    13e2:	31 81       	ldd	r19, Z+1	; 0x01
    13e4:	8a ef       	ldi	r24, 0xFA	; 250
    13e6:	99 e0       	ldi	r25, 0x09	; 9
    13e8:	b3 01       	movw	r22, r6
    13ea:	6d 96       	adiw	r28, 0x1d	; 29
    13ec:	4e ad       	ldd	r20, Y+62	; 0x3e
    13ee:	5f ad       	ldd	r21, Y+63	; 0x3f
    13f0:	6d 97       	sbiw	r28, 0x1d	; 29
    13f2:	0e 94 21 05 	call	0xa42	; 0xa42 <addPath>
		addPath(botB, k, b, notes[i]);
    13f6:	f2 01       	movw	r30, r4
    13f8:	20 81       	ld	r18, Z
    13fa:	31 81       	ldd	r19, Z+1	; 0x01
    13fc:	86 ee       	ldi	r24, 0xE6	; 230
    13fe:	90 e1       	ldi	r25, 0x10	; 16
    1400:	b4 01       	movw	r22, r8
    1402:	6b 96       	adiw	r28, 0x1b	; 27
    1404:	4e ad       	ldd	r20, Y+62	; 0x3e
    1406:	5f ad       	ldd	r21, Y+63	; 0x3f
    1408:	6b 97       	sbiw	r28, 0x1b	; 27
    140a:	0e 94 21 05 	call	0xa42	; 0xa42 <addPath>
		printf("Bot A distance = %d\n", totalA + botA[j].distance);
    140e:	00 d0       	rcall	.+0      	; 0x1410 <updatePaths+0xe8>
    1410:	0f 92       	push	r0
    1412:	84 e5       	ldi	r24, 0x54	; 84
    1414:	92 e0       	ldi	r25, 0x02	; 2
    1416:	ed b7       	in	r30, 0x3d	; 61
    1418:	fe b7       	in	r31, 0x3e	; 62
    141a:	92 83       	std	Z+2, r25	; 0x02
    141c:	81 83       	std	Z+1, r24	; 0x01
    141e:	e8 e5       	ldi	r30, 0x58	; 88
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	6e 9e       	mul	r6, r30
    1424:	70 01       	movw	r14, r0
    1426:	6f 9e       	mul	r6, r31
    1428:	f0 0c       	add	r15, r0
    142a:	7e 9e       	mul	r7, r30
    142c:	f0 0c       	add	r15, r0
    142e:	11 24       	eor	r1, r1
    1430:	8a ef       	ldi	r24, 0xFA	; 250
    1432:	99 e0       	ldi	r25, 0x09	; 9
    1434:	e8 0e       	add	r14, r24
    1436:	f9 1e       	adc	r15, r25
    1438:	f7 01       	movw	r30, r14
    143a:	84 81       	ldd	r24, Z+4	; 0x04
    143c:	95 81       	ldd	r25, Z+5	; 0x05
    143e:	8a 0d       	add	r24, r10
    1440:	9b 1d       	adc	r25, r11
    1442:	ed b7       	in	r30, 0x3d	; 61
    1444:	fe b7       	in	r31, 0x3e	; 62
    1446:	94 83       	std	Z+4, r25	; 0x04
    1448:	83 83       	std	Z+3, r24	; 0x03
    144a:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		printf("Bot B distance = %d\n", totalB + botB[k].distance);
    144e:	89 e6       	ldi	r24, 0x69	; 105
    1450:	92 e0       	ldi	r25, 0x02	; 2
    1452:	ed b7       	in	r30, 0x3d	; 61
    1454:	fe b7       	in	r31, 0x3e	; 62
    1456:	92 83       	std	Z+2, r25	; 0x02
    1458:	81 83       	std	Z+1, r24	; 0x01
    145a:	e8 e5       	ldi	r30, 0x58	; 88
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	8e 9e       	mul	r8, r30
    1460:	80 01       	movw	r16, r0
    1462:	8f 9e       	mul	r8, r31
    1464:	10 0d       	add	r17, r0
    1466:	9e 9e       	mul	r9, r30
    1468:	10 0d       	add	r17, r0
    146a:	11 24       	eor	r1, r1
    146c:	0a 51       	subi	r16, 0x1A	; 26
    146e:	1f 4e       	sbci	r17, 0xEF	; 239
    1470:	f8 01       	movw	r30, r16
    1472:	84 81       	ldd	r24, Z+4	; 0x04
    1474:	95 81       	ldd	r25, Z+5	; 0x05
    1476:	8c 0d       	add	r24, r12
    1478:	9d 1d       	adc	r25, r13
    147a:	ed b7       	in	r30, 0x3d	; 61
    147c:	fe b7       	in	r31, 0x3e	; 62
    147e:	94 83       	std	Z+4, r25	; 0x04
    1480:	83 83       	std	Z+3, r24	; 0x03
    1482:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		if (totalA + botA[j].distance <= totalB + botB[k].distance) {
    1486:	f7 01       	movw	r30, r14
    1488:	44 81       	ldd	r20, Z+4	; 0x04
    148a:	55 81       	ldd	r21, Z+5	; 0x05
    148c:	4a 0d       	add	r20, r10
    148e:	5b 1d       	adc	r21, r11
    1490:	f8 01       	movw	r30, r16
    1492:	24 81       	ldd	r18, Z+4	; 0x04
    1494:	35 81       	ldd	r19, Z+5	; 0x05
    1496:	2c 0d       	add	r18, r12
    1498:	3d 1d       	adc	r19, r13
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	24 17       	cp	r18, r20
    14a4:	35 07       	cpc	r19, r21
    14a6:	34 f1       	brlt	.+76     	; 0x14f4 <updatePaths+0x1cc>
			totalA += botA[j].distance;
			if (totalA < totalB) totalA = totalB + 1;
    14a8:	4c 15       	cp	r20, r12
    14aa:	5d 05       	cpc	r21, r13
    14ac:	1c f4       	brge	.+6      	; 0x14b4 <updatePaths+0x18c>
    14ae:	a6 01       	movw	r20, r12
    14b0:	4f 5f       	subi	r20, 0xFF	; 255
    14b2:	5f 4f       	sbci	r21, 0xFF	; 255
			j++;
    14b4:	93 01       	movw	r18, r6
    14b6:	2f 5f       	subi	r18, 0xFF	; 255
    14b8:	3f 4f       	sbci	r19, 0xFF	; 255
			if (botA[j-1].subPathCount > 0)
    14ba:	88 e5       	ldi	r24, 0x58	; 88
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	68 9e       	mul	r6, r24
    14c0:	f0 01       	movw	r30, r0
    14c2:	69 9e       	mul	r6, r25
    14c4:	f0 0d       	add	r31, r0
    14c6:	78 9e       	mul	r7, r24
    14c8:	f0 0d       	add	r31, r0
    14ca:	11 24       	eor	r1, r1
    14cc:	e6 50       	subi	r30, 0x06	; 6
    14ce:	f6 4f       	sbci	r31, 0xF6	; 246
    14d0:	ea 5a       	subi	r30, 0xAA	; 170
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	80 81       	ld	r24, Z
    14d6:	91 81       	ldd	r25, Z+1	; 0x01
    14d8:	e6 55       	subi	r30, 0x56	; 86
    14da:	f0 40       	sbci	r31, 0x00	; 0
    14dc:	18 16       	cp	r1, r24
    14de:	19 06       	cpc	r1, r25
    14e0:	34 f4       	brge	.+12     	; 0x14ee <updatePaths+0x1c6>
				a = botA[j-1].subPath[0];
    14e2:	86 81       	ldd	r24, Z+6	; 0x06
    14e4:	97 81       	ldd	r25, Z+7	; 0x07
    14e6:	6d 96       	adiw	r28, 0x1d	; 29
    14e8:	9f af       	std	Y+63, r25	; 0x3f
    14ea:	8e af       	std	Y+62, r24	; 0x3e
    14ec:	6d 97       	sbiw	r28, 0x1d	; 29
    14ee:	39 01       	movw	r6, r18
    14f0:	96 01       	movw	r18, r12
    14f2:	25 c0       	rjmp	.+74     	; 0x153e <updatePaths+0x216>
		} else {
			totalB += botB[k].distance;
			if (totalB < totalA) totalB = totalA + 1;
    14f4:	2a 15       	cp	r18, r10
    14f6:	3b 05       	cpc	r19, r11
    14f8:	1c f4       	brge	.+6      	; 0x1500 <updatePaths+0x1d8>
    14fa:	95 01       	movw	r18, r10
    14fc:	2f 5f       	subi	r18, 0xFF	; 255
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
			k++;
    1500:	a4 01       	movw	r20, r8
    1502:	4f 5f       	subi	r20, 0xFF	; 255
    1504:	5f 4f       	sbci	r21, 0xFF	; 255
			if (botB[k-1].subPathCount > 0)
    1506:	88 e5       	ldi	r24, 0x58	; 88
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	88 9e       	mul	r8, r24
    150c:	f0 01       	movw	r30, r0
    150e:	89 9e       	mul	r8, r25
    1510:	f0 0d       	add	r31, r0
    1512:	98 9e       	mul	r9, r24
    1514:	f0 0d       	add	r31, r0
    1516:	11 24       	eor	r1, r1
    1518:	ea 51       	subi	r30, 0x1A	; 26
    151a:	ff 4e       	sbci	r31, 0xEF	; 239
    151c:	ea 5a       	subi	r30, 0xAA	; 170
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	80 81       	ld	r24, Z
    1522:	91 81       	ldd	r25, Z+1	; 0x01
    1524:	e6 55       	subi	r30, 0x56	; 86
    1526:	f0 40       	sbci	r31, 0x00	; 0
    1528:	18 16       	cp	r1, r24
    152a:	19 06       	cpc	r1, r25
    152c:	34 f4       	brge	.+12     	; 0x153a <updatePaths+0x212>
				b = botB[k-1].subPath[0];
    152e:	86 81       	ldd	r24, Z+6	; 0x06
    1530:	97 81       	ldd	r25, Z+7	; 0x07
    1532:	6b 96       	adiw	r28, 0x1b	; 27
    1534:	9f af       	std	Y+63, r25	; 0x3f
    1536:	8e af       	std	Y+62, r24	; 0x3e
    1538:	6b 97       	sbiw	r28, 0x1b	; 27
    153a:	4a 01       	movw	r8, r20
    153c:	a5 01       	movw	r20, r10

void updatePaths(char share[]) {
	int i, j, k, a = botAstat.node, b = botBstat.node, totalA, totalB, x;
	struct path temp;
	j = k = totalA = totalB = 0;
	for (i = noteCount - 1; i >=0; i--) {
    153e:	08 94       	sec
    1540:	21 08       	sbc	r2, r1
    1542:	31 08       	sbc	r3, r1
    1544:	ee ef       	ldi	r30, 0xFE	; 254
    1546:	ff ef       	ldi	r31, 0xFF	; 255
    1548:	4e 0e       	add	r4, r30
    154a:	5f 1e       	adc	r5, r31
    154c:	5a 01       	movw	r10, r20
    154e:	69 01       	movw	r12, r18
    1550:	37 fe       	sbrs	r3, 7
    1552:	30 cf       	rjmp	.-416    	; 0x13b4 <updatePaths+0x8c>
			k++;
			if (botB[k-1].subPathCount > 0)
				b = botB[k-1].subPath[0];
		}
	}
	for (i = 0; i < j/2; i++) {
    1554:	63 01       	movw	r12, r6
    1556:	d5 94       	asr	r13
    1558:	c7 94       	ror	r12
    155a:	4a ef       	ldi	r20, 0xFA	; 250
    155c:	59 e0       	ldi	r21, 0x09	; 9
    155e:	08 94       	sec
    1560:	61 08       	sbc	r6, r1
    1562:	71 08       	sbc	r7, r1
    1564:	88 e5       	ldi	r24, 0x58	; 88
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	68 9e       	mul	r6, r24
    156a:	90 01       	movw	r18, r0
    156c:	69 9e       	mul	r6, r25
    156e:	30 0d       	add	r19, r0
    1570:	78 9e       	mul	r7, r24
    1572:	30 0d       	add	r19, r0
    1574:	11 24       	eor	r1, r1
    1576:	08 94       	sec
    1578:	61 1c       	adc	r6, r1
    157a:	71 1c       	adc	r7, r1
    157c:	24 0f       	add	r18, r20
    157e:	35 1f       	adc	r19, r21
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	70 e0       	ldi	r23, 0x00	; 0
		temp = botA[i];
    1584:	5e 01       	movw	r10, r28
    1586:	08 94       	sec
    1588:	a1 1c       	adc	r10, r1
    158a:	b1 1c       	adc	r11, r1
    158c:	1b c0       	rjmp	.+54     	; 0x15c4 <updatePaths+0x29c>
    158e:	d5 01       	movw	r26, r10
    1590:	fa 01       	movw	r30, r20
    1592:	88 e5       	ldi	r24, 0x58	; 88
    1594:	01 90       	ld	r0, Z+
    1596:	0d 92       	st	X+, r0
    1598:	81 50       	subi	r24, 0x01	; 1
    159a:	e1 f7       	brne	.-8      	; 0x1594 <updatePaths+0x26c>
		botA[i] = botA[j-i-1];
    159c:	da 01       	movw	r26, r20
    159e:	f9 01       	movw	r30, r18
    15a0:	88 e5       	ldi	r24, 0x58	; 88
    15a2:	01 90       	ld	r0, Z+
    15a4:	0d 92       	st	X+, r0
    15a6:	81 50       	subi	r24, 0x01	; 1
    15a8:	e1 f7       	brne	.-8      	; 0x15a2 <updatePaths+0x27a>
		botA[j-i-1] = temp;
    15aa:	d9 01       	movw	r26, r18
    15ac:	f5 01       	movw	r30, r10
    15ae:	88 e5       	ldi	r24, 0x58	; 88
    15b0:	01 90       	ld	r0, Z+
    15b2:	0d 92       	st	X+, r0
    15b4:	81 50       	subi	r24, 0x01	; 1
    15b6:	e1 f7       	brne	.-8      	; 0x15b0 <updatePaths+0x288>
			k++;
			if (botB[k-1].subPathCount > 0)
				b = botB[k-1].subPath[0];
		}
	}
	for (i = 0; i < j/2; i++) {
    15b8:	6f 5f       	subi	r22, 0xFF	; 255
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255
    15bc:	48 5a       	subi	r20, 0xA8	; 168
    15be:	5f 4f       	sbci	r21, 0xFF	; 255
    15c0:	28 55       	subi	r18, 0x58	; 88
    15c2:	30 40       	sbci	r19, 0x00	; 0
    15c4:	6c 15       	cp	r22, r12
    15c6:	7d 05       	cpc	r23, r13
    15c8:	14 f3       	brlt	.-60     	; 0x158e <updatePaths+0x266>
		temp = botA[i];
		botA[i] = botA[j-i-1];
		botA[j-i-1] = temp;
	}
	for (i = 0; i < k/2; i++) {
    15ca:	64 01       	movw	r12, r8
    15cc:	d5 94       	asr	r13
    15ce:	c7 94       	ror	r12
    15d0:	46 ee       	ldi	r20, 0xE6	; 230
    15d2:	50 e1       	ldi	r21, 0x10	; 16
    15d4:	08 94       	sec
    15d6:	81 08       	sbc	r8, r1
    15d8:	91 08       	sbc	r9, r1
    15da:	88 e5       	ldi	r24, 0x58	; 88
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	88 9e       	mul	r8, r24
    15e0:	90 01       	movw	r18, r0
    15e2:	89 9e       	mul	r8, r25
    15e4:	30 0d       	add	r19, r0
    15e6:	98 9e       	mul	r9, r24
    15e8:	30 0d       	add	r19, r0
    15ea:	11 24       	eor	r1, r1
    15ec:	08 94       	sec
    15ee:	81 1c       	adc	r8, r1
    15f0:	91 1c       	adc	r9, r1
    15f2:	24 0f       	add	r18, r20
    15f4:	35 1f       	adc	r19, r21
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	70 e0       	ldi	r23, 0x00	; 0
		temp = botB[i];
    15fa:	5e 01       	movw	r10, r28
    15fc:	08 94       	sec
    15fe:	a1 1c       	adc	r10, r1
    1600:	b1 1c       	adc	r11, r1
    1602:	1b c0       	rjmp	.+54     	; 0x163a <updatePaths+0x312>
    1604:	d5 01       	movw	r26, r10
    1606:	fa 01       	movw	r30, r20
    1608:	88 e5       	ldi	r24, 0x58	; 88
    160a:	01 90       	ld	r0, Z+
    160c:	0d 92       	st	X+, r0
    160e:	81 50       	subi	r24, 0x01	; 1
    1610:	e1 f7       	brne	.-8      	; 0x160a <updatePaths+0x2e2>
		botB[i] = botB[k-i-1];
    1612:	da 01       	movw	r26, r20
    1614:	f9 01       	movw	r30, r18
    1616:	88 e5       	ldi	r24, 0x58	; 88
    1618:	01 90       	ld	r0, Z+
    161a:	0d 92       	st	X+, r0
    161c:	81 50       	subi	r24, 0x01	; 1
    161e:	e1 f7       	brne	.-8      	; 0x1618 <updatePaths+0x2f0>
		botB[k-i-1] = temp;
    1620:	d9 01       	movw	r26, r18
    1622:	f5 01       	movw	r30, r10
    1624:	88 e5       	ldi	r24, 0x58	; 88
    1626:	01 90       	ld	r0, Z+
    1628:	0d 92       	st	X+, r0
    162a:	81 50       	subi	r24, 0x01	; 1
    162c:	e1 f7       	brne	.-8      	; 0x1626 <updatePaths+0x2fe>
	for (i = 0; i < j/2; i++) {
		temp = botA[i];
		botA[i] = botA[j-i-1];
		botA[j-i-1] = temp;
	}
	for (i = 0; i < k/2; i++) {
    162e:	6f 5f       	subi	r22, 0xFF	; 255
    1630:	7f 4f       	sbci	r23, 0xFF	; 255
    1632:	48 5a       	subi	r20, 0xA8	; 168
    1634:	5f 4f       	sbci	r21, 0xFF	; 255
    1636:	28 55       	subi	r18, 0x58	; 88
    1638:	30 40       	sbci	r19, 0x00	; 0
    163a:	6c 15       	cp	r22, r12
    163c:	7d 05       	cpc	r23, r13
    163e:	14 f3       	brlt	.-60     	; 0x1604 <updatePaths+0x2dc>
		temp = botB[i];
		botB[i] = botB[k-i-1];
		botB[k-i-1] = temp;
	}
	pathLenA = j;
    1640:	70 92 76 06 	sts	0x0676, r7
    1644:	60 92 75 06 	sts	0x0675, r6
	pathLenB = k;
    1648:	90 92 e1 10 	sts	0x10E1, r9
    164c:	80 92 e0 10 	sts	0x10E0, r8
	transferAB(share);
    1650:	6f 96       	adiw	r28, 0x1f	; 31
    1652:	8e ad       	ldd	r24, Y+62	; 0x3e
    1654:	9f ad       	ldd	r25, Y+63	; 0x3f
    1656:	6f 97       	sbiw	r28, 0x1f	; 31
    1658:	0e 94 51 03 	call	0x6a2	; 0x6a2 <transferAB>
    165c:	c2 5a       	subi	r28, 0xA2	; 162
    165e:	df 4f       	sbci	r29, 0xFF	; 255
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	1f 91       	pop	r17
    1670:	0f 91       	pop	r16
    1672:	ff 90       	pop	r15
    1674:	ef 90       	pop	r14
    1676:	df 90       	pop	r13
    1678:	cf 90       	pop	r12
    167a:	bf 90       	pop	r11
    167c:	af 90       	pop	r10
    167e:	9f 90       	pop	r9
    1680:	8f 90       	pop	r8
    1682:	7f 90       	pop	r7
    1684:	6f 90       	pop	r6
    1686:	5f 90       	pop	r5
    1688:	4f 90       	pop	r4
    168a:	3f 90       	pop	r3
    168c:	2f 90       	pop	r2
    168e:	08 95       	ret

00001690 <completePathB>:
	botAstat.ready = 2;
	stopBot("Completed", driver);
	return 1;
}

int completePathB(char driver, char str[]) {
    1690:	2f 92       	push	r2
    1692:	3f 92       	push	r3
    1694:	4f 92       	push	r4
    1696:	5f 92       	push	r5
    1698:	6f 92       	push	r6
    169a:	7f 92       	push	r7
    169c:	8f 92       	push	r8
    169e:	9f 92       	push	r9
    16a0:	af 92       	push	r10
    16a2:	bf 92       	push	r11
    16a4:	df 92       	push	r13
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	d8 2e       	mov	r13, r24
    16b4:	eb 01       	movw	r28, r22
	int temp;
	startBot(driver);
    16b6:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <startBot>
	while (pathLenB > 0) {
		pathLenB--;
		while (botB[pathLenB].subPathCount > 0) {
    16ba:	48 e5       	ldi	r20, 0x58	; 88
    16bc:	e4 2e       	mov	r14, r20
    16be:	f1 2c       	mov	r15, r1
				updatePaths("test");
				return 0;
			}
			temp = botBstat.node;
			// printf("Status: Bot A %d Bot B %d\n", botAstat.node, botB[pathLenB].subPath[ botB[pathLenB].subPathCount ]);
			if (botB[pathLenB].subPath[ botB[pathLenB].subPathCount ] == botAstat.node) {
    16c0:	3c e2       	ldi	r19, 0x2C	; 44
    16c2:	a3 2e       	mov	r10, r19
    16c4:	b1 2c       	mov	r11, r1
void setObstacle(int from, int to) {
	//
}

void goFromTo(int from, int to, char driver) {
	printf("%c Going from %d to %d\n", driver, from, to);
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	22 2e       	mov	r2, r18
    16ca:	22 e0       	ldi	r18, 0x02	; 2
    16cc:	32 2e       	mov	r3, r18
			// 	while (botBstat.ready == 0);
			// 	return 0;
			// }
			updateShareB(str);
		}
		printf("B played %d\n", notes[noteCount-1]);
    16ce:	98 e8       	ldi	r25, 0x88	; 136
    16d0:	49 2e       	mov	r4, r25
    16d2:	92 e0       	ldi	r25, 0x02	; 2
    16d4:	59 2e       	mov	r5, r25
		noteCount--;
		playNote(driver);
		str[6]++;
    16d6:	86 e0       	ldi	r24, 0x06	; 6
    16d8:	68 2e       	mov	r6, r24
    16da:	71 2c       	mov	r7, r1
    16dc:	6c 0e       	add	r6, r28
    16de:	7d 1e       	adc	r7, r29
    16e0:	22 c1       	rjmp	.+580    	; 0x1926 <completePathB+0x296>

int completePathB(char driver, char str[]) {
	int temp;
	startBot(driver);
	while (pathLenB > 0) {
		pathLenB--;
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	90 93 e1 10 	sts	0x10E1, r25
    16e8:	80 93 e0 10 	sts	0x10E0, r24
    16ec:	ca c0       	rjmp	.+404    	; 0x1882 <completePathB+0x1f2>
		while (botB[pathLenB].subPathCount > 0) {
			updateShareB(str);
    16ee:	ce 01       	movw	r24, r28
    16f0:	0e 94 94 03 	call	0x728	; 0x728 <updateShareB>
			botB[pathLenB].subPathCount--;
    16f4:	20 91 e0 10 	lds	r18, 0x10E0
    16f8:	30 91 e1 10 	lds	r19, 0x10E1
    16fc:	2e 9d       	mul	r18, r14
    16fe:	f0 01       	movw	r30, r0
    1700:	2f 9d       	mul	r18, r15
    1702:	f0 0d       	add	r31, r0
    1704:	3e 9d       	mul	r19, r14
    1706:	f0 0d       	add	r31, r0
    1708:	11 24       	eor	r1, r1
    170a:	e4 5c       	subi	r30, 0xC4	; 196
    170c:	fe 4e       	sbci	r31, 0xEE	; 238
    170e:	80 81       	ld	r24, Z
    1710:	91 81       	ldd	r25, Z+1	; 0x01
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	80 83       	st	Z, r24
				botBstat.ready = 0;
				while (botBstat.ready == 1);
				updatePaths("test");
				return 0;
			}
			temp = botBstat.node;
    1718:	80 90 ee 09 	lds	r8, 0x09EE
    171c:	90 90 ef 09 	lds	r9, 0x09EF
			// printf("Status: Bot A %d Bot B %d\n", botAstat.node, botB[pathLenB].subPath[ botB[pathLenB].subPathCount ]);
			if (botB[pathLenB].subPath[ botB[pathLenB].subPathCount ] == botAstat.node) {
    1720:	2a 9d       	mul	r18, r10
    1722:	f0 01       	movw	r30, r0
    1724:	2b 9d       	mul	r18, r11
    1726:	f0 0d       	add	r31, r0
    1728:	3a 9d       	mul	r19, r10
    172a:	f0 0d       	add	r31, r0
    172c:	11 24       	eor	r1, r1
    172e:	e8 0f       	add	r30, r24
    1730:	f9 1f       	adc	r31, r25
    1732:	ee 0f       	add	r30, r30
    1734:	ff 1f       	adc	r31, r31
    1736:	ea 51       	subi	r30, 0x1A	; 26
    1738:	ff 4e       	sbci	r31, 0xEF	; 239
    173a:	26 81       	ldd	r18, Z+6	; 0x06
    173c:	37 81       	ldd	r19, Z+7	; 0x07
    173e:	80 91 f6 09 	lds	r24, 0x09F6
    1742:	90 91 f7 09 	lds	r25, 0x09F7
    1746:	28 17       	cp	r18, r24
    1748:	39 07       	cpc	r19, r25
    174a:	09 f0       	breq	.+2      	; 0x174e <completePathB+0xbe>
    174c:	4c c0       	rjmp	.+152    	; 0x17e6 <completePathB+0x156>
	moveForward();
//	sleep(1);
}

void stopBot(char reason[], char driver) {
	printf("%c Bot stopped, reason: %s\n", driver, reason);
    174e:	00 d0       	rcall	.+0      	; 0x1750 <completePathB+0xc0>
    1750:	00 d0       	rcall	.+0      	; 0x1752 <completePathB+0xc2>
    1752:	ed b7       	in	r30, 0x3d	; 61
    1754:	fe b7       	in	r31, 0x3e	; 62
    1756:	31 96       	adiw	r30, 0x01	; 1
    1758:	88 e1       	ldi	r24, 0x18	; 24
    175a:	92 e0       	ldi	r25, 0x02	; 2
    175c:	ad b7       	in	r26, 0x3d	; 61
    175e:	be b7       	in	r27, 0x3e	; 62
    1760:	12 96       	adiw	r26, 0x02	; 2
    1762:	9c 93       	st	X, r25
    1764:	8e 93       	st	-X, r24
    1766:	11 97       	sbiw	r26, 0x01	; 1
    1768:	d2 82       	std	Z+2, r13	; 0x02
    176a:	13 82       	std	Z+3, r1	; 0x03
    176c:	ae e7       	ldi	r26, 0x7E	; 126
    176e:	b2 e0       	ldi	r27, 0x02	; 2
    1770:	b5 83       	std	Z+5, r27	; 0x05
    1772:	a4 83       	std	Z+4, r26	; 0x04
    1774:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    1778:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    177a:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore; 		// executing the command
    177c:	82 b9       	out	0x02, r24	; 2
    177e:	ed b7       	in	r30, 0x3d	; 61
    1780:	fe b7       	in	r31, 0x3e	; 62
    1782:	36 96       	adiw	r30, 0x06	; 6
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	fe bf       	out	0x3e, r31	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	ed bf       	out	0x3d, r30	; 61
    178e:	03 c0       	rjmp	.+6      	; 0x1796 <completePathB+0x106>
					// 	stopBot("Obstacle", driver);
					// 	botBstat.ready = 0;
					// 	while (botBstat.ready == 0);
					// 	return 0;
					// }
					updateShareB(str);
    1790:	ce 01       	movw	r24, r28
    1792:	0e 94 94 03 	call	0x728	; 0x728 <updateShareB>
			}
			temp = botBstat.node;
			// printf("Status: Bot A %d Bot B %d\n", botAstat.node, botB[pathLenB].subPath[ botB[pathLenB].subPathCount ]);
			if (botB[pathLenB].subPath[ botB[pathLenB].subPathCount ] == botAstat.node) {
				stopBot("Collision", driver);
				while (botB[pathLenB].subPath[ botB[pathLenB].subPathCount ] == botBstat.node) {
    1796:	80 91 e0 10 	lds	r24, 0x10E0
    179a:	90 91 e1 10 	lds	r25, 0x10E1
    179e:	8e 9d       	mul	r24, r14
    17a0:	d0 01       	movw	r26, r0
    17a2:	8f 9d       	mul	r24, r15
    17a4:	b0 0d       	add	r27, r0
    17a6:	9e 9d       	mul	r25, r14
    17a8:	b0 0d       	add	r27, r0
    17aa:	11 24       	eor	r1, r1
    17ac:	a4 5c       	subi	r26, 0xC4	; 196
    17ae:	be 4e       	sbci	r27, 0xEE	; 238
    17b0:	8a 9d       	mul	r24, r10
    17b2:	f0 01       	movw	r30, r0
    17b4:	8b 9d       	mul	r24, r11
    17b6:	f0 0d       	add	r31, r0
    17b8:	9a 9d       	mul	r25, r10
    17ba:	f0 0d       	add	r31, r0
    17bc:	11 24       	eor	r1, r1
    17be:	8d 91       	ld	r24, X+
    17c0:	9c 91       	ld	r25, X
    17c2:	e8 0f       	add	r30, r24
    17c4:	f9 1f       	adc	r31, r25
    17c6:	ee 0f       	add	r30, r30
    17c8:	ff 1f       	adc	r31, r31
    17ca:	ea 51       	subi	r30, 0x1A	; 26
    17cc:	ff 4e       	sbci	r31, 0xEF	; 239
    17ce:	26 81       	ldd	r18, Z+6	; 0x06
    17d0:	37 81       	ldd	r19, Z+7	; 0x07
    17d2:	80 91 ee 09 	lds	r24, 0x09EE
    17d6:	90 91 ef 09 	lds	r25, 0x09EF
    17da:	28 17       	cp	r18, r24
    17dc:	39 07       	cpc	r19, r25
    17de:	c1 f2       	breq	.-80     	; 0x1790 <completePathB+0x100>
					// 	while (botBstat.ready == 0);
					// 	return 0;
					// }
					updateShareB(str);
				}
				startBot(driver);
    17e0:	8d 2d       	mov	r24, r13
    17e2:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <startBot>
			}
			botBstat.node = botB[pathLenB].subPath[ botB[pathLenB].subPathCount ];
    17e6:	80 91 e0 10 	lds	r24, 0x10E0
    17ea:	90 91 e1 10 	lds	r25, 0x10E1
    17ee:	8e 9d       	mul	r24, r14
    17f0:	d0 01       	movw	r26, r0
    17f2:	8f 9d       	mul	r24, r15
    17f4:	b0 0d       	add	r27, r0
    17f6:	9e 9d       	mul	r25, r14
    17f8:	b0 0d       	add	r27, r0
    17fa:	11 24       	eor	r1, r1
    17fc:	a4 5c       	subi	r26, 0xC4	; 196
    17fe:	be 4e       	sbci	r27, 0xEE	; 238
    1800:	8a 9d       	mul	r24, r10
    1802:	f0 01       	movw	r30, r0
    1804:	8b 9d       	mul	r24, r11
    1806:	f0 0d       	add	r31, r0
    1808:	9a 9d       	mul	r25, r10
    180a:	f0 0d       	add	r31, r0
    180c:	11 24       	eor	r1, r1
    180e:	8d 91       	ld	r24, X+
    1810:	9c 91       	ld	r25, X
    1812:	e8 0f       	add	r30, r24
    1814:	f9 1f       	adc	r31, r25
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	ea 51       	subi	r30, 0x1A	; 26
    181c:	ff 4e       	sbci	r31, 0xEF	; 239
    181e:	86 81       	ldd	r24, Z+6	; 0x06
    1820:	97 81       	ldd	r25, Z+7	; 0x07
    1822:	90 93 ef 09 	sts	0x09EF, r25
    1826:	80 93 ee 09 	sts	0x09EE, r24
			updateShareB(str);
    182a:	ce 01       	movw	r24, r28
    182c:	0e 94 94 03 	call	0x728	; 0x728 <updateShareB>
			goFromTo(temp, botBstat.node, driver);
    1830:	00 91 ee 09 	lds	r16, 0x09EE
    1834:	10 91 ef 09 	lds	r17, 0x09EF
void setObstacle(int from, int to) {
	//
}

void goFromTo(int from, int to, char driver) {
	printf("%c Going from %d to %d\n", driver, from, to);
    1838:	8d b7       	in	r24, 0x3d	; 61
    183a:	9e b7       	in	r25, 0x3e	; 62
    183c:	08 97       	sbiw	r24, 0x08	; 8
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	9e bf       	out	0x3e, r25	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	8d bf       	out	0x3d, r24	; 61
    1848:	ed b7       	in	r30, 0x3d	; 61
    184a:	fe b7       	in	r31, 0x3e	; 62
    184c:	31 96       	adiw	r30, 0x01	; 1
    184e:	ad b7       	in	r26, 0x3d	; 61
    1850:	be b7       	in	r27, 0x3e	; 62
    1852:	12 96       	adiw	r26, 0x02	; 2
    1854:	3c 92       	st	X, r3
    1856:	2e 92       	st	-X, r2
    1858:	11 97       	sbiw	r26, 0x01	; 1
    185a:	d2 82       	std	Z+2, r13	; 0x02
    185c:	13 82       	std	Z+3, r1	; 0x03
    185e:	95 82       	std	Z+5, r9	; 0x05
    1860:	84 82       	std	Z+4, r8	; 0x04
    1862:	17 83       	std	Z+7, r17	; 0x07
    1864:	06 83       	std	Z+6, r16	; 0x06
    1866:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
	botAstat.node = to;
    186a:	10 93 f7 09 	sts	0x09F7, r17
    186e:	00 93 f6 09 	sts	0x09F6, r16
    1872:	ed b7       	in	r30, 0x3d	; 61
    1874:	fe b7       	in	r31, 0x3e	; 62
    1876:	38 96       	adiw	r30, 0x08	; 8
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	fe bf       	out	0x3e, r31	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	ed bf       	out	0x3d, r30	; 61
int completePathB(char driver, char str[]) {
	int temp;
	startBot(driver);
	while (pathLenB > 0) {
		pathLenB--;
		while (botB[pathLenB].subPathCount > 0) {
    1882:	80 91 e0 10 	lds	r24, 0x10E0
    1886:	90 91 e1 10 	lds	r25, 0x10E1
    188a:	8e 9d       	mul	r24, r14
    188c:	f0 01       	movw	r30, r0
    188e:	8f 9d       	mul	r24, r15
    1890:	f0 0d       	add	r31, r0
    1892:	9e 9d       	mul	r25, r14
    1894:	f0 0d       	add	r31, r0
    1896:	11 24       	eor	r1, r1
    1898:	e4 5c       	subi	r30, 0xC4	; 196
    189a:	fe 4e       	sbci	r31, 0xEE	; 238
    189c:	80 81       	ld	r24, Z
    189e:	91 81       	ldd	r25, Z+1	; 0x01
    18a0:	18 16       	cp	r1, r24
    18a2:	19 06       	cpc	r1, r25
    18a4:	0c f4       	brge	.+2      	; 0x18a8 <completePathB+0x218>
    18a6:	23 cf       	rjmp	.-442    	; 0x16ee <completePathB+0x5e>
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <completePathB+0x220>
			// 	stopBot("Obstacle", driver);
			// 	botBstat.ready = 0;
			// 	while (botBstat.ready == 0);
			// 	return 0;
			// }
			updateShareB(str);
    18aa:	ce 01       	movw	r24, r28
    18ac:	0e 94 94 03 	call	0x728	; 0x728 <updateShareB>
			}
			botBstat.node = botB[pathLenB].subPath[ botB[pathLenB].subPathCount ];
			updateShareB(str);
			goFromTo(temp, botBstat.node, driver);
		}
		while (botB[pathLenB].note != notes[noteCount-1]) {
    18b0:	80 91 e0 10 	lds	r24, 0x10E0
    18b4:	90 91 e1 10 	lds	r25, 0x10E1
    18b8:	8e 9d       	mul	r24, r14
    18ba:	f0 01       	movw	r30, r0
    18bc:	8f 9d       	mul	r24, r15
    18be:	f0 0d       	add	r31, r0
    18c0:	9e 9d       	mul	r25, r14
    18c2:	f0 0d       	add	r31, r0
    18c4:	11 24       	eor	r1, r1
    18c6:	ea 51       	subi	r30, 0x1A	; 26
    18c8:	ff 4e       	sbci	r31, 0xEF	; 239
    18ca:	22 81       	ldd	r18, Z+2	; 0x02
    18cc:	33 81       	ldd	r19, Z+3	; 0x03
    18ce:	e0 91 9f 03 	lds	r30, 0x039F
    18d2:	f0 91 a0 03 	lds	r31, 0x03A0
    18d6:	ee 0f       	add	r30, r30
    18d8:	ff 1f       	adc	r31, r31
    18da:	e7 57       	subi	r30, 0x77	; 119
    18dc:	fc 4f       	sbci	r31, 0xFC	; 252
    18de:	80 81       	ld	r24, Z
    18e0:	91 81       	ldd	r25, Z+1	; 0x01
    18e2:	28 17       	cp	r18, r24
    18e4:	39 07       	cpc	r19, r25
    18e6:	09 f7       	brne	.-62     	; 0x18aa <completePathB+0x21a>
			// 	while (botBstat.ready == 0);
			// 	return 0;
			// }
			updateShareB(str);
		}
		printf("B played %d\n", notes[noteCount-1]);
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <completePathB+0x25a>
    18ea:	0f 92       	push	r0
    18ec:	ad b7       	in	r26, 0x3d	; 61
    18ee:	be b7       	in	r27, 0x3e	; 62
    18f0:	12 96       	adiw	r26, 0x02	; 2
    18f2:	5c 92       	st	X, r5
    18f4:	4e 92       	st	-X, r4
    18f6:	11 97       	sbiw	r26, 0x01	; 1
    18f8:	14 96       	adiw	r26, 0x04	; 4
    18fa:	3c 93       	st	X, r19
    18fc:	2e 93       	st	-X, r18
    18fe:	13 97       	sbiw	r26, 0x03	; 3
    1900:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		noteCount--;
    1904:	80 91 9f 03 	lds	r24, 0x039F
    1908:	90 91 a0 03 	lds	r25, 0x03A0
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	90 93 a0 03 	sts	0x03A0, r25
    1912:	80 93 9f 03 	sts	0x039F, r24
		playNote(driver);
		str[6]++;
    1916:	f3 01       	movw	r30, r6
    1918:	80 81       	ld	r24, Z
    191a:	8f 5f       	subi	r24, 0xFF	; 255
    191c:	80 83       	st	Z, r24
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
}

int completePathB(char driver, char str[]) {
	int temp;
	startBot(driver);
	while (pathLenB > 0) {
    1926:	80 91 e0 10 	lds	r24, 0x10E0
    192a:	90 91 e1 10 	lds	r25, 0x10E1
    192e:	18 16       	cp	r1, r24
    1930:	19 06       	cpc	r1, r25
    1932:	0c f4       	brge	.+2      	; 0x1936 <completePathB+0x2a6>
    1934:	d6 ce       	rjmp	.-596    	; 0x16e2 <completePathB+0x52>
		printf("B played %d\n", notes[noteCount-1]);
		noteCount--;
		playNote(driver);
		str[6]++;
	}
	botBstat.ready = 2;
    1936:	82 e0       	ldi	r24, 0x02	; 2
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	90 93 ed 09 	sts	0x09ED, r25
    193e:	80 93 ec 09 	sts	0x09EC, r24
	moveForward();
//	sleep(1);
}

void stopBot(char reason[], char driver) {
	printf("%c Bot stopped, reason: %s\n", driver, reason);
    1942:	00 d0       	rcall	.+0      	; 0x1944 <completePathB+0x2b4>
    1944:	00 d0       	rcall	.+0      	; 0x1946 <completePathB+0x2b6>
    1946:	ed b7       	in	r30, 0x3d	; 61
    1948:	fe b7       	in	r31, 0x3e	; 62
    194a:	31 96       	adiw	r30, 0x01	; 1
    194c:	88 e1       	ldi	r24, 0x18	; 24
    194e:	92 e0       	ldi	r25, 0x02	; 2
    1950:	ad b7       	in	r26, 0x3d	; 61
    1952:	be b7       	in	r27, 0x3e	; 62
    1954:	12 96       	adiw	r26, 0x02	; 2
    1956:	9c 93       	st	X, r25
    1958:	8e 93       	st	-X, r24
    195a:	11 97       	sbiw	r26, 0x01	; 1
    195c:	d2 82       	std	Z+2, r13	; 0x02
    195e:	13 82       	std	Z+3, r1	; 0x03
    1960:	85 e9       	ldi	r24, 0x95	; 149
    1962:	92 e0       	ldi	r25, 0x02	; 2
    1964:	95 83       	std	Z+5, r25	; 0x05
    1966:	84 83       	std	Z+4, r24	; 0x04
    1968:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    196c:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    196e:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore; 		// executing the command
    1970:	82 b9       	out	0x02, r24	; 2
    1972:	ed b7       	in	r30, 0x3d	; 61
    1974:	fe b7       	in	r31, 0x3e	; 62
    1976:	36 96       	adiw	r30, 0x06	; 6
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	fe bf       	out	0x3e, r31	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	ed bf       	out	0x3d, r30	; 61
	stopBot("Completed", driver);
	return 1;
}
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	1f 91       	pop	r17
    198c:	0f 91       	pop	r16
    198e:	ff 90       	pop	r15
    1990:	ef 90       	pop	r14
    1992:	df 90       	pop	r13
    1994:	bf 90       	pop	r11
    1996:	af 90       	pop	r10
    1998:	9f 90       	pop	r9
    199a:	8f 90       	pop	r8
    199c:	7f 90       	pop	r7
    199e:	6f 90       	pop	r6
    19a0:	5f 90       	pop	r5
    19a2:	4f 90       	pop	r4
    19a4:	3f 90       	pop	r3
    19a6:	2f 90       	pop	r2
    19a8:	08 95       	ret

000019aa <completePathA>:
#include "testPrintValues.h" // used only for debugging
#include "shareFunctions.h"
#include "algoFunctions.h"
#include "botFunctions.h"

int completePathA(char driver, char str[]) {
    19aa:	2f 92       	push	r2
    19ac:	3f 92       	push	r3
    19ae:	4f 92       	push	r4
    19b0:	5f 92       	push	r5
    19b2:	6f 92       	push	r6
    19b4:	7f 92       	push	r7
    19b6:	8f 92       	push	r8
    19b8:	9f 92       	push	r9
    19ba:	af 92       	push	r10
    19bc:	bf 92       	push	r11
    19be:	cf 92       	push	r12
    19c0:	df 92       	push	r13
    19c2:	ff 92       	push	r15
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	f8 2e       	mov	r15, r24
    19ce:	eb 01       	movw	r28, r22
	int temp;
	startBot(driver);
    19d0:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <startBot>
	while (pathLenA > 0) {
		pathLenA--;
		while (botA[pathLenA].subPathCount > 0) {
    19d4:	98 e5       	ldi	r25, 0x58	; 88
    19d6:	c9 2e       	mov	r12, r25
    19d8:	d1 2c       	mov	r13, r1
				updatePaths("test");
				return 0;
			}
			temp = botAstat.node;
			// printf("Status: Bot A %d Bot B %d\n", botA[pathLenA].subPath[ botA[pathLenA].subPathCount ], botBstat.node);
			if (botA[pathLenA].subPath[ botA[pathLenA].subPathCount ] == botBstat.node) {
    19da:	8c e2       	ldi	r24, 0x2C	; 44
    19dc:	a8 2e       	mov	r10, r24
    19de:	b1 2c       	mov	r11, r1
void setObstacle(int from, int to) {
	//
}

void goFromTo(int from, int to, char driver) {
	printf("%c Going from %d to %d\n", driver, from, to);
    19e0:	00 e0       	ldi	r16, 0x00	; 0
    19e2:	20 2e       	mov	r2, r16
    19e4:	02 e0       	ldi	r16, 0x02	; 2
    19e6:	30 2e       	mov	r3, r16
			// 	while (botAstat.ready == 0);
			// 	return 0;
			// }
			updateShareA(str);
		}
		printf("A played %d\n", notes[noteCount-1]);
    19e8:	1f e9       	ldi	r17, 0x9F	; 159
    19ea:	41 2e       	mov	r4, r17
    19ec:	12 e0       	ldi	r17, 0x02	; 2
    19ee:	51 2e       	mov	r5, r17
		noteCount--;
		playNote(driver);
		str[2]++;
    19f0:	b2 e0       	ldi	r27, 0x02	; 2
    19f2:	6b 2e       	mov	r6, r27
    19f4:	71 2c       	mov	r7, r1
    19f6:	6c 0e       	add	r6, r28
    19f8:	7d 1e       	adc	r7, r29
    19fa:	10 c1       	rjmp	.+544    	; 0x1c1c <completePathA+0x272>

int completePathA(char driver, char str[]) {
	int temp;
	startBot(driver);
	while (pathLenA > 0) {
		pathLenA--;
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	90 93 76 06 	sts	0x0676, r25
    1a02:	80 93 75 06 	sts	0x0675, r24
    1a06:	b8 c0       	rjmp	.+368    	; 0x1b78 <completePathA+0x1ce>
		while (botA[pathLenA].subPathCount > 0) {
			botA[pathLenA].subPathCount--;
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	80 83       	st	Z, r24
				botBstat.ready = 0;
				while (botAstat.ready == 1);
				updatePaths("test");
				return 0;
			}
			temp = botAstat.node;
    1a0e:	80 90 f6 09 	lds	r8, 0x09F6
    1a12:	90 90 f7 09 	lds	r9, 0x09F7
			// printf("Status: Bot A %d Bot B %d\n", botA[pathLenA].subPath[ botA[pathLenA].subPathCount ], botBstat.node);
			if (botA[pathLenA].subPath[ botA[pathLenA].subPathCount ] == botBstat.node) {
    1a16:	2a 9d       	mul	r18, r10
    1a18:	f0 01       	movw	r30, r0
    1a1a:	2b 9d       	mul	r18, r11
    1a1c:	f0 0d       	add	r31, r0
    1a1e:	3a 9d       	mul	r19, r10
    1a20:	f0 0d       	add	r31, r0
    1a22:	11 24       	eor	r1, r1
    1a24:	e8 0f       	add	r30, r24
    1a26:	f9 1f       	adc	r31, r25
    1a28:	ee 0f       	add	r30, r30
    1a2a:	ff 1f       	adc	r31, r31
    1a2c:	e6 50       	subi	r30, 0x06	; 6
    1a2e:	f6 4f       	sbci	r31, 0xF6	; 246
    1a30:	26 81       	ldd	r18, Z+6	; 0x06
    1a32:	37 81       	ldd	r19, Z+7	; 0x07
    1a34:	80 91 ee 09 	lds	r24, 0x09EE
    1a38:	90 91 ef 09 	lds	r25, 0x09EF
    1a3c:	28 17       	cp	r18, r24
    1a3e:	39 07       	cpc	r19, r25
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <completePathA+0x9a>
    1a42:	4c c0       	rjmp	.+152    	; 0x1adc <completePathA+0x132>
	moveForward();
//	sleep(1);
}

void stopBot(char reason[], char driver) {
	printf("%c Bot stopped, reason: %s\n", driver, reason);
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <completePathA+0x9c>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <completePathA+0x9e>
    1a48:	ed b7       	in	r30, 0x3d	; 61
    1a4a:	fe b7       	in	r31, 0x3e	; 62
    1a4c:	31 96       	adiw	r30, 0x01	; 1
    1a4e:	88 e1       	ldi	r24, 0x18	; 24
    1a50:	92 e0       	ldi	r25, 0x02	; 2
    1a52:	ad b7       	in	r26, 0x3d	; 61
    1a54:	be b7       	in	r27, 0x3e	; 62
    1a56:	12 96       	adiw	r26, 0x02	; 2
    1a58:	9c 93       	st	X, r25
    1a5a:	8e 93       	st	-X, r24
    1a5c:	11 97       	sbiw	r26, 0x01	; 1
    1a5e:	f2 82       	std	Z+2, r15	; 0x02
    1a60:	13 82       	std	Z+3, r1	; 0x03
    1a62:	ae e7       	ldi	r26, 0x7E	; 126
    1a64:	b2 e0       	ldi	r27, 0x02	; 2
    1a66:	b5 83       	std	Z+5, r27	; 0x05
    1a68:	a4 83       	std	Z+4, r26	; 0x04
    1a6a:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    1a6e:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1a70:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore; 		// executing the command
    1a72:	82 b9       	out	0x02, r24	; 2
    1a74:	ed b7       	in	r30, 0x3d	; 61
    1a76:	fe b7       	in	r31, 0x3e	; 62
    1a78:	36 96       	adiw	r30, 0x06	; 6
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	fe bf       	out	0x3e, r31	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	ed bf       	out	0x3d, r30	; 61
    1a84:	03 c0       	rjmp	.+6      	; 0x1a8c <completePathA+0xe2>
					// 	stopBot("Obstacle", driver);
					// 	botBstat.ready = 0;
					// 	while (botAstat.ready == 0);
					// 	return 0;
					// }
					updateShareA(str);
    1a86:	ce 01       	movw	r24, r28
    1a88:	0e 94 74 03 	call	0x6e8	; 0x6e8 <updateShareA>
			}
			temp = botAstat.node;
			// printf("Status: Bot A %d Bot B %d\n", botA[pathLenA].subPath[ botA[pathLenA].subPathCount ], botBstat.node);
			if (botA[pathLenA].subPath[ botA[pathLenA].subPathCount ] == botBstat.node) {
				stopBot("Collision", driver);
				while (botA[pathLenA].subPath[ botA[pathLenA].subPathCount ] == botBstat.node) {
    1a8c:	80 91 75 06 	lds	r24, 0x0675
    1a90:	90 91 76 06 	lds	r25, 0x0676
    1a94:	8c 9d       	mul	r24, r12
    1a96:	d0 01       	movw	r26, r0
    1a98:	8d 9d       	mul	r24, r13
    1a9a:	b0 0d       	add	r27, r0
    1a9c:	9c 9d       	mul	r25, r12
    1a9e:	b0 0d       	add	r27, r0
    1aa0:	11 24       	eor	r1, r1
    1aa2:	a0 5b       	subi	r26, 0xB0	; 176
    1aa4:	b5 4f       	sbci	r27, 0xF5	; 245
    1aa6:	8a 9d       	mul	r24, r10
    1aa8:	f0 01       	movw	r30, r0
    1aaa:	8b 9d       	mul	r24, r11
    1aac:	f0 0d       	add	r31, r0
    1aae:	9a 9d       	mul	r25, r10
    1ab0:	f0 0d       	add	r31, r0
    1ab2:	11 24       	eor	r1, r1
    1ab4:	8d 91       	ld	r24, X+
    1ab6:	9c 91       	ld	r25, X
    1ab8:	e8 0f       	add	r30, r24
    1aba:	f9 1f       	adc	r31, r25
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	e6 50       	subi	r30, 0x06	; 6
    1ac2:	f6 4f       	sbci	r31, 0xF6	; 246
    1ac4:	26 81       	ldd	r18, Z+6	; 0x06
    1ac6:	37 81       	ldd	r19, Z+7	; 0x07
    1ac8:	80 91 ee 09 	lds	r24, 0x09EE
    1acc:	90 91 ef 09 	lds	r25, 0x09EF
    1ad0:	28 17       	cp	r18, r24
    1ad2:	39 07       	cpc	r19, r25
    1ad4:	c1 f2       	breq	.-80     	; 0x1a86 <completePathA+0xdc>
					// 	while (botAstat.ready == 0);
					// 	return 0;
					// }
					updateShareA(str);
				}
				startBot(driver);
    1ad6:	8f 2d       	mov	r24, r15
    1ad8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <startBot>
			}
			botAstat.node = botA[pathLenA].subPath[ botA[pathLenA].subPathCount ];
    1adc:	80 91 75 06 	lds	r24, 0x0675
    1ae0:	90 91 76 06 	lds	r25, 0x0676
    1ae4:	8c 9d       	mul	r24, r12
    1ae6:	d0 01       	movw	r26, r0
    1ae8:	8d 9d       	mul	r24, r13
    1aea:	b0 0d       	add	r27, r0
    1aec:	9c 9d       	mul	r25, r12
    1aee:	b0 0d       	add	r27, r0
    1af0:	11 24       	eor	r1, r1
    1af2:	a0 5b       	subi	r26, 0xB0	; 176
    1af4:	b5 4f       	sbci	r27, 0xF5	; 245
    1af6:	8a 9d       	mul	r24, r10
    1af8:	f0 01       	movw	r30, r0
    1afa:	8b 9d       	mul	r24, r11
    1afc:	f0 0d       	add	r31, r0
    1afe:	9a 9d       	mul	r25, r10
    1b00:	f0 0d       	add	r31, r0
    1b02:	11 24       	eor	r1, r1
    1b04:	8d 91       	ld	r24, X+
    1b06:	9c 91       	ld	r25, X
    1b08:	e8 0f       	add	r30, r24
    1b0a:	f9 1f       	adc	r31, r25
    1b0c:	ee 0f       	add	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	e6 50       	subi	r30, 0x06	; 6
    1b12:	f6 4f       	sbci	r31, 0xF6	; 246
    1b14:	86 81       	ldd	r24, Z+6	; 0x06
    1b16:	97 81       	ldd	r25, Z+7	; 0x07
    1b18:	90 93 f7 09 	sts	0x09F7, r25
    1b1c:	80 93 f6 09 	sts	0x09F6, r24
			updateShareA(str);
    1b20:	ce 01       	movw	r24, r28
    1b22:	0e 94 74 03 	call	0x6e8	; 0x6e8 <updateShareA>
			goFromTo(temp, botAstat.node, driver);
    1b26:	00 91 f6 09 	lds	r16, 0x09F6
    1b2a:	10 91 f7 09 	lds	r17, 0x09F7
void setObstacle(int from, int to) {
	//
}

void goFromTo(int from, int to, char driver) {
	printf("%c Going from %d to %d\n", driver, from, to);
    1b2e:	8d b7       	in	r24, 0x3d	; 61
    1b30:	9e b7       	in	r25, 0x3e	; 62
    1b32:	08 97       	sbiw	r24, 0x08	; 8
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	9e bf       	out	0x3e, r25	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	8d bf       	out	0x3d, r24	; 61
    1b3e:	ed b7       	in	r30, 0x3d	; 61
    1b40:	fe b7       	in	r31, 0x3e	; 62
    1b42:	31 96       	adiw	r30, 0x01	; 1
    1b44:	ad b7       	in	r26, 0x3d	; 61
    1b46:	be b7       	in	r27, 0x3e	; 62
    1b48:	12 96       	adiw	r26, 0x02	; 2
    1b4a:	3c 92       	st	X, r3
    1b4c:	2e 92       	st	-X, r2
    1b4e:	11 97       	sbiw	r26, 0x01	; 1
    1b50:	f2 82       	std	Z+2, r15	; 0x02
    1b52:	13 82       	std	Z+3, r1	; 0x03
    1b54:	95 82       	std	Z+5, r9	; 0x05
    1b56:	84 82       	std	Z+4, r8	; 0x04
    1b58:	17 83       	std	Z+7, r17	; 0x07
    1b5a:	06 83       	std	Z+6, r16	; 0x06
    1b5c:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
	botAstat.node = to;
    1b60:	10 93 f7 09 	sts	0x09F7, r17
    1b64:	00 93 f6 09 	sts	0x09F6, r16
    1b68:	ed b7       	in	r30, 0x3d	; 61
    1b6a:	fe b7       	in	r31, 0x3e	; 62
    1b6c:	38 96       	adiw	r30, 0x08	; 8
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	fe bf       	out	0x3e, r31	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	ed bf       	out	0x3d, r30	; 61
int completePathA(char driver, char str[]) {
	int temp;
	startBot(driver);
	while (pathLenA > 0) {
		pathLenA--;
		while (botA[pathLenA].subPathCount > 0) {
    1b78:	20 91 75 06 	lds	r18, 0x0675
    1b7c:	30 91 76 06 	lds	r19, 0x0676
    1b80:	2c 9d       	mul	r18, r12
    1b82:	f0 01       	movw	r30, r0
    1b84:	2d 9d       	mul	r18, r13
    1b86:	f0 0d       	add	r31, r0
    1b88:	3c 9d       	mul	r19, r12
    1b8a:	f0 0d       	add	r31, r0
    1b8c:	11 24       	eor	r1, r1
    1b8e:	e0 5b       	subi	r30, 0xB0	; 176
    1b90:	f5 4f       	sbci	r31, 0xF5	; 245
    1b92:	80 81       	ld	r24, Z
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	18 16       	cp	r1, r24
    1b98:	19 06       	cpc	r1, r25
    1b9a:	0c f4       	brge	.+2      	; 0x1b9e <completePathA+0x1f4>
    1b9c:	35 cf       	rjmp	.-406    	; 0x1a08 <completePathA+0x5e>
    1b9e:	03 c0       	rjmp	.+6      	; 0x1ba6 <completePathA+0x1fc>
			// 	stopBot("Obstacle", driver);
			// 	botBstat.ready = 0;
			// 	while (botAstat.ready == 0);
			// 	return 0;
			// }
			updateShareA(str);
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <updateShareA>
			}
			botAstat.node = botA[pathLenA].subPath[ botA[pathLenA].subPathCount ];
			updateShareA(str);
			goFromTo(temp, botAstat.node, driver);
		}
		while (botA[pathLenA].note != notes[noteCount-1]) {
    1ba6:	80 91 75 06 	lds	r24, 0x0675
    1baa:	90 91 76 06 	lds	r25, 0x0676
    1bae:	8c 9d       	mul	r24, r12
    1bb0:	f0 01       	movw	r30, r0
    1bb2:	8d 9d       	mul	r24, r13
    1bb4:	f0 0d       	add	r31, r0
    1bb6:	9c 9d       	mul	r25, r12
    1bb8:	f0 0d       	add	r31, r0
    1bba:	11 24       	eor	r1, r1
    1bbc:	e6 50       	subi	r30, 0x06	; 6
    1bbe:	f6 4f       	sbci	r31, 0xF6	; 246
    1bc0:	22 81       	ldd	r18, Z+2	; 0x02
    1bc2:	33 81       	ldd	r19, Z+3	; 0x03
    1bc4:	e0 91 9f 03 	lds	r30, 0x039F
    1bc8:	f0 91 a0 03 	lds	r31, 0x03A0
    1bcc:	ee 0f       	add	r30, r30
    1bce:	ff 1f       	adc	r31, r31
    1bd0:	e7 57       	subi	r30, 0x77	; 119
    1bd2:	fc 4f       	sbci	r31, 0xFC	; 252
    1bd4:	80 81       	ld	r24, Z
    1bd6:	91 81       	ldd	r25, Z+1	; 0x01
    1bd8:	28 17       	cp	r18, r24
    1bda:	39 07       	cpc	r19, r25
    1bdc:	09 f7       	brne	.-62     	; 0x1ba0 <completePathA+0x1f6>
			// 	while (botAstat.ready == 0);
			// 	return 0;
			// }
			updateShareA(str);
		}
		printf("A played %d\n", notes[noteCount-1]);
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <completePathA+0x236>
    1be0:	0f 92       	push	r0
    1be2:	ad b7       	in	r26, 0x3d	; 61
    1be4:	be b7       	in	r27, 0x3e	; 62
    1be6:	12 96       	adiw	r26, 0x02	; 2
    1be8:	5c 92       	st	X, r5
    1bea:	4e 92       	st	-X, r4
    1bec:	11 97       	sbiw	r26, 0x01	; 1
    1bee:	14 96       	adiw	r26, 0x04	; 4
    1bf0:	3c 93       	st	X, r19
    1bf2:	2e 93       	st	-X, r18
    1bf4:	13 97       	sbiw	r26, 0x03	; 3
    1bf6:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		noteCount--;
    1bfa:	80 91 9f 03 	lds	r24, 0x039F
    1bfe:	90 91 a0 03 	lds	r25, 0x03A0
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	90 93 a0 03 	sts	0x03A0, r25
    1c08:	80 93 9f 03 	sts	0x039F, r24
		playNote(driver);
		str[2]++;
    1c0c:	f3 01       	movw	r30, r6
    1c0e:	80 81       	ld	r24, Z
    1c10:	8f 5f       	subi	r24, 0xFF	; 255
    1c12:	80 83       	st	Z, r24
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
#include "botFunctions.h"

int completePathA(char driver, char str[]) {
	int temp;
	startBot(driver);
	while (pathLenA > 0) {
    1c1c:	80 91 75 06 	lds	r24, 0x0675
    1c20:	90 91 76 06 	lds	r25, 0x0676
    1c24:	18 16       	cp	r1, r24
    1c26:	19 06       	cpc	r1, r25
    1c28:	0c f4       	brge	.+2      	; 0x1c2c <completePathA+0x282>
    1c2a:	e8 ce       	rjmp	.-560    	; 0x19fc <completePathA+0x52>
		printf("A played %d\n", notes[noteCount-1]);
		noteCount--;
		playNote(driver);
		str[2]++;
	}
	botAstat.ready = 2;
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	90 93 f5 09 	sts	0x09F5, r25
    1c34:	80 93 f4 09 	sts	0x09F4, r24
	moveForward();
//	sleep(1);
}

void stopBot(char reason[], char driver) {
	printf("%c Bot stopped, reason: %s\n", driver, reason);
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <completePathA+0x290>
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <completePathA+0x292>
    1c3c:	ed b7       	in	r30, 0x3d	; 61
    1c3e:	fe b7       	in	r31, 0x3e	; 62
    1c40:	31 96       	adiw	r30, 0x01	; 1
    1c42:	88 e1       	ldi	r24, 0x18	; 24
    1c44:	92 e0       	ldi	r25, 0x02	; 2
    1c46:	ad b7       	in	r26, 0x3d	; 61
    1c48:	be b7       	in	r27, 0x3e	; 62
    1c4a:	12 96       	adiw	r26, 0x02	; 2
    1c4c:	9c 93       	st	X, r25
    1c4e:	8e 93       	st	-X, r24
    1c50:	11 97       	sbiw	r26, 0x01	; 1
    1c52:	f2 82       	std	Z+2, r15	; 0x02
    1c54:	13 82       	std	Z+3, r1	; 0x03
    1c56:	85 e9       	ldi	r24, 0x95	; 149
    1c58:	92 e0       	ldi	r25, 0x02	; 2
    1c5a:	95 83       	std	Z+5, r25	; 0x05
    1c5c:	84 83       	std	Z+4, r24	; 0x04
    1c5e:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
*/

void motionSet (unsigned char Direction) {
	unsigned char PortARestore = 0;
	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    1c62:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1c64:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore; 		// executing the command
    1c66:	82 b9       	out	0x02, r24	; 2
    1c68:	ed b7       	in	r30, 0x3d	; 61
    1c6a:	fe b7       	in	r31, 0x3e	; 62
    1c6c:	36 96       	adiw	r30, 0x06	; 6
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	fe bf       	out	0x3e, r31	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	ed bf       	out	0x3d, r30	; 61
	stopBot("Completed", driver);
	return 1;
}
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	ff 90       	pop	r15
    1c86:	df 90       	pop	r13
    1c88:	cf 90       	pop	r12
    1c8a:	bf 90       	pop	r11
    1c8c:	af 90       	pop	r10
    1c8e:	9f 90       	pop	r9
    1c90:	8f 90       	pop	r8
    1c92:	7f 90       	pop	r7
    1c94:	6f 90       	pop	r6
    1c96:	5f 90       	pop	r5
    1c98:	4f 90       	pop	r4
    1c9a:	3f 90       	pop	r3
    1c9c:	2f 90       	pop	r2
    1c9e:	08 95       	ret

00001ca0 <Sharp_dist>:

unsigned int Sharp_dist(unsigned char adc_reading)
{
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a0 e0       	ldi	r26, 0x00	; 0
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	0e 94 1d 13 	call	0x263a	; 0x263a <__floatunsisf>
    1cae:	2f ee       	ldi	r18, 0xEF	; 239
    1cb0:	39 ec       	ldi	r19, 0xC9	; 201
    1cb2:	43 e9       	ldi	r20, 0x93	; 147
    1cb4:	5f e3       	ldi	r21, 0x3F	; 63
    1cb6:	0e 94 0e 14 	call	0x281c	; 0x281c <pow>
    1cba:	9b 01       	movw	r18, r22
    1cbc:	ac 01       	movw	r20, r24
	distanceInt = (int)distance;
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	80 e8       	ldi	r24, 0x80	; 128
    1cc4:	9f e3       	ldi	r25, 0x3F	; 63
    1cc6:	0e 94 84 12 	call	0x2508	; 0x2508 <__divsf3>
    1cca:	2a e9       	ldi	r18, 0x9A	; 154
    1ccc:	39 ef       	ldi	r19, 0xF9	; 249
    1cce:	4e e2       	ldi	r20, 0x2E	; 46
    1cd0:	55 e4       	ldi	r21, 0x45	; 69
    1cd2:	0e 94 ab 13 	call	0x2756	; 0x2756 <__mulsf3>
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e2       	ldi	r20, 0x20	; 32
    1cdc:	51 e4       	ldi	r21, 0x41	; 65
    1cde:	0e 94 ab 13 	call	0x2756	; 0x2756 <__mulsf3>
    1ce2:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixsfsi>
    1ce6:	88 27       	eor	r24, r24
    1ce8:	77 fd       	sbrc	r23, 7
    1cea:	80 95       	com	r24
    1cec:	98 2f       	mov	r25, r24
    1cee:	0e 94 1f 13 	call	0x263e	; 0x263e <__floatsisf>
    1cf2:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fixsfsi>
    1cf6:	9b 01       	movw	r18, r22
    1cf8:	83 e0       	ldi	r24, 0x03	; 3
    1cfa:	61 32       	cpi	r22, 0x21	; 33
    1cfc:	78 07       	cpc	r23, r24
    1cfe:	10 f0       	brcs	.+4      	; 0x1d04 <Sharp_dist+0x64>
    1d00:	20 e2       	ldi	r18, 0x20	; 32
    1d02:	33 e0       	ldi	r19, 0x03	; 3
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
}
    1d04:	c9 01       	movw	r24, r18
    1d06:	08 95       	ret

00001d08 <testPrintValues>:
void testPrintValues() {
    1d08:	2f 92       	push	r2
    1d0a:	3f 92       	push	r3
    1d0c:	4f 92       	push	r4
    1d0e:	5f 92       	push	r5
    1d10:	6f 92       	push	r6
    1d12:	7f 92       	push	r7
    1d14:	8f 92       	push	r8
    1d16:	9f 92       	push	r9
    1d18:	af 92       	push	r10
    1d1a:	bf 92       	push	r11
    1d1c:	cf 92       	push	r12
    1d1e:	df 92       	push	r13
    1d20:	ef 92       	push	r14
    1d22:	ff 92       	push	r15
    1d24:	0f 93       	push	r16
    1d26:	1f 93       	push	r17
    1d28:	cf 93       	push	r28
    1d2a:	df 93       	push	r29
	int i, j;
	printf("Nodes array:\n");
    1d2c:	8c ea       	ldi	r24, 0xAC	; 172
    1d2e:	92 e0       	ldi	r25, 0x02	; 2
    1d30:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <puts>
    1d34:	2c e6       	ldi	r18, 0x6C	; 108
    1d36:	e2 2e       	mov	r14, r18
    1d38:	2d e0       	ldi	r18, 0x0D	; 13
    1d3a:	f2 2e       	mov	r15, r18
    1d3c:	cc 24       	eor	r12, r12
    1d3e:	dd 24       	eor	r13, r13
	for (i = 0; i < 49; i++) {
		printf("\tIndex %d:\n", i);
		printf("\t\tx: %d\n", nodes[i].x);
    1d40:	95 ec       	ldi	r25, 0xC5	; 197
    1d42:	29 2e       	mov	r2, r25
    1d44:	92 e0       	ldi	r25, 0x02	; 2
    1d46:	39 2e       	mov	r3, r25
		printf("\t\ty: %d\n", nodes[i].y);
    1d48:	8e ec       	ldi	r24, 0xCE	; 206
    1d4a:	48 2e       	mov	r4, r24
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	58 2e       	mov	r5, r24
		printf("\t\tedge Count: %d\n", nodes[i].edgeCount);
    1d50:	07 ed       	ldi	r16, 0xD7	; 215
    1d52:	60 2e       	mov	r6, r16
    1d54:	02 e0       	ldi	r16, 0x02	; 2
    1d56:	70 2e       	mov	r7, r16
		printf("\t\tedge Indices:");
    1d58:	19 ee       	ldi	r17, 0xE9	; 233
    1d5a:	81 2e       	mov	r8, r17
    1d5c:	12 e0       	ldi	r17, 0x02	; 2
    1d5e:	91 2e       	mov	r9, r17
		for (j = 0; j < nodes[i].edgeCount; j++) {
			printf(" %d", nodes[i].edgeIndices[j]);
    1d60:	b9 ef       	ldi	r27, 0xF9	; 249
    1d62:	ab 2e       	mov	r10, r27
    1d64:	b2 e0       	ldi	r27, 0x02	; 2
    1d66:	bb 2e       	mov	r11, r27
void testPrintValues() {
	int i, j;
	printf("Nodes array:\n");
	for (i = 0; i < 49; i++) {
		printf("\tIndex %d:\n", i);
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <testPrintValues+0x62>
    1d6a:	0f 92       	push	r0
    1d6c:	89 eb       	ldi	r24, 0xB9	; 185
    1d6e:	92 e0       	ldi	r25, 0x02	; 2
    1d70:	ed b7       	in	r30, 0x3d	; 61
    1d72:	fe b7       	in	r31, 0x3e	; 62
    1d74:	92 83       	std	Z+2, r25	; 0x02
    1d76:	81 83       	std	Z+1, r24	; 0x01
    1d78:	d4 82       	std	Z+4, r13	; 0x04
    1d7a:	c3 82       	std	Z+3, r12	; 0x03
    1d7c:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		printf("\t\tx: %d\n", nodes[i].x);
    1d80:	ed b7       	in	r30, 0x3d	; 61
    1d82:	fe b7       	in	r31, 0x3e	; 62
    1d84:	32 82       	std	Z+2, r3	; 0x02
    1d86:	21 82       	std	Z+1, r2	; 0x01
    1d88:	f7 01       	movw	r30, r14
    1d8a:	80 81       	ld	r24, Z
    1d8c:	91 81       	ldd	r25, Z+1	; 0x01
    1d8e:	ed b7       	in	r30, 0x3d	; 61
    1d90:	fe b7       	in	r31, 0x3e	; 62
    1d92:	94 83       	std	Z+4, r25	; 0x04
    1d94:	83 83       	std	Z+3, r24	; 0x03
    1d96:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		printf("\t\ty: %d\n", nodes[i].y);
    1d9a:	ed b7       	in	r30, 0x3d	; 61
    1d9c:	fe b7       	in	r31, 0x3e	; 62
    1d9e:	52 82       	std	Z+2, r5	; 0x02
    1da0:	41 82       	std	Z+1, r4	; 0x01
    1da2:	f7 01       	movw	r30, r14
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	ed b7       	in	r30, 0x3d	; 61
    1daa:	fe b7       	in	r31, 0x3e	; 62
    1dac:	94 83       	std	Z+4, r25	; 0x04
    1dae:	83 83       	std	Z+3, r24	; 0x03
    1db0:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		printf("\t\tedge Count: %d\n", nodes[i].edgeCount);
    1db4:	ed b7       	in	r30, 0x3d	; 61
    1db6:	fe b7       	in	r31, 0x3e	; 62
    1db8:	72 82       	std	Z+2, r7	; 0x02
    1dba:	61 82       	std	Z+1, r6	; 0x01
    1dbc:	f7 01       	movw	r30, r14
    1dbe:	84 81       	ldd	r24, Z+4	; 0x04
    1dc0:	95 81       	ldd	r25, Z+5	; 0x05
    1dc2:	ed b7       	in	r30, 0x3d	; 61
    1dc4:	fe b7       	in	r31, 0x3e	; 62
    1dc6:	94 83       	std	Z+4, r25	; 0x04
    1dc8:	83 83       	std	Z+3, r24	; 0x03
    1dca:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		printf("\t\tedge Indices:");
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	ed b7       	in	r30, 0x3d	; 61
    1dd4:	fe b7       	in	r31, 0x3e	; 62
    1dd6:	92 82       	std	Z+2, r9	; 0x02
    1dd8:	81 82       	std	Z+1, r8	; 0x01
    1dda:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
    1dde:	c6 01       	movw	r24, r12
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	ec 01       	movw	r28, r24
    1de6:	f3 e0       	ldi	r31, 0x03	; 3
    1de8:	cc 0f       	add	r28, r28
    1dea:	dd 1f       	adc	r29, r29
    1dec:	fa 95       	dec	r31
    1dee:	e1 f7       	brne	.-8      	; 0x1de8 <testPrintValues+0xe0>
    1df0:	c8 0f       	add	r28, r24
    1df2:	d9 1f       	adc	r29, r25
    1df4:	ce 58       	subi	r28, 0x8E	; 142
    1df6:	d2 4f       	sbci	r29, 0xF2	; 242
    1df8:	00 e0       	ldi	r16, 0x00	; 0
    1dfa:	10 e0       	ldi	r17, 0x00	; 0
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	12 c0       	rjmp	.+36     	; 0x1e26 <testPrintValues+0x11e>
		for (j = 0; j < nodes[i].edgeCount; j++) {
			printf(" %d", nodes[i].edgeIndices[j]);
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <testPrintValues+0xfc>
    1e04:	0f 92       	push	r0
    1e06:	ed b7       	in	r30, 0x3d	; 61
    1e08:	fe b7       	in	r31, 0x3e	; 62
    1e0a:	b2 82       	std	Z+2, r11	; 0x02
    1e0c:	a1 82       	std	Z+1, r10	; 0x01
    1e0e:	89 91       	ld	r24, Y+
    1e10:	99 91       	ld	r25, Y+
    1e12:	94 83       	std	Z+4, r25	; 0x04
    1e14:	83 83       	std	Z+3, r24	; 0x03
    1e16:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		printf("\tIndex %d:\n", i);
		printf("\t\tx: %d\n", nodes[i].x);
		printf("\t\ty: %d\n", nodes[i].y);
		printf("\t\tedge Count: %d\n", nodes[i].edgeCount);
		printf("\t\tedge Indices:");
		for (j = 0; j < nodes[i].edgeCount; j++) {
    1e1a:	0f 5f       	subi	r16, 0xFF	; 255
    1e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	f7 01       	movw	r30, r14
    1e28:	84 81       	ldd	r24, Z+4	; 0x04
    1e2a:	95 81       	ldd	r25, Z+5	; 0x05
    1e2c:	08 17       	cp	r16, r24
    1e2e:	19 07       	cpc	r17, r25
    1e30:	44 f3       	brlt	.-48     	; 0x1e02 <testPrintValues+0xfa>
			printf(" %d", nodes[i].edgeIndices[j]);
		}
		printf("\n\n");
    1e32:	8d ef       	ldi	r24, 0xFD	; 253
    1e34:	92 e0       	ldi	r25, 0x02	; 2
    1e36:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <puts>
void testPrintValues() {
	int i, j;
	printf("Nodes array:\n");
	for (i = 0; i < 49; i++) {
    1e3a:	08 94       	sec
    1e3c:	c1 1c       	adc	r12, r1
    1e3e:	d1 1c       	adc	r13, r1
    1e40:	82 e1       	ldi	r24, 0x12	; 18
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	e8 0e       	add	r14, r24
    1e46:	f9 1e       	adc	r15, r25
    1e48:	91 e3       	ldi	r25, 0x31	; 49
    1e4a:	c9 16       	cp	r12, r25
    1e4c:	d1 04       	cpc	r13, r1
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <testPrintValues+0x14a>
    1e50:	8b cf       	rjmp	.-234    	; 0x1d68 <testPrintValues+0x60>
		for (j = 0; j < nodes[i].edgeCount; j++) {
			printf(" %d", nodes[i].edgeIndices[j]);
		}
		printf("\n\n");
	}
	printf("Edges array:\n");
    1e52:	8f ef       	ldi	r24, 0xFF	; 255
    1e54:	92 e0       	ldi	r25, 0x02	; 2
    1e56:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <puts>
    1e5a:	c7 e7       	ldi	r28, 0x77	; 119
    1e5c:	d6 e0       	ldi	r29, 0x06	; 6
    1e5e:	00 e0       	ldi	r16, 0x00	; 0
    1e60:	10 e0       	ldi	r17, 0x00	; 0
	for (i = 0; i < 63; i++) {
		printf("\tIndex %d:\n", i);
		printf("\t\tStart: %d\n", edgeList[i].start);
    1e62:	ec e0       	ldi	r30, 0x0C	; 12
    1e64:	2e 2e       	mov	r2, r30
    1e66:	e3 e0       	ldi	r30, 0x03	; 3
    1e68:	3e 2e       	mov	r3, r30
		printf("\t\tEnd: %d\n", edgeList[i].end);
    1e6a:	79 e1       	ldi	r23, 0x19	; 25
    1e6c:	47 2e       	mov	r4, r23
    1e6e:	73 e0       	ldi	r23, 0x03	; 3
    1e70:	57 2e       	mov	r5, r23
		printf("\t\tObstacle: %d\n", edgeList[i].obstacle);
    1e72:	64 e2       	ldi	r22, 0x24	; 36
    1e74:	66 2e       	mov	r6, r22
    1e76:	63 e0       	ldi	r22, 0x03	; 3
    1e78:	76 2e       	mov	r7, r22
		printf("\t\tStart Compass: %d\n", edgeList[i].startCompass);
    1e7a:	54 e3       	ldi	r21, 0x34	; 52
    1e7c:	85 2e       	mov	r8, r21
    1e7e:	53 e0       	ldi	r21, 0x03	; 3
    1e80:	95 2e       	mov	r9, r21
		printf("\t\tLeft Speed Ratio: %d\n", edgeList[i].leftSpeedRatio);
    1e82:	49 e4       	ldi	r20, 0x49	; 73
    1e84:	a4 2e       	mov	r10, r20
    1e86:	43 e0       	ldi	r20, 0x03	; 3
    1e88:	b4 2e       	mov	r11, r20
		printf("\t\tRight Speed Ratio: %d\n", edgeList[i].rightSpeedRatio);
    1e8a:	31 e6       	ldi	r19, 0x61	; 97
    1e8c:	c3 2e       	mov	r12, r19
    1e8e:	33 e0       	ldi	r19, 0x03	; 3
    1e90:	d3 2e       	mov	r13, r19
		printf("\t\tDistance: %d\n\n", edgeList[i].distance);
    1e92:	2a e7       	ldi	r18, 0x7A	; 122
    1e94:	e2 2e       	mov	r14, r18
    1e96:	23 e0       	ldi	r18, 0x03	; 3
    1e98:	f2 2e       	mov	r15, r18
		}
		printf("\n\n");
	}
	printf("Edges array:\n");
	for (i = 0; i < 63; i++) {
		printf("\tIndex %d:\n", i);
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <testPrintValues+0x194>
    1e9c:	0f 92       	push	r0
    1e9e:	89 eb       	ldi	r24, 0xB9	; 185
    1ea0:	92 e0       	ldi	r25, 0x02	; 2
    1ea2:	ed b7       	in	r30, 0x3d	; 61
    1ea4:	fe b7       	in	r31, 0x3e	; 62
    1ea6:	92 83       	std	Z+2, r25	; 0x02
    1ea8:	81 83       	std	Z+1, r24	; 0x01
    1eaa:	14 83       	std	Z+4, r17	; 0x04
    1eac:	03 83       	std	Z+3, r16	; 0x03
    1eae:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		printf("\t\tStart: %d\n", edgeList[i].start);
    1eb2:	ed b7       	in	r30, 0x3d	; 61
    1eb4:	fe b7       	in	r31, 0x3e	; 62
    1eb6:	32 82       	std	Z+2, r3	; 0x02
    1eb8:	21 82       	std	Z+1, r2	; 0x01
    1eba:	88 81       	ld	r24, Y
    1ebc:	99 81       	ldd	r25, Y+1	; 0x01
    1ebe:	94 83       	std	Z+4, r25	; 0x04
    1ec0:	83 83       	std	Z+3, r24	; 0x03
    1ec2:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		printf("\t\tEnd: %d\n", edgeList[i].end);
    1ec6:	ed b7       	in	r30, 0x3d	; 61
    1ec8:	fe b7       	in	r31, 0x3e	; 62
    1eca:	52 82       	std	Z+2, r5	; 0x02
    1ecc:	41 82       	std	Z+1, r4	; 0x01
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed2:	94 83       	std	Z+4, r25	; 0x04
    1ed4:	83 83       	std	Z+3, r24	; 0x03
    1ed6:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		printf("\t\tObstacle: %d\n", edgeList[i].obstacle);
    1eda:	ed b7       	in	r30, 0x3d	; 61
    1edc:	fe b7       	in	r31, 0x3e	; 62
    1ede:	72 82       	std	Z+2, r7	; 0x02
    1ee0:	61 82       	std	Z+1, r6	; 0x01
    1ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee6:	94 83       	std	Z+4, r25	; 0x04
    1ee8:	83 83       	std	Z+3, r24	; 0x03
    1eea:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		printf("\t\tStart Compass: %d\n", edgeList[i].startCompass);
    1eee:	ed b7       	in	r30, 0x3d	; 61
    1ef0:	fe b7       	in	r31, 0x3e	; 62
    1ef2:	92 82       	std	Z+2, r9	; 0x02
    1ef4:	81 82       	std	Z+1, r8	; 0x01
    1ef6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef8:	9f 81       	ldd	r25, Y+7	; 0x07
    1efa:	94 83       	std	Z+4, r25	; 0x04
    1efc:	83 83       	std	Z+3, r24	; 0x03
    1efe:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		printf("\t\tLeft Speed Ratio: %d\n", edgeList[i].leftSpeedRatio);
    1f02:	ed b7       	in	r30, 0x3d	; 61
    1f04:	fe b7       	in	r31, 0x3e	; 62
    1f06:	b2 82       	std	Z+2, r11	; 0x02
    1f08:	a1 82       	std	Z+1, r10	; 0x01
    1f0a:	88 85       	ldd	r24, Y+8	; 0x08
    1f0c:	99 85       	ldd	r25, Y+9	; 0x09
    1f0e:	94 83       	std	Z+4, r25	; 0x04
    1f10:	83 83       	std	Z+3, r24	; 0x03
    1f12:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		printf("\t\tRight Speed Ratio: %d\n", edgeList[i].rightSpeedRatio);
    1f16:	ed b7       	in	r30, 0x3d	; 61
    1f18:	fe b7       	in	r31, 0x3e	; 62
    1f1a:	d2 82       	std	Z+2, r13	; 0x02
    1f1c:	c1 82       	std	Z+1, r12	; 0x01
    1f1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f20:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f22:	94 83       	std	Z+4, r25	; 0x04
    1f24:	83 83       	std	Z+3, r24	; 0x03
    1f26:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
		printf("\t\tDistance: %d\n\n", edgeList[i].distance);
    1f2a:	ed b7       	in	r30, 0x3d	; 61
    1f2c:	fe b7       	in	r31, 0x3e	; 62
    1f2e:	f2 82       	std	Z+2, r15	; 0x02
    1f30:	e1 82       	std	Z+1, r14	; 0x01
    1f32:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f34:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f36:	94 83       	std	Z+4, r25	; 0x04
    1f38:	83 83       	std	Z+3, r24	; 0x03
    1f3a:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <printf>
			printf(" %d", nodes[i].edgeIndices[j]);
		}
		printf("\n\n");
	}
	printf("Edges array:\n");
	for (i = 0; i < 63; i++) {
    1f3e:	0f 5f       	subi	r16, 0xFF	; 255
    1f40:	1f 4f       	sbci	r17, 0xFF	; 255
    1f42:	2e 96       	adiw	r28, 0x0e	; 14
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 33       	cpi	r16, 0x3F	; 63
    1f4e:	11 05       	cpc	r17, r1
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <testPrintValues+0x24c>
    1f52:	a3 cf       	rjmp	.-186    	; 0x1e9a <testPrintValues+0x192>
		printf("\t\tStart Compass: %d\n", edgeList[i].startCompass);
		printf("\t\tLeft Speed Ratio: %d\n", edgeList[i].leftSpeedRatio);
		printf("\t\tRight Speed Ratio: %d\n", edgeList[i].rightSpeedRatio);
		printf("\t\tDistance: %d\n\n", edgeList[i].distance);
	}
    1f54:	df 91       	pop	r29
    1f56:	cf 91       	pop	r28
    1f58:	1f 91       	pop	r17
    1f5a:	0f 91       	pop	r16
    1f5c:	ff 90       	pop	r15
    1f5e:	ef 90       	pop	r14
    1f60:	df 90       	pop	r13
    1f62:	cf 90       	pop	r12
    1f64:	bf 90       	pop	r11
    1f66:	af 90       	pop	r10
    1f68:	9f 90       	pop	r9
    1f6a:	8f 90       	pop	r8
    1f6c:	7f 90       	pop	r7
    1f6e:	6f 90       	pop	r6
    1f70:	5f 90       	pop	r5
    1f72:	4f 90       	pop	r4
    1f74:	3f 90       	pop	r3
    1f76:	2f 90       	pop	r2
    1f78:	08 95       	ret

00001f7a <printf>:
    1f7a:	a0 e0       	ldi	r26, 0x00	; 0
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e3 ec       	ldi	r30, 0xC3	; 195
    1f80:	ff e0       	ldi	r31, 0x0F	; 15
    1f82:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__prologue_saves__+0x20>
    1f86:	fe 01       	movw	r30, r28
    1f88:	36 96       	adiw	r30, 0x06	; 6
    1f8a:	61 91       	ld	r22, Z+
    1f8c:	71 91       	ld	r23, Z+
    1f8e:	80 91 5a 14 	lds	r24, 0x145A
    1f92:	90 91 5b 14 	lds	r25, 0x145B
    1f96:	af 01       	movw	r20, r30
    1f98:	0e 94 07 10 	call	0x200e	; 0x200e <vfprintf>
    1f9c:	20 96       	adiw	r28, 0x00	; 0
    1f9e:	e2 e0       	ldi	r30, 0x02	; 2
    1fa0:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__epilogue_restores__+0x20>

00001fa4 <puts>:
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	8c 01       	movw	r16, r24
    1fae:	e0 91 5a 14 	lds	r30, 0x145A
    1fb2:	f0 91 5b 14 	lds	r31, 0x145B
    1fb6:	83 81       	ldd	r24, Z+3	; 0x03
    1fb8:	81 ff       	sbrs	r24, 1
    1fba:	21 c0       	rjmp	.+66     	; 0x1ffe <puts+0x5a>
    1fbc:	c0 e0       	ldi	r28, 0x00	; 0
    1fbe:	d0 e0       	ldi	r29, 0x00	; 0
    1fc0:	0d c0       	rjmp	.+26     	; 0x1fdc <puts+0x38>
    1fc2:	e0 91 5a 14 	lds	r30, 0x145A
    1fc6:	f0 91 5b 14 	lds	r31, 0x145B
    1fca:	20 85       	ldd	r18, Z+8	; 0x08
    1fcc:	31 85       	ldd	r19, Z+9	; 0x09
    1fce:	bf 01       	movw	r22, r30
    1fd0:	f9 01       	movw	r30, r18
    1fd2:	19 95       	eicall
    1fd4:	89 2b       	or	r24, r25
    1fd6:	11 f0       	breq	.+4      	; 0x1fdc <puts+0x38>
    1fd8:	cf ef       	ldi	r28, 0xFF	; 255
    1fda:	df ef       	ldi	r29, 0xFF	; 255
    1fdc:	f8 01       	movw	r30, r16
    1fde:	81 91       	ld	r24, Z+
    1fe0:	8f 01       	movw	r16, r30
    1fe2:	88 23       	and	r24, r24
    1fe4:	71 f7       	brne	.-36     	; 0x1fc2 <puts+0x1e>
    1fe6:	e0 91 5a 14 	lds	r30, 0x145A
    1fea:	f0 91 5b 14 	lds	r31, 0x145B
    1fee:	20 85       	ldd	r18, Z+8	; 0x08
    1ff0:	31 85       	ldd	r19, Z+9	; 0x09
    1ff2:	8a e0       	ldi	r24, 0x0A	; 10
    1ff4:	bf 01       	movw	r22, r30
    1ff6:	f9 01       	movw	r30, r18
    1ff8:	19 95       	eicall
    1ffa:	89 2b       	or	r24, r25
    1ffc:	11 f0       	breq	.+4      	; 0x2002 <puts+0x5e>
    1ffe:	cf ef       	ldi	r28, 0xFF	; 255
    2000:	df ef       	ldi	r29, 0xFF	; 255
    2002:	ce 01       	movw	r24, r28
    2004:	df 91       	pop	r29
    2006:	cf 91       	pop	r28
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	08 95       	ret

0000200e <vfprintf>:
    200e:	ab e0       	ldi	r26, 0x0B	; 11
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	ed e0       	ldi	r30, 0x0D	; 13
    2014:	f0 e1       	ldi	r31, 0x10	; 16
    2016:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <__prologue_saves__>
    201a:	3c 01       	movw	r6, r24
    201c:	2b 01       	movw	r4, r22
    201e:	5a 01       	movw	r10, r20
    2020:	fc 01       	movw	r30, r24
    2022:	17 82       	std	Z+7, r1	; 0x07
    2024:	16 82       	std	Z+6, r1	; 0x06
    2026:	83 81       	ldd	r24, Z+3	; 0x03
    2028:	81 fd       	sbrc	r24, 1
    202a:	03 c0       	rjmp	.+6      	; 0x2032 <vfprintf+0x24>
    202c:	6f ef       	ldi	r22, 0xFF	; 255
    202e:	7f ef       	ldi	r23, 0xFF	; 255
    2030:	c6 c1       	rjmp	.+908    	; 0x23be <__stack+0x1bf>
    2032:	9a e0       	ldi	r25, 0x0A	; 10
    2034:	89 2e       	mov	r8, r25
    2036:	1e 01       	movw	r2, r28
    2038:	08 94       	sec
    203a:	21 1c       	adc	r2, r1
    203c:	31 1c       	adc	r3, r1
    203e:	f3 01       	movw	r30, r6
    2040:	23 81       	ldd	r18, Z+3	; 0x03
    2042:	f2 01       	movw	r30, r4
    2044:	23 fd       	sbrc	r18, 3
    2046:	85 91       	lpm	r24, Z+
    2048:	23 ff       	sbrs	r18, 3
    204a:	81 91       	ld	r24, Z+
    204c:	2f 01       	movw	r4, r30
    204e:	88 23       	and	r24, r24
    2050:	09 f4       	brne	.+2      	; 0x2054 <vfprintf+0x46>
    2052:	b2 c1       	rjmp	.+868    	; 0x23b8 <__stack+0x1b9>
    2054:	85 32       	cpi	r24, 0x25	; 37
    2056:	39 f4       	brne	.+14     	; 0x2066 <vfprintf+0x58>
    2058:	23 fd       	sbrc	r18, 3
    205a:	85 91       	lpm	r24, Z+
    205c:	23 ff       	sbrs	r18, 3
    205e:	81 91       	ld	r24, Z+
    2060:	2f 01       	movw	r4, r30
    2062:	85 32       	cpi	r24, 0x25	; 37
    2064:	29 f4       	brne	.+10     	; 0x2070 <vfprintf+0x62>
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	b3 01       	movw	r22, r6
    206a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <fputc>
    206e:	e7 cf       	rjmp	.-50     	; 0x203e <vfprintf+0x30>
    2070:	98 2f       	mov	r25, r24
    2072:	ff 24       	eor	r15, r15
    2074:	ee 24       	eor	r14, r14
    2076:	99 24       	eor	r9, r9
    2078:	ff e1       	ldi	r31, 0x1F	; 31
    207a:	ff 15       	cp	r31, r15
    207c:	d0 f0       	brcs	.+52     	; 0x20b2 <vfprintf+0xa4>
    207e:	9b 32       	cpi	r25, 0x2B	; 43
    2080:	69 f0       	breq	.+26     	; 0x209c <vfprintf+0x8e>
    2082:	9c 32       	cpi	r25, 0x2C	; 44
    2084:	28 f4       	brcc	.+10     	; 0x2090 <vfprintf+0x82>
    2086:	90 32       	cpi	r25, 0x20	; 32
    2088:	59 f0       	breq	.+22     	; 0x20a0 <vfprintf+0x92>
    208a:	93 32       	cpi	r25, 0x23	; 35
    208c:	91 f4       	brne	.+36     	; 0x20b2 <vfprintf+0xa4>
    208e:	0e c0       	rjmp	.+28     	; 0x20ac <vfprintf+0x9e>
    2090:	9d 32       	cpi	r25, 0x2D	; 45
    2092:	49 f0       	breq	.+18     	; 0x20a6 <vfprintf+0x98>
    2094:	90 33       	cpi	r25, 0x30	; 48
    2096:	69 f4       	brne	.+26     	; 0x20b2 <vfprintf+0xa4>
    2098:	41 e0       	ldi	r20, 0x01	; 1
    209a:	24 c0       	rjmp	.+72     	; 0x20e4 <vfprintf+0xd6>
    209c:	52 e0       	ldi	r21, 0x02	; 2
    209e:	f5 2a       	or	r15, r21
    20a0:	84 e0       	ldi	r24, 0x04	; 4
    20a2:	f8 2a       	or	r15, r24
    20a4:	28 c0       	rjmp	.+80     	; 0x20f6 <vfprintf+0xe8>
    20a6:	98 e0       	ldi	r25, 0x08	; 8
    20a8:	f9 2a       	or	r15, r25
    20aa:	25 c0       	rjmp	.+74     	; 0x20f6 <vfprintf+0xe8>
    20ac:	e0 e1       	ldi	r30, 0x10	; 16
    20ae:	fe 2a       	or	r15, r30
    20b0:	22 c0       	rjmp	.+68     	; 0x20f6 <vfprintf+0xe8>
    20b2:	f7 fc       	sbrc	r15, 7
    20b4:	29 c0       	rjmp	.+82     	; 0x2108 <vfprintf+0xfa>
    20b6:	89 2f       	mov	r24, r25
    20b8:	80 53       	subi	r24, 0x30	; 48
    20ba:	8a 30       	cpi	r24, 0x0A	; 10
    20bc:	70 f4       	brcc	.+28     	; 0x20da <vfprintf+0xcc>
    20be:	f6 fe       	sbrs	r15, 6
    20c0:	05 c0       	rjmp	.+10     	; 0x20cc <vfprintf+0xbe>
    20c2:	98 9c       	mul	r9, r8
    20c4:	90 2c       	mov	r9, r0
    20c6:	11 24       	eor	r1, r1
    20c8:	98 0e       	add	r9, r24
    20ca:	15 c0       	rjmp	.+42     	; 0x20f6 <vfprintf+0xe8>
    20cc:	e8 9c       	mul	r14, r8
    20ce:	e0 2c       	mov	r14, r0
    20d0:	11 24       	eor	r1, r1
    20d2:	e8 0e       	add	r14, r24
    20d4:	f0 e2       	ldi	r31, 0x20	; 32
    20d6:	ff 2a       	or	r15, r31
    20d8:	0e c0       	rjmp	.+28     	; 0x20f6 <vfprintf+0xe8>
    20da:	9e 32       	cpi	r25, 0x2E	; 46
    20dc:	29 f4       	brne	.+10     	; 0x20e8 <vfprintf+0xda>
    20de:	f6 fc       	sbrc	r15, 6
    20e0:	6b c1       	rjmp	.+726    	; 0x23b8 <__stack+0x1b9>
    20e2:	40 e4       	ldi	r20, 0x40	; 64
    20e4:	f4 2a       	or	r15, r20
    20e6:	07 c0       	rjmp	.+14     	; 0x20f6 <vfprintf+0xe8>
    20e8:	9c 36       	cpi	r25, 0x6C	; 108
    20ea:	19 f4       	brne	.+6      	; 0x20f2 <vfprintf+0xe4>
    20ec:	50 e8       	ldi	r21, 0x80	; 128
    20ee:	f5 2a       	or	r15, r21
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <vfprintf+0xe8>
    20f2:	98 36       	cpi	r25, 0x68	; 104
    20f4:	49 f4       	brne	.+18     	; 0x2108 <vfprintf+0xfa>
    20f6:	f2 01       	movw	r30, r4
    20f8:	23 fd       	sbrc	r18, 3
    20fa:	95 91       	lpm	r25, Z+
    20fc:	23 ff       	sbrs	r18, 3
    20fe:	91 91       	ld	r25, Z+
    2100:	2f 01       	movw	r4, r30
    2102:	99 23       	and	r25, r25
    2104:	09 f0       	breq	.+2      	; 0x2108 <vfprintf+0xfa>
    2106:	b8 cf       	rjmp	.-144    	; 0x2078 <vfprintf+0x6a>
    2108:	89 2f       	mov	r24, r25
    210a:	85 54       	subi	r24, 0x45	; 69
    210c:	83 30       	cpi	r24, 0x03	; 3
    210e:	18 f0       	brcs	.+6      	; 0x2116 <vfprintf+0x108>
    2110:	80 52       	subi	r24, 0x20	; 32
    2112:	83 30       	cpi	r24, 0x03	; 3
    2114:	38 f4       	brcc	.+14     	; 0x2124 <vfprintf+0x116>
    2116:	44 e0       	ldi	r20, 0x04	; 4
    2118:	50 e0       	ldi	r21, 0x00	; 0
    211a:	a4 0e       	add	r10, r20
    211c:	b5 1e       	adc	r11, r21
    211e:	5f e3       	ldi	r21, 0x3F	; 63
    2120:	59 83       	std	Y+1, r21	; 0x01
    2122:	0f c0       	rjmp	.+30     	; 0x2142 <vfprintf+0x134>
    2124:	93 36       	cpi	r25, 0x63	; 99
    2126:	31 f0       	breq	.+12     	; 0x2134 <vfprintf+0x126>
    2128:	93 37       	cpi	r25, 0x73	; 115
    212a:	79 f0       	breq	.+30     	; 0x214a <vfprintf+0x13c>
    212c:	93 35       	cpi	r25, 0x53	; 83
    212e:	09 f0       	breq	.+2      	; 0x2132 <vfprintf+0x124>
    2130:	56 c0       	rjmp	.+172    	; 0x21de <vfprintf+0x1d0>
    2132:	20 c0       	rjmp	.+64     	; 0x2174 <vfprintf+0x166>
    2134:	f5 01       	movw	r30, r10
    2136:	80 81       	ld	r24, Z
    2138:	89 83       	std	Y+1, r24	; 0x01
    213a:	42 e0       	ldi	r20, 0x02	; 2
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	a4 0e       	add	r10, r20
    2140:	b5 1e       	adc	r11, r21
    2142:	61 01       	movw	r12, r2
    2144:	01 e0       	ldi	r16, 0x01	; 1
    2146:	10 e0       	ldi	r17, 0x00	; 0
    2148:	12 c0       	rjmp	.+36     	; 0x216e <vfprintf+0x160>
    214a:	f5 01       	movw	r30, r10
    214c:	c0 80       	ld	r12, Z
    214e:	d1 80       	ldd	r13, Z+1	; 0x01
    2150:	f6 fc       	sbrc	r15, 6
    2152:	03 c0       	rjmp	.+6      	; 0x215a <vfprintf+0x14c>
    2154:	6f ef       	ldi	r22, 0xFF	; 255
    2156:	7f ef       	ldi	r23, 0xFF	; 255
    2158:	02 c0       	rjmp	.+4      	; 0x215e <vfprintf+0x150>
    215a:	69 2d       	mov	r22, r9
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	42 e0       	ldi	r20, 0x02	; 2
    2160:	50 e0       	ldi	r21, 0x00	; 0
    2162:	a4 0e       	add	r10, r20
    2164:	b5 1e       	adc	r11, r21
    2166:	c6 01       	movw	r24, r12
    2168:	0e 94 ef 11 	call	0x23de	; 0x23de <strnlen>
    216c:	8c 01       	movw	r16, r24
    216e:	5f e7       	ldi	r21, 0x7F	; 127
    2170:	f5 22       	and	r15, r21
    2172:	14 c0       	rjmp	.+40     	; 0x219c <vfprintf+0x18e>
    2174:	f5 01       	movw	r30, r10
    2176:	c0 80       	ld	r12, Z
    2178:	d1 80       	ldd	r13, Z+1	; 0x01
    217a:	f6 fc       	sbrc	r15, 6
    217c:	03 c0       	rjmp	.+6      	; 0x2184 <vfprintf+0x176>
    217e:	6f ef       	ldi	r22, 0xFF	; 255
    2180:	7f ef       	ldi	r23, 0xFF	; 255
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <vfprintf+0x17a>
    2184:	69 2d       	mov	r22, r9
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	42 e0       	ldi	r20, 0x02	; 2
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	a4 0e       	add	r10, r20
    218e:	b5 1e       	adc	r11, r21
    2190:	c6 01       	movw	r24, r12
    2192:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <strnlen_P>
    2196:	8c 01       	movw	r16, r24
    2198:	50 e8       	ldi	r21, 0x80	; 128
    219a:	f5 2a       	or	r15, r21
    219c:	f3 fe       	sbrs	r15, 3
    219e:	07 c0       	rjmp	.+14     	; 0x21ae <vfprintf+0x1a0>
    21a0:	1a c0       	rjmp	.+52     	; 0x21d6 <vfprintf+0x1c8>
    21a2:	80 e2       	ldi	r24, 0x20	; 32
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	b3 01       	movw	r22, r6
    21a8:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <fputc>
    21ac:	ea 94       	dec	r14
    21ae:	8e 2d       	mov	r24, r14
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	08 17       	cp	r16, r24
    21b4:	19 07       	cpc	r17, r25
    21b6:	a8 f3       	brcs	.-22     	; 0x21a2 <vfprintf+0x194>
    21b8:	0e c0       	rjmp	.+28     	; 0x21d6 <vfprintf+0x1c8>
    21ba:	f6 01       	movw	r30, r12
    21bc:	f7 fc       	sbrc	r15, 7
    21be:	85 91       	lpm	r24, Z+
    21c0:	f7 fe       	sbrs	r15, 7
    21c2:	81 91       	ld	r24, Z+
    21c4:	6f 01       	movw	r12, r30
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	b3 01       	movw	r22, r6
    21ca:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <fputc>
    21ce:	e1 10       	cpse	r14, r1
    21d0:	ea 94       	dec	r14
    21d2:	01 50       	subi	r16, 0x01	; 1
    21d4:	10 40       	sbci	r17, 0x00	; 0
    21d6:	01 15       	cp	r16, r1
    21d8:	11 05       	cpc	r17, r1
    21da:	79 f7       	brne	.-34     	; 0x21ba <vfprintf+0x1ac>
    21dc:	ea c0       	rjmp	.+468    	; 0x23b2 <__stack+0x1b3>
    21de:	94 36       	cpi	r25, 0x64	; 100
    21e0:	11 f0       	breq	.+4      	; 0x21e6 <vfprintf+0x1d8>
    21e2:	99 36       	cpi	r25, 0x69	; 105
    21e4:	69 f5       	brne	.+90     	; 0x2240 <__stack+0x41>
    21e6:	f7 fe       	sbrs	r15, 7
    21e8:	08 c0       	rjmp	.+16     	; 0x21fa <vfprintf+0x1ec>
    21ea:	f5 01       	movw	r30, r10
    21ec:	20 81       	ld	r18, Z
    21ee:	31 81       	ldd	r19, Z+1	; 0x01
    21f0:	42 81       	ldd	r20, Z+2	; 0x02
    21f2:	53 81       	ldd	r21, Z+3	; 0x03
    21f4:	84 e0       	ldi	r24, 0x04	; 4
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	0a c0       	rjmp	.+20     	; 0x220e <__stack+0xf>
    21fa:	f5 01       	movw	r30, r10
    21fc:	80 81       	ld	r24, Z
    21fe:	91 81       	ldd	r25, Z+1	; 0x01
    2200:	9c 01       	movw	r18, r24
    2202:	44 27       	eor	r20, r20
    2204:	37 fd       	sbrc	r19, 7
    2206:	40 95       	com	r20
    2208:	54 2f       	mov	r21, r20
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	a8 0e       	add	r10, r24
    2210:	b9 1e       	adc	r11, r25
    2212:	9f e6       	ldi	r25, 0x6F	; 111
    2214:	f9 22       	and	r15, r25
    2216:	57 ff       	sbrs	r21, 7
    2218:	09 c0       	rjmp	.+18     	; 0x222c <__stack+0x2d>
    221a:	50 95       	com	r21
    221c:	40 95       	com	r20
    221e:	30 95       	com	r19
    2220:	21 95       	neg	r18
    2222:	3f 4f       	sbci	r19, 0xFF	; 255
    2224:	4f 4f       	sbci	r20, 0xFF	; 255
    2226:	5f 4f       	sbci	r21, 0xFF	; 255
    2228:	e0 e8       	ldi	r30, 0x80	; 128
    222a:	fe 2a       	or	r15, r30
    222c:	ca 01       	movw	r24, r20
    222e:	b9 01       	movw	r22, r18
    2230:	a1 01       	movw	r20, r2
    2232:	2a e0       	ldi	r18, 0x0A	; 10
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	0e 94 26 12 	call	0x244c	; 0x244c <__ultoa_invert>
    223a:	d8 2e       	mov	r13, r24
    223c:	d2 18       	sub	r13, r2
    223e:	40 c0       	rjmp	.+128    	; 0x22c0 <__stack+0xc1>
    2240:	95 37       	cpi	r25, 0x75	; 117
    2242:	29 f4       	brne	.+10     	; 0x224e <__stack+0x4f>
    2244:	1f 2d       	mov	r17, r15
    2246:	1f 7e       	andi	r17, 0xEF	; 239
    2248:	2a e0       	ldi	r18, 0x0A	; 10
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	1d c0       	rjmp	.+58     	; 0x2288 <__stack+0x89>
    224e:	1f 2d       	mov	r17, r15
    2250:	19 7f       	andi	r17, 0xF9	; 249
    2252:	9f 36       	cpi	r25, 0x6F	; 111
    2254:	61 f0       	breq	.+24     	; 0x226e <__stack+0x6f>
    2256:	90 37       	cpi	r25, 0x70	; 112
    2258:	20 f4       	brcc	.+8      	; 0x2262 <__stack+0x63>
    225a:	98 35       	cpi	r25, 0x58	; 88
    225c:	09 f0       	breq	.+2      	; 0x2260 <__stack+0x61>
    225e:	ac c0       	rjmp	.+344    	; 0x23b8 <__stack+0x1b9>
    2260:	0f c0       	rjmp	.+30     	; 0x2280 <__stack+0x81>
    2262:	90 37       	cpi	r25, 0x70	; 112
    2264:	39 f0       	breq	.+14     	; 0x2274 <__stack+0x75>
    2266:	98 37       	cpi	r25, 0x78	; 120
    2268:	09 f0       	breq	.+2      	; 0x226c <__stack+0x6d>
    226a:	a6 c0       	rjmp	.+332    	; 0x23b8 <__stack+0x1b9>
    226c:	04 c0       	rjmp	.+8      	; 0x2276 <__stack+0x77>
    226e:	28 e0       	ldi	r18, 0x08	; 8
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	0a c0       	rjmp	.+20     	; 0x2288 <__stack+0x89>
    2274:	10 61       	ori	r17, 0x10	; 16
    2276:	14 fd       	sbrc	r17, 4
    2278:	14 60       	ori	r17, 0x04	; 4
    227a:	20 e1       	ldi	r18, 0x10	; 16
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	04 c0       	rjmp	.+8      	; 0x2288 <__stack+0x89>
    2280:	14 fd       	sbrc	r17, 4
    2282:	16 60       	ori	r17, 0x06	; 6
    2284:	20 e1       	ldi	r18, 0x10	; 16
    2286:	32 e0       	ldi	r19, 0x02	; 2
    2288:	17 ff       	sbrs	r17, 7
    228a:	08 c0       	rjmp	.+16     	; 0x229c <__stack+0x9d>
    228c:	f5 01       	movw	r30, r10
    228e:	60 81       	ld	r22, Z
    2290:	71 81       	ldd	r23, Z+1	; 0x01
    2292:	82 81       	ldd	r24, Z+2	; 0x02
    2294:	93 81       	ldd	r25, Z+3	; 0x03
    2296:	44 e0       	ldi	r20, 0x04	; 4
    2298:	50 e0       	ldi	r21, 0x00	; 0
    229a:	08 c0       	rjmp	.+16     	; 0x22ac <__stack+0xad>
    229c:	f5 01       	movw	r30, r10
    229e:	80 81       	ld	r24, Z
    22a0:	91 81       	ldd	r25, Z+1	; 0x01
    22a2:	bc 01       	movw	r22, r24
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	42 e0       	ldi	r20, 0x02	; 2
    22aa:	50 e0       	ldi	r21, 0x00	; 0
    22ac:	a4 0e       	add	r10, r20
    22ae:	b5 1e       	adc	r11, r21
    22b0:	a1 01       	movw	r20, r2
    22b2:	0e 94 26 12 	call	0x244c	; 0x244c <__ultoa_invert>
    22b6:	d8 2e       	mov	r13, r24
    22b8:	d2 18       	sub	r13, r2
    22ba:	8f e7       	ldi	r24, 0x7F	; 127
    22bc:	f8 2e       	mov	r15, r24
    22be:	f1 22       	and	r15, r17
    22c0:	f6 fe       	sbrs	r15, 6
    22c2:	0b c0       	rjmp	.+22     	; 0x22da <__stack+0xdb>
    22c4:	5e ef       	ldi	r21, 0xFE	; 254
    22c6:	f5 22       	and	r15, r21
    22c8:	d9 14       	cp	r13, r9
    22ca:	38 f4       	brcc	.+14     	; 0x22da <__stack+0xdb>
    22cc:	f4 fe       	sbrs	r15, 4
    22ce:	07 c0       	rjmp	.+14     	; 0x22de <__stack+0xdf>
    22d0:	f2 fc       	sbrc	r15, 2
    22d2:	05 c0       	rjmp	.+10     	; 0x22de <__stack+0xdf>
    22d4:	8f ee       	ldi	r24, 0xEF	; 239
    22d6:	f8 22       	and	r15, r24
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <__stack+0xdf>
    22da:	1d 2d       	mov	r17, r13
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <__stack+0xe1>
    22de:	19 2d       	mov	r17, r9
    22e0:	f4 fe       	sbrs	r15, 4
    22e2:	0d c0       	rjmp	.+26     	; 0x22fe <__stack+0xff>
    22e4:	fe 01       	movw	r30, r28
    22e6:	ed 0d       	add	r30, r13
    22e8:	f1 1d       	adc	r31, r1
    22ea:	80 81       	ld	r24, Z
    22ec:	80 33       	cpi	r24, 0x30	; 48
    22ee:	19 f4       	brne	.+6      	; 0x22f6 <__stack+0xf7>
    22f0:	99 ee       	ldi	r25, 0xE9	; 233
    22f2:	f9 22       	and	r15, r25
    22f4:	08 c0       	rjmp	.+16     	; 0x2306 <__stack+0x107>
    22f6:	1f 5f       	subi	r17, 0xFF	; 255
    22f8:	f2 fe       	sbrs	r15, 2
    22fa:	05 c0       	rjmp	.+10     	; 0x2306 <__stack+0x107>
    22fc:	03 c0       	rjmp	.+6      	; 0x2304 <__stack+0x105>
    22fe:	8f 2d       	mov	r24, r15
    2300:	86 78       	andi	r24, 0x86	; 134
    2302:	09 f0       	breq	.+2      	; 0x2306 <__stack+0x107>
    2304:	1f 5f       	subi	r17, 0xFF	; 255
    2306:	0f 2d       	mov	r16, r15
    2308:	f3 fc       	sbrc	r15, 3
    230a:	14 c0       	rjmp	.+40     	; 0x2334 <__stack+0x135>
    230c:	f0 fe       	sbrs	r15, 0
    230e:	0f c0       	rjmp	.+30     	; 0x232e <__stack+0x12f>
    2310:	1e 15       	cp	r17, r14
    2312:	10 f0       	brcs	.+4      	; 0x2318 <__stack+0x119>
    2314:	9d 2c       	mov	r9, r13
    2316:	0b c0       	rjmp	.+22     	; 0x232e <__stack+0x12f>
    2318:	9d 2c       	mov	r9, r13
    231a:	9e 0c       	add	r9, r14
    231c:	91 1a       	sub	r9, r17
    231e:	1e 2d       	mov	r17, r14
    2320:	06 c0       	rjmp	.+12     	; 0x232e <__stack+0x12f>
    2322:	80 e2       	ldi	r24, 0x20	; 32
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	b3 01       	movw	r22, r6
    2328:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <fputc>
    232c:	1f 5f       	subi	r17, 0xFF	; 255
    232e:	1e 15       	cp	r17, r14
    2330:	c0 f3       	brcs	.-16     	; 0x2322 <__stack+0x123>
    2332:	04 c0       	rjmp	.+8      	; 0x233c <__stack+0x13d>
    2334:	1e 15       	cp	r17, r14
    2336:	10 f4       	brcc	.+4      	; 0x233c <__stack+0x13d>
    2338:	e1 1a       	sub	r14, r17
    233a:	01 c0       	rjmp	.+2      	; 0x233e <__stack+0x13f>
    233c:	ee 24       	eor	r14, r14
    233e:	04 ff       	sbrs	r16, 4
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <__stack+0x161>
    2342:	80 e3       	ldi	r24, 0x30	; 48
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	b3 01       	movw	r22, r6
    2348:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <fputc>
    234c:	02 ff       	sbrs	r16, 2
    234e:	1d c0       	rjmp	.+58     	; 0x238a <__stack+0x18b>
    2350:	01 fd       	sbrc	r16, 1
    2352:	03 c0       	rjmp	.+6      	; 0x235a <__stack+0x15b>
    2354:	88 e7       	ldi	r24, 0x78	; 120
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	0e c0       	rjmp	.+28     	; 0x2376 <__stack+0x177>
    235a:	88 e5       	ldi	r24, 0x58	; 88
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	0b c0       	rjmp	.+22     	; 0x2376 <__stack+0x177>
    2360:	80 2f       	mov	r24, r16
    2362:	86 78       	andi	r24, 0x86	; 134
    2364:	91 f0       	breq	.+36     	; 0x238a <__stack+0x18b>
    2366:	01 ff       	sbrs	r16, 1
    2368:	02 c0       	rjmp	.+4      	; 0x236e <__stack+0x16f>
    236a:	8b e2       	ldi	r24, 0x2B	; 43
    236c:	01 c0       	rjmp	.+2      	; 0x2370 <__stack+0x171>
    236e:	80 e2       	ldi	r24, 0x20	; 32
    2370:	f7 fc       	sbrc	r15, 7
    2372:	8d e2       	ldi	r24, 0x2D	; 45
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	b3 01       	movw	r22, r6
    2378:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <fputc>
    237c:	06 c0       	rjmp	.+12     	; 0x238a <__stack+0x18b>
    237e:	80 e3       	ldi	r24, 0x30	; 48
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	b3 01       	movw	r22, r6
    2384:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <fputc>
    2388:	9a 94       	dec	r9
    238a:	d9 14       	cp	r13, r9
    238c:	c0 f3       	brcs	.-16     	; 0x237e <__stack+0x17f>
    238e:	da 94       	dec	r13
    2390:	f1 01       	movw	r30, r2
    2392:	ed 0d       	add	r30, r13
    2394:	f1 1d       	adc	r31, r1
    2396:	80 81       	ld	r24, Z
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	b3 01       	movw	r22, r6
    239c:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <fputc>
    23a0:	dd 20       	and	r13, r13
    23a2:	a9 f7       	brne	.-22     	; 0x238e <__stack+0x18f>
    23a4:	06 c0       	rjmp	.+12     	; 0x23b2 <__stack+0x1b3>
    23a6:	80 e2       	ldi	r24, 0x20	; 32
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	b3 01       	movw	r22, r6
    23ac:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <fputc>
    23b0:	ea 94       	dec	r14
    23b2:	ee 20       	and	r14, r14
    23b4:	c1 f7       	brne	.-16     	; 0x23a6 <__stack+0x1a7>
    23b6:	43 ce       	rjmp	.-890    	; 0x203e <vfprintf+0x30>
    23b8:	f3 01       	movw	r30, r6
    23ba:	66 81       	ldd	r22, Z+6	; 0x06
    23bc:	77 81       	ldd	r23, Z+7	; 0x07
    23be:	cb 01       	movw	r24, r22
    23c0:	2b 96       	adiw	r28, 0x0b	; 11
    23c2:	e2 e1       	ldi	r30, 0x12	; 18
    23c4:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__epilogue_restores__>

000023c8 <strnlen_P>:
    23c8:	fc 01       	movw	r30, r24
    23ca:	05 90       	lpm	r0, Z+
    23cc:	61 50       	subi	r22, 0x01	; 1
    23ce:	70 40       	sbci	r23, 0x00	; 0
    23d0:	01 10       	cpse	r0, r1
    23d2:	d8 f7       	brcc	.-10     	; 0x23ca <strnlen_P+0x2>
    23d4:	80 95       	com	r24
    23d6:	90 95       	com	r25
    23d8:	8e 0f       	add	r24, r30
    23da:	9f 1f       	adc	r25, r31
    23dc:	08 95       	ret

000023de <strnlen>:
    23de:	fc 01       	movw	r30, r24
    23e0:	61 50       	subi	r22, 0x01	; 1
    23e2:	70 40       	sbci	r23, 0x00	; 0
    23e4:	01 90       	ld	r0, Z+
    23e6:	01 10       	cpse	r0, r1
    23e8:	d8 f7       	brcc	.-10     	; 0x23e0 <strnlen+0x2>
    23ea:	80 95       	com	r24
    23ec:	90 95       	com	r25
    23ee:	8e 0f       	add	r24, r30
    23f0:	9f 1f       	adc	r25, r31
    23f2:	08 95       	ret

000023f4 <fputc>:
    23f4:	0f 93       	push	r16
    23f6:	1f 93       	push	r17
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	8c 01       	movw	r16, r24
    23fe:	eb 01       	movw	r28, r22
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	81 ff       	sbrs	r24, 1
    2404:	1b c0       	rjmp	.+54     	; 0x243c <fputc+0x48>
    2406:	82 ff       	sbrs	r24, 2
    2408:	0d c0       	rjmp	.+26     	; 0x2424 <fputc+0x30>
    240a:	2e 81       	ldd	r18, Y+6	; 0x06
    240c:	3f 81       	ldd	r19, Y+7	; 0x07
    240e:	8c 81       	ldd	r24, Y+4	; 0x04
    2410:	9d 81       	ldd	r25, Y+5	; 0x05
    2412:	28 17       	cp	r18, r24
    2414:	39 07       	cpc	r19, r25
    2416:	64 f4       	brge	.+24     	; 0x2430 <fputc+0x3c>
    2418:	e8 81       	ld	r30, Y
    241a:	f9 81       	ldd	r31, Y+1	; 0x01
    241c:	01 93       	st	Z+, r16
    241e:	f9 83       	std	Y+1, r31	; 0x01
    2420:	e8 83       	st	Y, r30
    2422:	06 c0       	rjmp	.+12     	; 0x2430 <fputc+0x3c>
    2424:	e8 85       	ldd	r30, Y+8	; 0x08
    2426:	f9 85       	ldd	r31, Y+9	; 0x09
    2428:	80 2f       	mov	r24, r16
    242a:	19 95       	eicall
    242c:	89 2b       	or	r24, r25
    242e:	31 f4       	brne	.+12     	; 0x243c <fputc+0x48>
    2430:	8e 81       	ldd	r24, Y+6	; 0x06
    2432:	9f 81       	ldd	r25, Y+7	; 0x07
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	9f 83       	std	Y+7, r25	; 0x07
    2438:	8e 83       	std	Y+6, r24	; 0x06
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <fputc+0x4c>
    243c:	0f ef       	ldi	r16, 0xFF	; 255
    243e:	1f ef       	ldi	r17, 0xFF	; 255
    2440:	c8 01       	movw	r24, r16
    2442:	df 91       	pop	r29
    2444:	cf 91       	pop	r28
    2446:	1f 91       	pop	r17
    2448:	0f 91       	pop	r16
    244a:	08 95       	ret

0000244c <__ultoa_invert>:
    244c:	fa 01       	movw	r30, r20
    244e:	aa 27       	eor	r26, r26
    2450:	28 30       	cpi	r18, 0x08	; 8
    2452:	51 f1       	breq	.+84     	; 0x24a8 <__ultoa_invert+0x5c>
    2454:	20 31       	cpi	r18, 0x10	; 16
    2456:	81 f1       	breq	.+96     	; 0x24b8 <__ultoa_invert+0x6c>
    2458:	e8 94       	clt
    245a:	6f 93       	push	r22
    245c:	6e 7f       	andi	r22, 0xFE	; 254
    245e:	6e 5f       	subi	r22, 0xFE	; 254
    2460:	7f 4f       	sbci	r23, 0xFF	; 255
    2462:	8f 4f       	sbci	r24, 0xFF	; 255
    2464:	9f 4f       	sbci	r25, 0xFF	; 255
    2466:	af 4f       	sbci	r26, 0xFF	; 255
    2468:	b1 e0       	ldi	r27, 0x01	; 1
    246a:	3e d0       	rcall	.+124    	; 0x24e8 <__ultoa_invert+0x9c>
    246c:	b4 e0       	ldi	r27, 0x04	; 4
    246e:	3c d0       	rcall	.+120    	; 0x24e8 <__ultoa_invert+0x9c>
    2470:	67 0f       	add	r22, r23
    2472:	78 1f       	adc	r23, r24
    2474:	89 1f       	adc	r24, r25
    2476:	9a 1f       	adc	r25, r26
    2478:	a1 1d       	adc	r26, r1
    247a:	68 0f       	add	r22, r24
    247c:	79 1f       	adc	r23, r25
    247e:	8a 1f       	adc	r24, r26
    2480:	91 1d       	adc	r25, r1
    2482:	a1 1d       	adc	r26, r1
    2484:	6a 0f       	add	r22, r26
    2486:	71 1d       	adc	r23, r1
    2488:	81 1d       	adc	r24, r1
    248a:	91 1d       	adc	r25, r1
    248c:	a1 1d       	adc	r26, r1
    248e:	20 d0       	rcall	.+64     	; 0x24d0 <__ultoa_invert+0x84>
    2490:	09 f4       	brne	.+2      	; 0x2494 <__ultoa_invert+0x48>
    2492:	68 94       	set
    2494:	3f 91       	pop	r19
    2496:	2a e0       	ldi	r18, 0x0A	; 10
    2498:	26 9f       	mul	r18, r22
    249a:	11 24       	eor	r1, r1
    249c:	30 19       	sub	r19, r0
    249e:	30 5d       	subi	r19, 0xD0	; 208
    24a0:	31 93       	st	Z+, r19
    24a2:	de f6       	brtc	.-74     	; 0x245a <__ultoa_invert+0xe>
    24a4:	cf 01       	movw	r24, r30
    24a6:	08 95       	ret
    24a8:	46 2f       	mov	r20, r22
    24aa:	47 70       	andi	r20, 0x07	; 7
    24ac:	40 5d       	subi	r20, 0xD0	; 208
    24ae:	41 93       	st	Z+, r20
    24b0:	b3 e0       	ldi	r27, 0x03	; 3
    24b2:	0f d0       	rcall	.+30     	; 0x24d2 <__ultoa_invert+0x86>
    24b4:	c9 f7       	brne	.-14     	; 0x24a8 <__ultoa_invert+0x5c>
    24b6:	f6 cf       	rjmp	.-20     	; 0x24a4 <__ultoa_invert+0x58>
    24b8:	46 2f       	mov	r20, r22
    24ba:	4f 70       	andi	r20, 0x0F	; 15
    24bc:	40 5d       	subi	r20, 0xD0	; 208
    24be:	4a 33       	cpi	r20, 0x3A	; 58
    24c0:	18 f0       	brcs	.+6      	; 0x24c8 <__ultoa_invert+0x7c>
    24c2:	49 5d       	subi	r20, 0xD9	; 217
    24c4:	31 fd       	sbrc	r19, 1
    24c6:	40 52       	subi	r20, 0x20	; 32
    24c8:	41 93       	st	Z+, r20
    24ca:	02 d0       	rcall	.+4      	; 0x24d0 <__ultoa_invert+0x84>
    24cc:	a9 f7       	brne	.-22     	; 0x24b8 <__ultoa_invert+0x6c>
    24ce:	ea cf       	rjmp	.-44     	; 0x24a4 <__ultoa_invert+0x58>
    24d0:	b4 e0       	ldi	r27, 0x04	; 4
    24d2:	a6 95       	lsr	r26
    24d4:	97 95       	ror	r25
    24d6:	87 95       	ror	r24
    24d8:	77 95       	ror	r23
    24da:	67 95       	ror	r22
    24dc:	ba 95       	dec	r27
    24de:	c9 f7       	brne	.-14     	; 0x24d2 <__ultoa_invert+0x86>
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	61 05       	cpc	r22, r1
    24e4:	71 05       	cpc	r23, r1
    24e6:	08 95       	ret
    24e8:	9b 01       	movw	r18, r22
    24ea:	ac 01       	movw	r20, r24
    24ec:	0a 2e       	mov	r0, r26
    24ee:	06 94       	lsr	r0
    24f0:	57 95       	ror	r21
    24f2:	47 95       	ror	r20
    24f4:	37 95       	ror	r19
    24f6:	27 95       	ror	r18
    24f8:	ba 95       	dec	r27
    24fa:	c9 f7       	brne	.-14     	; 0x24ee <__ultoa_invert+0xa2>
    24fc:	62 0f       	add	r22, r18
    24fe:	73 1f       	adc	r23, r19
    2500:	84 1f       	adc	r24, r20
    2502:	95 1f       	adc	r25, r21
    2504:	a0 1d       	adc	r26, r0
    2506:	08 95       	ret

00002508 <__divsf3>:
    2508:	0c d0       	rcall	.+24     	; 0x2522 <__divsf3x>
    250a:	eb c0       	rjmp	.+470    	; 0x26e2 <__fp_round>
    250c:	e3 d0       	rcall	.+454    	; 0x26d4 <__fp_pscB>
    250e:	40 f0       	brcs	.+16     	; 0x2520 <__divsf3+0x18>
    2510:	da d0       	rcall	.+436    	; 0x26c6 <__fp_pscA>
    2512:	30 f0       	brcs	.+12     	; 0x2520 <__divsf3+0x18>
    2514:	21 f4       	brne	.+8      	; 0x251e <__divsf3+0x16>
    2516:	5f 3f       	cpi	r21, 0xFF	; 255
    2518:	19 f0       	breq	.+6      	; 0x2520 <__divsf3+0x18>
    251a:	cc c0       	rjmp	.+408    	; 0x26b4 <__fp_inf>
    251c:	51 11       	cpse	r21, r1
    251e:	15 c1       	rjmp	.+554    	; 0x274a <__fp_szero>
    2520:	cf c0       	rjmp	.+414    	; 0x26c0 <__fp_nan>

00002522 <__divsf3x>:
    2522:	f0 d0       	rcall	.+480    	; 0x2704 <__fp_split3>
    2524:	98 f3       	brcs	.-26     	; 0x250c <__divsf3+0x4>

00002526 <__divsf3_pse>:
    2526:	99 23       	and	r25, r25
    2528:	c9 f3       	breq	.-14     	; 0x251c <__divsf3+0x14>
    252a:	55 23       	and	r21, r21
    252c:	b1 f3       	breq	.-20     	; 0x251a <__divsf3+0x12>
    252e:	95 1b       	sub	r25, r21
    2530:	55 0b       	sbc	r21, r21
    2532:	bb 27       	eor	r27, r27
    2534:	aa 27       	eor	r26, r26
    2536:	62 17       	cp	r22, r18
    2538:	73 07       	cpc	r23, r19
    253a:	84 07       	cpc	r24, r20
    253c:	38 f0       	brcs	.+14     	; 0x254c <__divsf3_pse+0x26>
    253e:	9f 5f       	subi	r25, 0xFF	; 255
    2540:	5f 4f       	sbci	r21, 0xFF	; 255
    2542:	22 0f       	add	r18, r18
    2544:	33 1f       	adc	r19, r19
    2546:	44 1f       	adc	r20, r20
    2548:	aa 1f       	adc	r26, r26
    254a:	a9 f3       	breq	.-22     	; 0x2536 <__divsf3_pse+0x10>
    254c:	33 d0       	rcall	.+102    	; 0x25b4 <__divsf3_pse+0x8e>
    254e:	0e 2e       	mov	r0, r30
    2550:	3a f0       	brmi	.+14     	; 0x2560 <__divsf3_pse+0x3a>
    2552:	e0 e8       	ldi	r30, 0x80	; 128
    2554:	30 d0       	rcall	.+96     	; 0x25b6 <__divsf3_pse+0x90>
    2556:	91 50       	subi	r25, 0x01	; 1
    2558:	50 40       	sbci	r21, 0x00	; 0
    255a:	e6 95       	lsr	r30
    255c:	00 1c       	adc	r0, r0
    255e:	ca f7       	brpl	.-14     	; 0x2552 <__divsf3_pse+0x2c>
    2560:	29 d0       	rcall	.+82     	; 0x25b4 <__divsf3_pse+0x8e>
    2562:	fe 2f       	mov	r31, r30
    2564:	27 d0       	rcall	.+78     	; 0x25b4 <__divsf3_pse+0x8e>
    2566:	66 0f       	add	r22, r22
    2568:	77 1f       	adc	r23, r23
    256a:	88 1f       	adc	r24, r24
    256c:	bb 1f       	adc	r27, r27
    256e:	26 17       	cp	r18, r22
    2570:	37 07       	cpc	r19, r23
    2572:	48 07       	cpc	r20, r24
    2574:	ab 07       	cpc	r26, r27
    2576:	b0 e8       	ldi	r27, 0x80	; 128
    2578:	09 f0       	breq	.+2      	; 0x257c <__divsf3_pse+0x56>
    257a:	bb 0b       	sbc	r27, r27
    257c:	80 2d       	mov	r24, r0
    257e:	bf 01       	movw	r22, r30
    2580:	ff 27       	eor	r31, r31
    2582:	93 58       	subi	r25, 0x83	; 131
    2584:	5f 4f       	sbci	r21, 0xFF	; 255
    2586:	2a f0       	brmi	.+10     	; 0x2592 <__divsf3_pse+0x6c>
    2588:	9e 3f       	cpi	r25, 0xFE	; 254
    258a:	51 05       	cpc	r21, r1
    258c:	68 f0       	brcs	.+26     	; 0x25a8 <__divsf3_pse+0x82>
    258e:	92 c0       	rjmp	.+292    	; 0x26b4 <__fp_inf>
    2590:	dc c0       	rjmp	.+440    	; 0x274a <__fp_szero>
    2592:	5f 3f       	cpi	r21, 0xFF	; 255
    2594:	ec f3       	brlt	.-6      	; 0x2590 <__divsf3_pse+0x6a>
    2596:	98 3e       	cpi	r25, 0xE8	; 232
    2598:	dc f3       	brlt	.-10     	; 0x2590 <__divsf3_pse+0x6a>
    259a:	86 95       	lsr	r24
    259c:	77 95       	ror	r23
    259e:	67 95       	ror	r22
    25a0:	b7 95       	ror	r27
    25a2:	f7 95       	ror	r31
    25a4:	9f 5f       	subi	r25, 0xFF	; 255
    25a6:	c9 f7       	brne	.-14     	; 0x259a <__divsf3_pse+0x74>
    25a8:	88 0f       	add	r24, r24
    25aa:	91 1d       	adc	r25, r1
    25ac:	96 95       	lsr	r25
    25ae:	87 95       	ror	r24
    25b0:	97 f9       	bld	r25, 7
    25b2:	08 95       	ret
    25b4:	e1 e0       	ldi	r30, 0x01	; 1
    25b6:	66 0f       	add	r22, r22
    25b8:	77 1f       	adc	r23, r23
    25ba:	88 1f       	adc	r24, r24
    25bc:	bb 1f       	adc	r27, r27
    25be:	62 17       	cp	r22, r18
    25c0:	73 07       	cpc	r23, r19
    25c2:	84 07       	cpc	r24, r20
    25c4:	ba 07       	cpc	r27, r26
    25c6:	20 f0       	brcs	.+8      	; 0x25d0 <__divsf3_pse+0xaa>
    25c8:	62 1b       	sub	r22, r18
    25ca:	73 0b       	sbc	r23, r19
    25cc:	84 0b       	sbc	r24, r20
    25ce:	ba 0b       	sbc	r27, r26
    25d0:	ee 1f       	adc	r30, r30
    25d2:	88 f7       	brcc	.-30     	; 0x25b6 <__divsf3_pse+0x90>
    25d4:	e0 95       	com	r30
    25d6:	08 95       	ret

000025d8 <__fixsfsi>:
    25d8:	04 d0       	rcall	.+8      	; 0x25e2 <__fixunssfsi>
    25da:	68 94       	set
    25dc:	b1 11       	cpse	r27, r1
    25de:	b5 c0       	rjmp	.+362    	; 0x274a <__fp_szero>
    25e0:	08 95       	ret

000025e2 <__fixunssfsi>:
    25e2:	98 d0       	rcall	.+304    	; 0x2714 <__fp_splitA>
    25e4:	88 f0       	brcs	.+34     	; 0x2608 <__fixunssfsi+0x26>
    25e6:	9f 57       	subi	r25, 0x7F	; 127
    25e8:	90 f0       	brcs	.+36     	; 0x260e <__fixunssfsi+0x2c>
    25ea:	b9 2f       	mov	r27, r25
    25ec:	99 27       	eor	r25, r25
    25ee:	b7 51       	subi	r27, 0x17	; 23
    25f0:	a0 f0       	brcs	.+40     	; 0x261a <__fixunssfsi+0x38>
    25f2:	d1 f0       	breq	.+52     	; 0x2628 <__fixunssfsi+0x46>
    25f4:	66 0f       	add	r22, r22
    25f6:	77 1f       	adc	r23, r23
    25f8:	88 1f       	adc	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	1a f0       	brmi	.+6      	; 0x2604 <__fixunssfsi+0x22>
    25fe:	ba 95       	dec	r27
    2600:	c9 f7       	brne	.-14     	; 0x25f4 <__fixunssfsi+0x12>
    2602:	12 c0       	rjmp	.+36     	; 0x2628 <__fixunssfsi+0x46>
    2604:	b1 30       	cpi	r27, 0x01	; 1
    2606:	81 f0       	breq	.+32     	; 0x2628 <__fixunssfsi+0x46>
    2608:	9f d0       	rcall	.+318    	; 0x2748 <__fp_zero>
    260a:	b1 e0       	ldi	r27, 0x01	; 1
    260c:	08 95       	ret
    260e:	9c c0       	rjmp	.+312    	; 0x2748 <__fp_zero>
    2610:	67 2f       	mov	r22, r23
    2612:	78 2f       	mov	r23, r24
    2614:	88 27       	eor	r24, r24
    2616:	b8 5f       	subi	r27, 0xF8	; 248
    2618:	39 f0       	breq	.+14     	; 0x2628 <__fixunssfsi+0x46>
    261a:	b9 3f       	cpi	r27, 0xF9	; 249
    261c:	cc f3       	brlt	.-14     	; 0x2610 <__fixunssfsi+0x2e>
    261e:	86 95       	lsr	r24
    2620:	77 95       	ror	r23
    2622:	67 95       	ror	r22
    2624:	b3 95       	inc	r27
    2626:	d9 f7       	brne	.-10     	; 0x261e <__fixunssfsi+0x3c>
    2628:	3e f4       	brtc	.+14     	; 0x2638 <__fixunssfsi+0x56>
    262a:	90 95       	com	r25
    262c:	80 95       	com	r24
    262e:	70 95       	com	r23
    2630:	61 95       	neg	r22
    2632:	7f 4f       	sbci	r23, 0xFF	; 255
    2634:	8f 4f       	sbci	r24, 0xFF	; 255
    2636:	9f 4f       	sbci	r25, 0xFF	; 255
    2638:	08 95       	ret

0000263a <__floatunsisf>:
    263a:	e8 94       	clt
    263c:	09 c0       	rjmp	.+18     	; 0x2650 <__floatsisf+0x12>

0000263e <__floatsisf>:
    263e:	97 fb       	bst	r25, 7
    2640:	3e f4       	brtc	.+14     	; 0x2650 <__floatsisf+0x12>
    2642:	90 95       	com	r25
    2644:	80 95       	com	r24
    2646:	70 95       	com	r23
    2648:	61 95       	neg	r22
    264a:	7f 4f       	sbci	r23, 0xFF	; 255
    264c:	8f 4f       	sbci	r24, 0xFF	; 255
    264e:	9f 4f       	sbci	r25, 0xFF	; 255
    2650:	99 23       	and	r25, r25
    2652:	a9 f0       	breq	.+42     	; 0x267e <__floatsisf+0x40>
    2654:	f9 2f       	mov	r31, r25
    2656:	96 e9       	ldi	r25, 0x96	; 150
    2658:	bb 27       	eor	r27, r27
    265a:	93 95       	inc	r25
    265c:	f6 95       	lsr	r31
    265e:	87 95       	ror	r24
    2660:	77 95       	ror	r23
    2662:	67 95       	ror	r22
    2664:	b7 95       	ror	r27
    2666:	f1 11       	cpse	r31, r1
    2668:	f8 cf       	rjmp	.-16     	; 0x265a <__floatsisf+0x1c>
    266a:	fa f4       	brpl	.+62     	; 0x26aa <__floatsisf+0x6c>
    266c:	bb 0f       	add	r27, r27
    266e:	11 f4       	brne	.+4      	; 0x2674 <__floatsisf+0x36>
    2670:	60 ff       	sbrs	r22, 0
    2672:	1b c0       	rjmp	.+54     	; 0x26aa <__floatsisf+0x6c>
    2674:	6f 5f       	subi	r22, 0xFF	; 255
    2676:	7f 4f       	sbci	r23, 0xFF	; 255
    2678:	8f 4f       	sbci	r24, 0xFF	; 255
    267a:	9f 4f       	sbci	r25, 0xFF	; 255
    267c:	16 c0       	rjmp	.+44     	; 0x26aa <__floatsisf+0x6c>
    267e:	88 23       	and	r24, r24
    2680:	11 f0       	breq	.+4      	; 0x2686 <__floatsisf+0x48>
    2682:	96 e9       	ldi	r25, 0x96	; 150
    2684:	11 c0       	rjmp	.+34     	; 0x26a8 <__floatsisf+0x6a>
    2686:	77 23       	and	r23, r23
    2688:	21 f0       	breq	.+8      	; 0x2692 <__floatsisf+0x54>
    268a:	9e e8       	ldi	r25, 0x8E	; 142
    268c:	87 2f       	mov	r24, r23
    268e:	76 2f       	mov	r23, r22
    2690:	05 c0       	rjmp	.+10     	; 0x269c <__floatsisf+0x5e>
    2692:	66 23       	and	r22, r22
    2694:	71 f0       	breq	.+28     	; 0x26b2 <__floatsisf+0x74>
    2696:	96 e8       	ldi	r25, 0x86	; 134
    2698:	86 2f       	mov	r24, r22
    269a:	70 e0       	ldi	r23, 0x00	; 0
    269c:	60 e0       	ldi	r22, 0x00	; 0
    269e:	2a f0       	brmi	.+10     	; 0x26aa <__floatsisf+0x6c>
    26a0:	9a 95       	dec	r25
    26a2:	66 0f       	add	r22, r22
    26a4:	77 1f       	adc	r23, r23
    26a6:	88 1f       	adc	r24, r24
    26a8:	da f7       	brpl	.-10     	; 0x26a0 <__floatsisf+0x62>
    26aa:	88 0f       	add	r24, r24
    26ac:	96 95       	lsr	r25
    26ae:	87 95       	ror	r24
    26b0:	97 f9       	bld	r25, 7
    26b2:	08 95       	ret

000026b4 <__fp_inf>:
    26b4:	97 f9       	bld	r25, 7
    26b6:	9f 67       	ori	r25, 0x7F	; 127
    26b8:	80 e8       	ldi	r24, 0x80	; 128
    26ba:	70 e0       	ldi	r23, 0x00	; 0
    26bc:	60 e0       	ldi	r22, 0x00	; 0
    26be:	08 95       	ret

000026c0 <__fp_nan>:
    26c0:	9f ef       	ldi	r25, 0xFF	; 255
    26c2:	80 ec       	ldi	r24, 0xC0	; 192
    26c4:	08 95       	ret

000026c6 <__fp_pscA>:
    26c6:	00 24       	eor	r0, r0
    26c8:	0a 94       	dec	r0
    26ca:	16 16       	cp	r1, r22
    26cc:	17 06       	cpc	r1, r23
    26ce:	18 06       	cpc	r1, r24
    26d0:	09 06       	cpc	r0, r25
    26d2:	08 95       	ret

000026d4 <__fp_pscB>:
    26d4:	00 24       	eor	r0, r0
    26d6:	0a 94       	dec	r0
    26d8:	12 16       	cp	r1, r18
    26da:	13 06       	cpc	r1, r19
    26dc:	14 06       	cpc	r1, r20
    26de:	05 06       	cpc	r0, r21
    26e0:	08 95       	ret

000026e2 <__fp_round>:
    26e2:	09 2e       	mov	r0, r25
    26e4:	03 94       	inc	r0
    26e6:	00 0c       	add	r0, r0
    26e8:	11 f4       	brne	.+4      	; 0x26ee <__fp_round+0xc>
    26ea:	88 23       	and	r24, r24
    26ec:	52 f0       	brmi	.+20     	; 0x2702 <__fp_round+0x20>
    26ee:	bb 0f       	add	r27, r27
    26f0:	40 f4       	brcc	.+16     	; 0x2702 <__fp_round+0x20>
    26f2:	bf 2b       	or	r27, r31
    26f4:	11 f4       	brne	.+4      	; 0x26fa <__fp_round+0x18>
    26f6:	60 ff       	sbrs	r22, 0
    26f8:	04 c0       	rjmp	.+8      	; 0x2702 <__fp_round+0x20>
    26fa:	6f 5f       	subi	r22, 0xFF	; 255
    26fc:	7f 4f       	sbci	r23, 0xFF	; 255
    26fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2700:	9f 4f       	sbci	r25, 0xFF	; 255
    2702:	08 95       	ret

00002704 <__fp_split3>:
    2704:	57 fd       	sbrc	r21, 7
    2706:	90 58       	subi	r25, 0x80	; 128
    2708:	44 0f       	add	r20, r20
    270a:	55 1f       	adc	r21, r21
    270c:	59 f0       	breq	.+22     	; 0x2724 <__fp_splitA+0x10>
    270e:	5f 3f       	cpi	r21, 0xFF	; 255
    2710:	71 f0       	breq	.+28     	; 0x272e <__fp_splitA+0x1a>
    2712:	47 95       	ror	r20

00002714 <__fp_splitA>:
    2714:	88 0f       	add	r24, r24
    2716:	97 fb       	bst	r25, 7
    2718:	99 1f       	adc	r25, r25
    271a:	61 f0       	breq	.+24     	; 0x2734 <__fp_splitA+0x20>
    271c:	9f 3f       	cpi	r25, 0xFF	; 255
    271e:	79 f0       	breq	.+30     	; 0x273e <__fp_splitA+0x2a>
    2720:	87 95       	ror	r24
    2722:	08 95       	ret
    2724:	12 16       	cp	r1, r18
    2726:	13 06       	cpc	r1, r19
    2728:	14 06       	cpc	r1, r20
    272a:	55 1f       	adc	r21, r21
    272c:	f2 cf       	rjmp	.-28     	; 0x2712 <__fp_split3+0xe>
    272e:	46 95       	lsr	r20
    2730:	f1 df       	rcall	.-30     	; 0x2714 <__fp_splitA>
    2732:	08 c0       	rjmp	.+16     	; 0x2744 <__fp_splitA+0x30>
    2734:	16 16       	cp	r1, r22
    2736:	17 06       	cpc	r1, r23
    2738:	18 06       	cpc	r1, r24
    273a:	99 1f       	adc	r25, r25
    273c:	f1 cf       	rjmp	.-30     	; 0x2720 <__fp_splitA+0xc>
    273e:	86 95       	lsr	r24
    2740:	71 05       	cpc	r23, r1
    2742:	61 05       	cpc	r22, r1
    2744:	08 94       	sec
    2746:	08 95       	ret

00002748 <__fp_zero>:
    2748:	e8 94       	clt

0000274a <__fp_szero>:
    274a:	bb 27       	eor	r27, r27
    274c:	66 27       	eor	r22, r22
    274e:	77 27       	eor	r23, r23
    2750:	cb 01       	movw	r24, r22
    2752:	97 f9       	bld	r25, 7
    2754:	08 95       	ret

00002756 <__mulsf3>:
    2756:	0b d0       	rcall	.+22     	; 0x276e <__mulsf3x>
    2758:	c4 cf       	rjmp	.-120    	; 0x26e2 <__fp_round>
    275a:	b5 df       	rcall	.-150    	; 0x26c6 <__fp_pscA>
    275c:	28 f0       	brcs	.+10     	; 0x2768 <__mulsf3+0x12>
    275e:	ba df       	rcall	.-140    	; 0x26d4 <__fp_pscB>
    2760:	18 f0       	brcs	.+6      	; 0x2768 <__mulsf3+0x12>
    2762:	95 23       	and	r25, r21
    2764:	09 f0       	breq	.+2      	; 0x2768 <__mulsf3+0x12>
    2766:	a6 cf       	rjmp	.-180    	; 0x26b4 <__fp_inf>
    2768:	ab cf       	rjmp	.-170    	; 0x26c0 <__fp_nan>
    276a:	11 24       	eor	r1, r1
    276c:	ee cf       	rjmp	.-36     	; 0x274a <__fp_szero>

0000276e <__mulsf3x>:
    276e:	ca df       	rcall	.-108    	; 0x2704 <__fp_split3>
    2770:	a0 f3       	brcs	.-24     	; 0x275a <__mulsf3+0x4>

00002772 <__mulsf3_pse>:
    2772:	95 9f       	mul	r25, r21
    2774:	d1 f3       	breq	.-12     	; 0x276a <__mulsf3+0x14>
    2776:	95 0f       	add	r25, r21
    2778:	50 e0       	ldi	r21, 0x00	; 0
    277a:	55 1f       	adc	r21, r21
    277c:	62 9f       	mul	r22, r18
    277e:	f0 01       	movw	r30, r0
    2780:	72 9f       	mul	r23, r18
    2782:	bb 27       	eor	r27, r27
    2784:	f0 0d       	add	r31, r0
    2786:	b1 1d       	adc	r27, r1
    2788:	63 9f       	mul	r22, r19
    278a:	aa 27       	eor	r26, r26
    278c:	f0 0d       	add	r31, r0
    278e:	b1 1d       	adc	r27, r1
    2790:	aa 1f       	adc	r26, r26
    2792:	64 9f       	mul	r22, r20
    2794:	66 27       	eor	r22, r22
    2796:	b0 0d       	add	r27, r0
    2798:	a1 1d       	adc	r26, r1
    279a:	66 1f       	adc	r22, r22
    279c:	82 9f       	mul	r24, r18
    279e:	22 27       	eor	r18, r18
    27a0:	b0 0d       	add	r27, r0
    27a2:	a1 1d       	adc	r26, r1
    27a4:	62 1f       	adc	r22, r18
    27a6:	73 9f       	mul	r23, r19
    27a8:	b0 0d       	add	r27, r0
    27aa:	a1 1d       	adc	r26, r1
    27ac:	62 1f       	adc	r22, r18
    27ae:	83 9f       	mul	r24, r19
    27b0:	a0 0d       	add	r26, r0
    27b2:	61 1d       	adc	r22, r1
    27b4:	22 1f       	adc	r18, r18
    27b6:	74 9f       	mul	r23, r20
    27b8:	33 27       	eor	r19, r19
    27ba:	a0 0d       	add	r26, r0
    27bc:	61 1d       	adc	r22, r1
    27be:	23 1f       	adc	r18, r19
    27c0:	84 9f       	mul	r24, r20
    27c2:	60 0d       	add	r22, r0
    27c4:	21 1d       	adc	r18, r1
    27c6:	82 2f       	mov	r24, r18
    27c8:	76 2f       	mov	r23, r22
    27ca:	6a 2f       	mov	r22, r26
    27cc:	11 24       	eor	r1, r1
    27ce:	9f 57       	subi	r25, 0x7F	; 127
    27d0:	50 40       	sbci	r21, 0x00	; 0
    27d2:	8a f0       	brmi	.+34     	; 0x27f6 <__mulsf3_pse+0x84>
    27d4:	e1 f0       	breq	.+56     	; 0x280e <__mulsf3_pse+0x9c>
    27d6:	88 23       	and	r24, r24
    27d8:	4a f0       	brmi	.+18     	; 0x27ec <__mulsf3_pse+0x7a>
    27da:	ee 0f       	add	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	bb 1f       	adc	r27, r27
    27e0:	66 1f       	adc	r22, r22
    27e2:	77 1f       	adc	r23, r23
    27e4:	88 1f       	adc	r24, r24
    27e6:	91 50       	subi	r25, 0x01	; 1
    27e8:	50 40       	sbci	r21, 0x00	; 0
    27ea:	a9 f7       	brne	.-22     	; 0x27d6 <__mulsf3_pse+0x64>
    27ec:	9e 3f       	cpi	r25, 0xFE	; 254
    27ee:	51 05       	cpc	r21, r1
    27f0:	70 f0       	brcs	.+28     	; 0x280e <__mulsf3_pse+0x9c>
    27f2:	60 cf       	rjmp	.-320    	; 0x26b4 <__fp_inf>
    27f4:	aa cf       	rjmp	.-172    	; 0x274a <__fp_szero>
    27f6:	5f 3f       	cpi	r21, 0xFF	; 255
    27f8:	ec f3       	brlt	.-6      	; 0x27f4 <__mulsf3_pse+0x82>
    27fa:	98 3e       	cpi	r25, 0xE8	; 232
    27fc:	dc f3       	brlt	.-10     	; 0x27f4 <__mulsf3_pse+0x82>
    27fe:	86 95       	lsr	r24
    2800:	77 95       	ror	r23
    2802:	67 95       	ror	r22
    2804:	b7 95       	ror	r27
    2806:	f7 95       	ror	r31
    2808:	e7 95       	ror	r30
    280a:	9f 5f       	subi	r25, 0xFF	; 255
    280c:	c1 f7       	brne	.-16     	; 0x27fe <__mulsf3_pse+0x8c>
    280e:	fe 2b       	or	r31, r30
    2810:	88 0f       	add	r24, r24
    2812:	91 1d       	adc	r25, r1
    2814:	96 95       	lsr	r25
    2816:	87 95       	ror	r24
    2818:	97 f9       	bld	r25, 7
    281a:	08 95       	ret

0000281c <pow>:
    281c:	fa 01       	movw	r30, r20
    281e:	ee 0f       	add	r30, r30
    2820:	ff 1f       	adc	r31, r31
    2822:	30 96       	adiw	r30, 0x00	; 0
    2824:	21 05       	cpc	r18, r1
    2826:	31 05       	cpc	r19, r1
    2828:	99 f1       	breq	.+102    	; 0x2890 <pow+0x74>
    282a:	61 15       	cp	r22, r1
    282c:	71 05       	cpc	r23, r1
    282e:	61 f4       	brne	.+24     	; 0x2848 <pow+0x2c>
    2830:	80 38       	cpi	r24, 0x80	; 128
    2832:	bf e3       	ldi	r27, 0x3F	; 63
    2834:	9b 07       	cpc	r25, r27
    2836:	49 f1       	breq	.+82     	; 0x288a <pow+0x6e>
    2838:	68 94       	set
    283a:	90 38       	cpi	r25, 0x80	; 128
    283c:	81 05       	cpc	r24, r1
    283e:	61 f0       	breq	.+24     	; 0x2858 <pow+0x3c>
    2840:	80 38       	cpi	r24, 0x80	; 128
    2842:	bf ef       	ldi	r27, 0xFF	; 255
    2844:	9b 07       	cpc	r25, r27
    2846:	41 f0       	breq	.+16     	; 0x2858 <pow+0x3c>
    2848:	99 23       	and	r25, r25
    284a:	42 f5       	brpl	.+80     	; 0x289c <pow+0x80>
    284c:	ff 3f       	cpi	r31, 0xFF	; 255
    284e:	e1 05       	cpc	r30, r1
    2850:	31 05       	cpc	r19, r1
    2852:	21 05       	cpc	r18, r1
    2854:	11 f1       	breq	.+68     	; 0x289a <pow+0x7e>
    2856:	e8 94       	clt
    2858:	08 94       	sec
    285a:	e7 95       	ror	r30
    285c:	d9 01       	movw	r26, r18
    285e:	aa 23       	and	r26, r26
    2860:	29 f4       	brne	.+10     	; 0x286c <pow+0x50>
    2862:	ab 2f       	mov	r26, r27
    2864:	be 2f       	mov	r27, r30
    2866:	f8 5f       	subi	r31, 0xF8	; 248
    2868:	d0 f3       	brcs	.-12     	; 0x285e <pow+0x42>
    286a:	10 c0       	rjmp	.+32     	; 0x288c <pow+0x70>
    286c:	ff 5f       	subi	r31, 0xFF	; 255
    286e:	70 f4       	brcc	.+28     	; 0x288c <pow+0x70>
    2870:	a6 95       	lsr	r26
    2872:	e0 f7       	brcc	.-8      	; 0x286c <pow+0x50>
    2874:	f7 39       	cpi	r31, 0x97	; 151
    2876:	50 f0       	brcs	.+20     	; 0x288c <pow+0x70>
    2878:	19 f0       	breq	.+6      	; 0x2880 <pow+0x64>
    287a:	ff 3a       	cpi	r31, 0xAF	; 175
    287c:	38 f4       	brcc	.+14     	; 0x288c <pow+0x70>
    287e:	9f 77       	andi	r25, 0x7F	; 127
    2880:	9f 93       	push	r25
    2882:	0c d0       	rcall	.+24     	; 0x289c <pow+0x80>
    2884:	0f 90       	pop	r0
    2886:	07 fc       	sbrc	r0, 7
    2888:	90 58       	subi	r25, 0x80	; 128
    288a:	08 95       	ret
    288c:	3e f0       	brts	.+14     	; 0x289c <pow+0x80>
    288e:	18 cf       	rjmp	.-464    	; 0x26c0 <__fp_nan>
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	70 e0       	ldi	r23, 0x00	; 0
    2894:	80 e8       	ldi	r24, 0x80	; 128
    2896:	9f e3       	ldi	r25, 0x3F	; 63
    2898:	08 95       	ret
    289a:	4f e7       	ldi	r20, 0x7F	; 127
    289c:	9f 77       	andi	r25, 0x7F	; 127
    289e:	5f 93       	push	r21
    28a0:	4f 93       	push	r20
    28a2:	3f 93       	push	r19
    28a4:	2f 93       	push	r18
    28a6:	9e d0       	rcall	.+316    	; 0x29e4 <log>
    28a8:	2f 91       	pop	r18
    28aa:	3f 91       	pop	r19
    28ac:	4f 91       	pop	r20
    28ae:	5f 91       	pop	r21
    28b0:	52 df       	rcall	.-348    	; 0x2756 <__mulsf3>
    28b2:	05 c0       	rjmp	.+10     	; 0x28be <exp>
    28b4:	19 f4       	brne	.+6      	; 0x28bc <pow+0xa0>
    28b6:	0e f0       	brts	.+2      	; 0x28ba <pow+0x9e>
    28b8:	fd ce       	rjmp	.-518    	; 0x26b4 <__fp_inf>
    28ba:	46 cf       	rjmp	.-372    	; 0x2748 <__fp_zero>
    28bc:	01 cf       	rjmp	.-510    	; 0x26c0 <__fp_nan>

000028be <exp>:
    28be:	2a df       	rcall	.-428    	; 0x2714 <__fp_splitA>
    28c0:	c8 f3       	brcs	.-14     	; 0x28b4 <pow+0x98>
    28c2:	96 38       	cpi	r25, 0x86	; 134
    28c4:	c0 f7       	brcc	.-16     	; 0x28b6 <pow+0x9a>
    28c6:	07 f8       	bld	r0, 7
    28c8:	0f 92       	push	r0
    28ca:	e8 94       	clt
    28cc:	2b e3       	ldi	r18, 0x3B	; 59
    28ce:	3a ea       	ldi	r19, 0xAA	; 170
    28d0:	48 eb       	ldi	r20, 0xB8	; 184
    28d2:	5f e7       	ldi	r21, 0x7F	; 127
    28d4:	4e df       	rcall	.-356    	; 0x2772 <__mulsf3_pse>
    28d6:	0f 92       	push	r0
    28d8:	0f 92       	push	r0
    28da:	0f 92       	push	r0
    28dc:	4d b7       	in	r20, 0x3d	; 61
    28de:	5e b7       	in	r21, 0x3e	; 62
    28e0:	0f 92       	push	r0
    28e2:	c0 d0       	rcall	.+384    	; 0x2a64 <modf>
    28e4:	e4 ee       	ldi	r30, 0xE4	; 228
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	16 d0       	rcall	.+44     	; 0x2916 <__fp_powser>
    28ea:	4f 91       	pop	r20
    28ec:	5f 91       	pop	r21
    28ee:	ef 91       	pop	r30
    28f0:	ff 91       	pop	r31
    28f2:	e5 95       	asr	r30
    28f4:	ee 1f       	adc	r30, r30
    28f6:	ff 1f       	adc	r31, r31
    28f8:	49 f0       	breq	.+18     	; 0x290c <exp+0x4e>
    28fa:	fe 57       	subi	r31, 0x7E	; 126
    28fc:	e0 68       	ori	r30, 0x80	; 128
    28fe:	44 27       	eor	r20, r20
    2900:	ee 0f       	add	r30, r30
    2902:	44 1f       	adc	r20, r20
    2904:	fa 95       	dec	r31
    2906:	e1 f7       	brne	.-8      	; 0x2900 <exp+0x42>
    2908:	41 95       	neg	r20
    290a:	55 0b       	sbc	r21, r21
    290c:	32 d0       	rcall	.+100    	; 0x2972 <ldexp>
    290e:	0f 90       	pop	r0
    2910:	07 fe       	sbrs	r0, 7
    2912:	26 c0       	rjmp	.+76     	; 0x2960 <inverse>
    2914:	08 95       	ret

00002916 <__fp_powser>:
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	1f 93       	push	r17
    291c:	0f 93       	push	r16
    291e:	ff 92       	push	r15
    2920:	ef 92       	push	r14
    2922:	df 92       	push	r13
    2924:	7b 01       	movw	r14, r22
    2926:	8c 01       	movw	r16, r24
    2928:	68 94       	set
    292a:	05 c0       	rjmp	.+10     	; 0x2936 <__fp_powser+0x20>
    292c:	da 2e       	mov	r13, r26
    292e:	ef 01       	movw	r28, r30
    2930:	1e df       	rcall	.-452    	; 0x276e <__mulsf3x>
    2932:	fe 01       	movw	r30, r28
    2934:	e8 94       	clt
    2936:	a5 91       	lpm	r26, Z+
    2938:	25 91       	lpm	r18, Z+
    293a:	35 91       	lpm	r19, Z+
    293c:	45 91       	lpm	r20, Z+
    293e:	55 91       	lpm	r21, Z+
    2940:	ae f3       	brts	.-22     	; 0x292c <__fp_powser+0x16>
    2942:	ef 01       	movw	r28, r30
    2944:	d4 d0       	rcall	.+424    	; 0x2aee <__addsf3x>
    2946:	fe 01       	movw	r30, r28
    2948:	97 01       	movw	r18, r14
    294a:	a8 01       	movw	r20, r16
    294c:	da 94       	dec	r13
    294e:	79 f7       	brne	.-34     	; 0x292e <__fp_powser+0x18>
    2950:	df 90       	pop	r13
    2952:	ef 90       	pop	r14
    2954:	ff 90       	pop	r15
    2956:	0f 91       	pop	r16
    2958:	1f 91       	pop	r17
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <inverse>:
    2960:	9b 01       	movw	r18, r22
    2962:	ac 01       	movw	r20, r24
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	80 e8       	ldi	r24, 0x80	; 128
    296a:	9f e3       	ldi	r25, 0x3F	; 63
    296c:	cd cd       	rjmp	.-1126   	; 0x2508 <__divsf3>
    296e:	a2 ce       	rjmp	.-700    	; 0x26b4 <__fp_inf>
    2970:	11 c1       	rjmp	.+546    	; 0x2b94 <__fp_mpack>

00002972 <ldexp>:
    2972:	d0 de       	rcall	.-608    	; 0x2714 <__fp_splitA>
    2974:	e8 f3       	brcs	.-6      	; 0x2970 <inverse+0x10>
    2976:	99 23       	and	r25, r25
    2978:	d9 f3       	breq	.-10     	; 0x2970 <inverse+0x10>
    297a:	94 0f       	add	r25, r20
    297c:	51 1d       	adc	r21, r1
    297e:	bb f3       	brvs	.-18     	; 0x296e <inverse+0xe>
    2980:	91 50       	subi	r25, 0x01	; 1
    2982:	50 40       	sbci	r21, 0x00	; 0
    2984:	94 f0       	brlt	.+36     	; 0x29aa <ldexp+0x38>
    2986:	59 f0       	breq	.+22     	; 0x299e <ldexp+0x2c>
    2988:	88 23       	and	r24, r24
    298a:	32 f0       	brmi	.+12     	; 0x2998 <ldexp+0x26>
    298c:	66 0f       	add	r22, r22
    298e:	77 1f       	adc	r23, r23
    2990:	88 1f       	adc	r24, r24
    2992:	91 50       	subi	r25, 0x01	; 1
    2994:	50 40       	sbci	r21, 0x00	; 0
    2996:	c1 f7       	brne	.-16     	; 0x2988 <ldexp+0x16>
    2998:	9e 3f       	cpi	r25, 0xFE	; 254
    299a:	51 05       	cpc	r21, r1
    299c:	44 f7       	brge	.-48     	; 0x296e <inverse+0xe>
    299e:	88 0f       	add	r24, r24
    29a0:	91 1d       	adc	r25, r1
    29a2:	96 95       	lsr	r25
    29a4:	87 95       	ror	r24
    29a6:	97 f9       	bld	r25, 7
    29a8:	08 95       	ret
    29aa:	5f 3f       	cpi	r21, 0xFF	; 255
    29ac:	ac f0       	brlt	.+42     	; 0x29d8 <ldexp+0x66>
    29ae:	98 3e       	cpi	r25, 0xE8	; 232
    29b0:	9c f0       	brlt	.+38     	; 0x29d8 <ldexp+0x66>
    29b2:	bb 27       	eor	r27, r27
    29b4:	86 95       	lsr	r24
    29b6:	77 95       	ror	r23
    29b8:	67 95       	ror	r22
    29ba:	b7 95       	ror	r27
    29bc:	08 f4       	brcc	.+2      	; 0x29c0 <ldexp+0x4e>
    29be:	b1 60       	ori	r27, 0x01	; 1
    29c0:	93 95       	inc	r25
    29c2:	c1 f7       	brne	.-16     	; 0x29b4 <ldexp+0x42>
    29c4:	bb 0f       	add	r27, r27
    29c6:	58 f7       	brcc	.-42     	; 0x299e <ldexp+0x2c>
    29c8:	11 f4       	brne	.+4      	; 0x29ce <ldexp+0x5c>
    29ca:	60 ff       	sbrs	r22, 0
    29cc:	e8 cf       	rjmp	.-48     	; 0x299e <ldexp+0x2c>
    29ce:	6f 5f       	subi	r22, 0xFF	; 255
    29d0:	7f 4f       	sbci	r23, 0xFF	; 255
    29d2:	8f 4f       	sbci	r24, 0xFF	; 255
    29d4:	9f 4f       	sbci	r25, 0xFF	; 255
    29d6:	e3 cf       	rjmp	.-58     	; 0x299e <ldexp+0x2c>
    29d8:	b8 ce       	rjmp	.-656    	; 0x274a <__fp_szero>
    29da:	0e f0       	brts	.+2      	; 0x29de <ldexp+0x6c>
    29dc:	db c0       	rjmp	.+438    	; 0x2b94 <__fp_mpack>
    29de:	70 ce       	rjmp	.-800    	; 0x26c0 <__fp_nan>
    29e0:	68 94       	set
    29e2:	68 ce       	rjmp	.-816    	; 0x26b4 <__fp_inf>

000029e4 <log>:
    29e4:	97 de       	rcall	.-722    	; 0x2714 <__fp_splitA>
    29e6:	c8 f3       	brcs	.-14     	; 0x29da <ldexp+0x68>
    29e8:	99 23       	and	r25, r25
    29ea:	d1 f3       	breq	.-12     	; 0x29e0 <ldexp+0x6e>
    29ec:	c6 f3       	brts	.-16     	; 0x29de <ldexp+0x6c>
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	1f 93       	push	r17
    29f4:	0f 93       	push	r16
    29f6:	ff 92       	push	r15
    29f8:	c9 2f       	mov	r28, r25
    29fa:	dd 27       	eor	r29, r29
    29fc:	88 23       	and	r24, r24
    29fe:	2a f0       	brmi	.+10     	; 0x2a0a <log+0x26>
    2a00:	21 97       	sbiw	r28, 0x01	; 1
    2a02:	66 0f       	add	r22, r22
    2a04:	77 1f       	adc	r23, r23
    2a06:	88 1f       	adc	r24, r24
    2a08:	da f7       	brpl	.-10     	; 0x2a00 <log+0x1c>
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e8       	ldi	r20, 0x80	; 128
    2a10:	5f eb       	ldi	r21, 0xBF	; 191
    2a12:	9f e3       	ldi	r25, 0x3F	; 63
    2a14:	88 39       	cpi	r24, 0x98	; 152
    2a16:	20 f0       	brcs	.+8      	; 0x2a20 <log+0x3c>
    2a18:	80 3e       	cpi	r24, 0xE0	; 224
    2a1a:	30 f0       	brcs	.+12     	; 0x2a28 <log+0x44>
    2a1c:	21 96       	adiw	r28, 0x01	; 1
    2a1e:	8f 77       	andi	r24, 0x7F	; 127
    2a20:	55 d0       	rcall	.+170    	; 0x2acc <__addsf3>
    2a22:	ec e0       	ldi	r30, 0x0C	; 12
    2a24:	f1 e0       	ldi	r31, 0x01	; 1
    2a26:	03 c0       	rjmp	.+6      	; 0x2a2e <log+0x4a>
    2a28:	51 d0       	rcall	.+162    	; 0x2acc <__addsf3>
    2a2a:	e9 e3       	ldi	r30, 0x39	; 57
    2a2c:	f1 e0       	ldi	r31, 0x01	; 1
    2a2e:	73 df       	rcall	.-282    	; 0x2916 <__fp_powser>
    2a30:	8b 01       	movw	r16, r22
    2a32:	be 01       	movw	r22, r28
    2a34:	ec 01       	movw	r28, r24
    2a36:	fb 2e       	mov	r15, r27
    2a38:	6f 57       	subi	r22, 0x7F	; 127
    2a3a:	71 09       	sbc	r23, r1
    2a3c:	75 95       	asr	r23
    2a3e:	77 1f       	adc	r23, r23
    2a40:	88 0b       	sbc	r24, r24
    2a42:	99 0b       	sbc	r25, r25
    2a44:	fc dd       	rcall	.-1032   	; 0x263e <__floatsisf>
    2a46:	28 e1       	ldi	r18, 0x18	; 24
    2a48:	32 e7       	ldi	r19, 0x72	; 114
    2a4a:	41 e3       	ldi	r20, 0x31	; 49
    2a4c:	5f e3       	ldi	r21, 0x3F	; 63
    2a4e:	8f de       	rcall	.-738    	; 0x276e <__mulsf3x>
    2a50:	af 2d       	mov	r26, r15
    2a52:	98 01       	movw	r18, r16
    2a54:	ae 01       	movw	r20, r28
    2a56:	ff 90       	pop	r15
    2a58:	0f 91       	pop	r16
    2a5a:	1f 91       	pop	r17
    2a5c:	cf 91       	pop	r28
    2a5e:	df 91       	pop	r29
    2a60:	46 d0       	rcall	.+140    	; 0x2aee <__addsf3x>
    2a62:	3f ce       	rjmp	.-898    	; 0x26e2 <__fp_round>

00002a64 <modf>:
    2a64:	fa 01       	movw	r30, r20
    2a66:	dc 01       	movw	r26, r24
    2a68:	aa 0f       	add	r26, r26
    2a6a:	bb 1f       	adc	r27, r27
    2a6c:	9b 01       	movw	r18, r22
    2a6e:	ac 01       	movw	r20, r24
    2a70:	bf 57       	subi	r27, 0x7F	; 127
    2a72:	28 f4       	brcc	.+10     	; 0x2a7e <modf+0x1a>
    2a74:	22 27       	eor	r18, r18
    2a76:	33 27       	eor	r19, r19
    2a78:	44 27       	eor	r20, r20
    2a7a:	50 78       	andi	r21, 0x80	; 128
    2a7c:	1f c0       	rjmp	.+62     	; 0x2abc <modf+0x58>
    2a7e:	b7 51       	subi	r27, 0x17	; 23
    2a80:	88 f4       	brcc	.+34     	; 0x2aa4 <modf+0x40>
    2a82:	ab 2f       	mov	r26, r27
    2a84:	00 24       	eor	r0, r0
    2a86:	46 95       	lsr	r20
    2a88:	37 95       	ror	r19
    2a8a:	27 95       	ror	r18
    2a8c:	01 1c       	adc	r0, r1
    2a8e:	a3 95       	inc	r26
    2a90:	d2 f3       	brmi	.-12     	; 0x2a86 <modf+0x22>
    2a92:	00 20       	and	r0, r0
    2a94:	69 f0       	breq	.+26     	; 0x2ab0 <modf+0x4c>
    2a96:	22 0f       	add	r18, r18
    2a98:	33 1f       	adc	r19, r19
    2a9a:	44 1f       	adc	r20, r20
    2a9c:	b3 95       	inc	r27
    2a9e:	da f3       	brmi	.-10     	; 0x2a96 <modf+0x32>
    2aa0:	0d d0       	rcall	.+26     	; 0x2abc <modf+0x58>
    2aa2:	13 c0       	rjmp	.+38     	; 0x2aca <__subsf3>
    2aa4:	61 30       	cpi	r22, 0x01	; 1
    2aa6:	71 05       	cpc	r23, r1
    2aa8:	a0 e8       	ldi	r26, 0x80	; 128
    2aaa:	8a 07       	cpc	r24, r26
    2aac:	b9 46       	sbci	r27, 0x69	; 105
    2aae:	30 f4       	brcc	.+12     	; 0x2abc <modf+0x58>
    2ab0:	9b 01       	movw	r18, r22
    2ab2:	ac 01       	movw	r20, r24
    2ab4:	66 27       	eor	r22, r22
    2ab6:	77 27       	eor	r23, r23
    2ab8:	88 27       	eor	r24, r24
    2aba:	90 78       	andi	r25, 0x80	; 128
    2abc:	30 96       	adiw	r30, 0x00	; 0
    2abe:	21 f0       	breq	.+8      	; 0x2ac8 <modf+0x64>
    2ac0:	20 83       	st	Z, r18
    2ac2:	31 83       	std	Z+1, r19	; 0x01
    2ac4:	42 83       	std	Z+2, r20	; 0x02
    2ac6:	53 83       	std	Z+3, r21	; 0x03
    2ac8:	08 95       	ret

00002aca <__subsf3>:
    2aca:	50 58       	subi	r21, 0x80	; 128

00002acc <__addsf3>:
    2acc:	bb 27       	eor	r27, r27
    2ace:	aa 27       	eor	r26, r26
    2ad0:	0e d0       	rcall	.+28     	; 0x2aee <__addsf3x>
    2ad2:	07 ce       	rjmp	.-1010   	; 0x26e2 <__fp_round>
    2ad4:	f8 dd       	rcall	.-1040   	; 0x26c6 <__fp_pscA>
    2ad6:	30 f0       	brcs	.+12     	; 0x2ae4 <__addsf3+0x18>
    2ad8:	fd dd       	rcall	.-1030   	; 0x26d4 <__fp_pscB>
    2ada:	20 f0       	brcs	.+8      	; 0x2ae4 <__addsf3+0x18>
    2adc:	31 f4       	brne	.+12     	; 0x2aea <__addsf3+0x1e>
    2ade:	9f 3f       	cpi	r25, 0xFF	; 255
    2ae0:	11 f4       	brne	.+4      	; 0x2ae6 <__addsf3+0x1a>
    2ae2:	1e f4       	brtc	.+6      	; 0x2aea <__addsf3+0x1e>
    2ae4:	ed cd       	rjmp	.-1062   	; 0x26c0 <__fp_nan>
    2ae6:	0e f4       	brtc	.+2      	; 0x2aea <__addsf3+0x1e>
    2ae8:	e0 95       	com	r30
    2aea:	e7 fb       	bst	r30, 7
    2aec:	e3 cd       	rjmp	.-1082   	; 0x26b4 <__fp_inf>

00002aee <__addsf3x>:
    2aee:	e9 2f       	mov	r30, r25
    2af0:	09 de       	rcall	.-1006   	; 0x2704 <__fp_split3>
    2af2:	80 f3       	brcs	.-32     	; 0x2ad4 <__addsf3+0x8>
    2af4:	ba 17       	cp	r27, r26
    2af6:	62 07       	cpc	r22, r18
    2af8:	73 07       	cpc	r23, r19
    2afa:	84 07       	cpc	r24, r20
    2afc:	95 07       	cpc	r25, r21
    2afe:	18 f0       	brcs	.+6      	; 0x2b06 <__addsf3x+0x18>
    2b00:	71 f4       	brne	.+28     	; 0x2b1e <__addsf3x+0x30>
    2b02:	9e f5       	brtc	.+102    	; 0x2b6a <__addsf3x+0x7c>
    2b04:	21 ce       	rjmp	.-958    	; 0x2748 <__fp_zero>
    2b06:	0e f4       	brtc	.+2      	; 0x2b0a <__addsf3x+0x1c>
    2b08:	e0 95       	com	r30
    2b0a:	0b 2e       	mov	r0, r27
    2b0c:	ba 2f       	mov	r27, r26
    2b0e:	a0 2d       	mov	r26, r0
    2b10:	0b 01       	movw	r0, r22
    2b12:	b9 01       	movw	r22, r18
    2b14:	90 01       	movw	r18, r0
    2b16:	0c 01       	movw	r0, r24
    2b18:	ca 01       	movw	r24, r20
    2b1a:	a0 01       	movw	r20, r0
    2b1c:	11 24       	eor	r1, r1
    2b1e:	ff 27       	eor	r31, r31
    2b20:	59 1b       	sub	r21, r25
    2b22:	99 f0       	breq	.+38     	; 0x2b4a <__addsf3x+0x5c>
    2b24:	59 3f       	cpi	r21, 0xF9	; 249
    2b26:	50 f4       	brcc	.+20     	; 0x2b3c <__addsf3x+0x4e>
    2b28:	50 3e       	cpi	r21, 0xE0	; 224
    2b2a:	68 f1       	brcs	.+90     	; 0x2b86 <__addsf3x+0x98>
    2b2c:	1a 16       	cp	r1, r26
    2b2e:	f0 40       	sbci	r31, 0x00	; 0
    2b30:	a2 2f       	mov	r26, r18
    2b32:	23 2f       	mov	r18, r19
    2b34:	34 2f       	mov	r19, r20
    2b36:	44 27       	eor	r20, r20
    2b38:	58 5f       	subi	r21, 0xF8	; 248
    2b3a:	f3 cf       	rjmp	.-26     	; 0x2b22 <__addsf3x+0x34>
    2b3c:	46 95       	lsr	r20
    2b3e:	37 95       	ror	r19
    2b40:	27 95       	ror	r18
    2b42:	a7 95       	ror	r26
    2b44:	f0 40       	sbci	r31, 0x00	; 0
    2b46:	53 95       	inc	r21
    2b48:	c9 f7       	brne	.-14     	; 0x2b3c <__addsf3x+0x4e>
    2b4a:	7e f4       	brtc	.+30     	; 0x2b6a <__addsf3x+0x7c>
    2b4c:	1f 16       	cp	r1, r31
    2b4e:	ba 0b       	sbc	r27, r26
    2b50:	62 0b       	sbc	r22, r18
    2b52:	73 0b       	sbc	r23, r19
    2b54:	84 0b       	sbc	r24, r20
    2b56:	ba f0       	brmi	.+46     	; 0x2b86 <__addsf3x+0x98>
    2b58:	91 50       	subi	r25, 0x01	; 1
    2b5a:	a1 f0       	breq	.+40     	; 0x2b84 <__addsf3x+0x96>
    2b5c:	ff 0f       	add	r31, r31
    2b5e:	bb 1f       	adc	r27, r27
    2b60:	66 1f       	adc	r22, r22
    2b62:	77 1f       	adc	r23, r23
    2b64:	88 1f       	adc	r24, r24
    2b66:	c2 f7       	brpl	.-16     	; 0x2b58 <__addsf3x+0x6a>
    2b68:	0e c0       	rjmp	.+28     	; 0x2b86 <__addsf3x+0x98>
    2b6a:	ba 0f       	add	r27, r26
    2b6c:	62 1f       	adc	r22, r18
    2b6e:	73 1f       	adc	r23, r19
    2b70:	84 1f       	adc	r24, r20
    2b72:	48 f4       	brcc	.+18     	; 0x2b86 <__addsf3x+0x98>
    2b74:	87 95       	ror	r24
    2b76:	77 95       	ror	r23
    2b78:	67 95       	ror	r22
    2b7a:	b7 95       	ror	r27
    2b7c:	f7 95       	ror	r31
    2b7e:	9e 3f       	cpi	r25, 0xFE	; 254
    2b80:	08 f0       	brcs	.+2      	; 0x2b84 <__addsf3x+0x96>
    2b82:	b3 cf       	rjmp	.-154    	; 0x2aea <__addsf3+0x1e>
    2b84:	93 95       	inc	r25
    2b86:	88 0f       	add	r24, r24
    2b88:	08 f0       	brcs	.+2      	; 0x2b8c <__addsf3x+0x9e>
    2b8a:	99 27       	eor	r25, r25
    2b8c:	ee 0f       	add	r30, r30
    2b8e:	97 95       	ror	r25
    2b90:	87 95       	ror	r24
    2b92:	08 95       	ret

00002b94 <__fp_mpack>:
    2b94:	9f 3f       	cpi	r25, 0xFF	; 255
    2b96:	31 f0       	breq	.+12     	; 0x2ba4 <__fp_mpack_finite+0xc>

00002b98 <__fp_mpack_finite>:
    2b98:	91 50       	subi	r25, 0x01	; 1
    2b9a:	20 f4       	brcc	.+8      	; 0x2ba4 <__fp_mpack_finite+0xc>
    2b9c:	87 95       	ror	r24
    2b9e:	77 95       	ror	r23
    2ba0:	67 95       	ror	r22
    2ba2:	b7 95       	ror	r27
    2ba4:	88 0f       	add	r24, r24
    2ba6:	91 1d       	adc	r25, r1
    2ba8:	96 95       	lsr	r25
    2baa:	87 95       	ror	r24
    2bac:	97 f9       	bld	r25, 7
    2bae:	08 95       	ret

00002bb0 <__udivmodhi4>:
    2bb0:	aa 1b       	sub	r26, r26
    2bb2:	bb 1b       	sub	r27, r27
    2bb4:	51 e1       	ldi	r21, 0x11	; 17
    2bb6:	07 c0       	rjmp	.+14     	; 0x2bc6 <__udivmodhi4_ep>

00002bb8 <__udivmodhi4_loop>:
    2bb8:	aa 1f       	adc	r26, r26
    2bba:	bb 1f       	adc	r27, r27
    2bbc:	a6 17       	cp	r26, r22
    2bbe:	b7 07       	cpc	r27, r23
    2bc0:	10 f0       	brcs	.+4      	; 0x2bc6 <__udivmodhi4_ep>
    2bc2:	a6 1b       	sub	r26, r22
    2bc4:	b7 0b       	sbc	r27, r23

00002bc6 <__udivmodhi4_ep>:
    2bc6:	88 1f       	adc	r24, r24
    2bc8:	99 1f       	adc	r25, r25
    2bca:	5a 95       	dec	r21
    2bcc:	a9 f7       	brne	.-22     	; 0x2bb8 <__udivmodhi4_loop>
    2bce:	80 95       	com	r24
    2bd0:	90 95       	com	r25
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	08 95       	ret

00002bd8 <__divmodhi4>:
    2bd8:	97 fb       	bst	r25, 7
    2bda:	09 2e       	mov	r0, r25
    2bdc:	07 26       	eor	r0, r23
    2bde:	0a d0       	rcall	.+20     	; 0x2bf4 <__divmodhi4_neg1>
    2be0:	77 fd       	sbrc	r23, 7
    2be2:	04 d0       	rcall	.+8      	; 0x2bec <__divmodhi4_neg2>
    2be4:	e5 df       	rcall	.-54     	; 0x2bb0 <__udivmodhi4>
    2be6:	06 d0       	rcall	.+12     	; 0x2bf4 <__divmodhi4_neg1>
    2be8:	00 20       	and	r0, r0
    2bea:	1a f4       	brpl	.+6      	; 0x2bf2 <__divmodhi4_exit>

00002bec <__divmodhi4_neg2>:
    2bec:	70 95       	com	r23
    2bee:	61 95       	neg	r22
    2bf0:	7f 4f       	sbci	r23, 0xFF	; 255

00002bf2 <__divmodhi4_exit>:
    2bf2:	08 95       	ret

00002bf4 <__divmodhi4_neg1>:
    2bf4:	f6 f7       	brtc	.-4      	; 0x2bf2 <__divmodhi4_exit>
    2bf6:	90 95       	com	r25
    2bf8:	81 95       	neg	r24
    2bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2bfc:	08 95       	ret

00002bfe <__prologue_saves__>:
    2bfe:	2f 92       	push	r2
    2c00:	3f 92       	push	r3
    2c02:	4f 92       	push	r4
    2c04:	5f 92       	push	r5
    2c06:	6f 92       	push	r6
    2c08:	7f 92       	push	r7
    2c0a:	8f 92       	push	r8
    2c0c:	9f 92       	push	r9
    2c0e:	af 92       	push	r10
    2c10:	bf 92       	push	r11
    2c12:	cf 92       	push	r12
    2c14:	df 92       	push	r13
    2c16:	ef 92       	push	r14
    2c18:	ff 92       	push	r15
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	ca 1b       	sub	r28, r26
    2c28:	db 0b       	sbc	r29, r27
    2c2a:	0f b6       	in	r0, 0x3f	; 63
    2c2c:	f8 94       	cli
    2c2e:	de bf       	out	0x3e, r29	; 62
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	cd bf       	out	0x3d, r28	; 61
    2c34:	19 94       	eijmp

00002c36 <__epilogue_restores__>:
    2c36:	2a 88       	ldd	r2, Y+18	; 0x12
    2c38:	39 88       	ldd	r3, Y+17	; 0x11
    2c3a:	48 88       	ldd	r4, Y+16	; 0x10
    2c3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c40:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c42:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c44:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c46:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c48:	b9 84       	ldd	r11, Y+9	; 0x09
    2c4a:	c8 84       	ldd	r12, Y+8	; 0x08
    2c4c:	df 80       	ldd	r13, Y+7	; 0x07
    2c4e:	ee 80       	ldd	r14, Y+6	; 0x06
    2c50:	fd 80       	ldd	r15, Y+5	; 0x05
    2c52:	0c 81       	ldd	r16, Y+4	; 0x04
    2c54:	1b 81       	ldd	r17, Y+3	; 0x03
    2c56:	aa 81       	ldd	r26, Y+2	; 0x02
    2c58:	b9 81       	ldd	r27, Y+1	; 0x01
    2c5a:	ce 0f       	add	r28, r30
    2c5c:	d1 1d       	adc	r29, r1
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	cd bf       	out	0x3d, r28	; 61
    2c68:	ed 01       	movw	r28, r26
    2c6a:	08 95       	ret

00002c6c <_exit>:
    2c6c:	f8 94       	cli

00002c6e <__stop_program>:
    2c6e:	ff cf       	rjmp	.-2      	; 0x2c6e <__stop_program>
