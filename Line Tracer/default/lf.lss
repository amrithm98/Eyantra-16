
lf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  0000155e  000015f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000155e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800308  00800308  000016fa  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003f3  00000000  00000000  0000171a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001151  00000000  00000000  00001b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b0  00000000  00000000  00002c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e9c  00000000  00000000  00002f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00003dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ed  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004d7  00000000  00000000  00004469  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00004940  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__vector_5>
      18:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e5       	ldi	r30, 0x5E	; 94
      fc:	f5 e1       	ldi	r31, 0x15	; 21
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a6 32       	cpi	r26, 0x26	; 38
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 2b 04 	call	0x856	; 0x856 <main>
     122:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     12a:	86 e6       	ldi	r24, 0x66	; 102
     12c:	9e e0       	ldi	r25, 0x0E	; 14
     12e:	fc 01       	movw	r30, r24
     130:	31 97       	sbiw	r30, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcd_set_4bit+0x6>
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     138:	40 e3       	ldi	r20, 0x30	; 48
     13a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     13c:	42 9a       	sbi	0x08, 2	; 8
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	38 e4       	ldi	r19, 0x48	; 72
     142:	f9 01       	movw	r30, r18
     144:	31 97       	sbiw	r30, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	fc 01       	movw	r30, r24
     14c:	31 97       	sbiw	r30, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     150:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     152:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     154:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     156:	42 9a       	sbi	0x08, 2	; 8
     158:	f9 01       	movw	r30, r18
     15a:	31 97       	sbiw	r30, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     15e:	42 98       	cbi	0x08, 2	; 8
     160:	fc 01       	movw	r30, r24
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     166:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     168:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     16a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     16c:	42 9a       	sbi	0x08, 2	; 8
     16e:	f9 01       	movw	r30, r18
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     174:	42 98       	cbi	0x08, 2	; 8
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     17a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     17c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     17e:	80 e2       	ldi	r24, 0x20	; 32
     180:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     182:	42 9a       	sbi	0x08, 2	; 8
     184:	c9 01       	movw	r24, r18
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     18a:	42 98       	cbi	0x08, 2	; 8

	
}
     18c:	08 95       	ret

0000018e <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     18e:	98 b1       	in	r25, 0x08	; 8
     190:	9f 70       	andi	r25, 0x0F	; 15
     192:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     194:	28 b1       	in	r18, 0x08	; 8
     196:	98 2f       	mov	r25, r24
     198:	90 7f       	andi	r25, 0xF0	; 240
     19a:	92 2b       	or	r25, r18
     19c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     19e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1a0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1a2:	42 9a       	sbi	0x08, 2	; 8
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	38 e4       	ldi	r19, 0x48	; 72
     1a8:	f9 01       	movw	r30, r18
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1ae:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 70       	andi	r25, 0x0F	; 15
     1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     1b6:	98 b1       	in	r25, 0x08	; 8
     1b8:	82 95       	swap	r24
     1ba:	80 7f       	andi	r24, 0xF0	; 240
     1bc:	98 2b       	or	r25, r24
     1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1c4:	42 9a       	sbi	0x08, 2	; 8
     1c6:	c9 01       	movw	r24, r18
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1cc:	42 98       	cbi	0x08, 2	; 8
}
     1ce:	08 95       	ret

000001d0 <lcd_init>:
     1d0:	86 e6       	ldi	r24, 0x66	; 102
     1d2:	9e e0       	ldi	r25, 0x0E	; 14
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x4>
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     1d8:	88 e2       	ldi	r24, 0x28	; 40
     1da:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x01);
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x06);
     1e4:	86 e0       	ldi	r24, 0x06	; 6
     1e6:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x0E);
     1ea:	8e e0       	ldi	r24, 0x0E	; 14
     1ec:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x80);
     1f0:	80 e8       	ldi	r24, 0x80	; 128
     1f2:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
		
}
     1f6:	08 95       	ret

000001f8 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     1f8:	98 b1       	in	r25, 0x08	; 8
     1fa:	9f 70       	andi	r25, 0x0F	; 15
     1fc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     1fe:	28 b1       	in	r18, 0x08	; 8
     200:	98 2f       	mov	r25, r24
     202:	90 7f       	andi	r25, 0xF0	; 240
     204:	92 2b       	or	r25, r18
     206:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     208:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     20a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     20c:	42 9a       	sbi	0x08, 2	; 8
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	38 e4       	ldi	r19, 0x48	; 72
     212:	f9 01       	movw	r30, r18
     214:	31 97       	sbiw	r30, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     218:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     21a:	98 b1       	in	r25, 0x08	; 8
     21c:	9f 70       	andi	r25, 0x0F	; 15
     21e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     220:	98 b1       	in	r25, 0x08	; 8
     222:	82 95       	swap	r24
     224:	80 7f       	andi	r24, 0xF0	; 240
     226:	98 2b       	or	r25, r24
     228:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     22a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     22c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     22e:	42 9a       	sbi	0x08, 2	; 8
     230:	c9 01       	movw	r24, r18
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     236:	42 98       	cbi	0x08, 2	; 8
}
     238:	08 95       	ret

0000023a <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     23a:	80 e8       	ldi	r24, 0x80	; 128
     23c:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
}
     240:	08 95       	ret

00000242 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	ec 01       	movw	r28, r24
     248:	03 c0       	rjmp	.+6      	; 0x250 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     24a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
		str++;
     24e:	21 96       	adiw	r28, 0x01	; 1


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     250:	88 81       	ld	r24, Y
     252:	88 23       	and	r24, r24
     254:	d1 f7       	brne	.-12     	; 0x24a <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	69 f0       	breq	.+26     	; 0x27a <lcd_cursor+0x1e>
     260:	83 30       	cpi	r24, 0x03	; 3
     262:	18 f4       	brcc	.+6      	; 0x26a <lcd_cursor+0xe>
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	a9 f4       	brne	.+42     	; 0x292 <lcd_cursor+0x36>
     268:	05 c0       	rjmp	.+10     	; 0x274 <lcd_cursor+0x18>
     26a:	83 30       	cpi	r24, 0x03	; 3
     26c:	49 f0       	breq	.+18     	; 0x280 <lcd_cursor+0x24>
     26e:	84 30       	cpi	r24, 0x04	; 4
     270:	81 f4       	brne	.+32     	; 0x292 <lcd_cursor+0x36>
     272:	0b c0       	rjmp	.+22     	; 0x28a <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     274:	86 2f       	mov	r24, r22
     276:	81 58       	subi	r24, 0x81	; 129
     278:	05 c0       	rjmp	.+10     	; 0x284 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     27a:	86 2f       	mov	r24, r22
     27c:	81 54       	subi	r24, 0x41	; 65
     27e:	02 c0       	rjmp	.+4      	; 0x284 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     280:	86 2f       	mov	r24, r22
     282:	8d 56       	subi	r24, 0x6D	; 109
     284:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     288:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     28a:	86 2f       	mov	r24, r22
     28c:	8d 52       	subi	r24, 0x2D	; 45
     28e:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     292:	08 95       	ret

00000294 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	8a 01       	movw	r16, r20
     29e:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2a0:	88 23       	and	r24, r24
     2a2:	11 f0       	breq	.+4      	; 0x2a8 <lcd_print+0x14>
     2a4:	66 23       	and	r22, r22
     2a6:	19 f4       	brne	.+6      	; 0x2ae <lcd_print+0x1a>
	{
		lcd_home();
     2a8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_home>
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     2ae:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_cursor>
	}
	if(digits==5 || flag==1)
     2b2:	c5 30       	cpi	r28, 0x05	; 5
     2b4:	d1 05       	cpc	r29, r1
     2b6:	71 f4       	brne	.+28     	; 0x2d4 <lcd_print+0x40>
	{
		million=value/10000+48;
     2b8:	c8 01       	movw	r24, r16
     2ba:	60 e1       	ldi	r22, 0x10	; 16
     2bc:	77 e2       	ldi	r23, 0x27	; 39
     2be:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__udivmodhi4>
     2c2:	cb 01       	movw	r24, r22
     2c4:	c0 96       	adiw	r24, 0x30	; 48
     2c6:	90 93 16 03 	sts	0x0316, r25
     2ca:	80 93 15 03 	sts	0x0315, r24
		lcd_wr_char(million);
     2ce:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     2d2:	05 c0       	rjmp	.+10     	; 0x2de <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     2d4:	c4 30       	cpi	r28, 0x04	; 4
     2d6:	d1 05       	cpc	r29, r1
     2d8:	11 f0       	breq	.+4      	; 0x2de <lcd_print+0x4a>
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	16 c0       	rjmp	.+44     	; 0x30a <lcd_print+0x76>
	{
		temp = value/1000;
     2de:	c8 01       	movw	r24, r16
     2e0:	68 ee       	ldi	r22, 0xE8	; 232
     2e2:	73 e0       	ldi	r23, 0x03	; 3
     2e4:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__udivmodhi4>
     2e8:	cb 01       	movw	r24, r22
     2ea:	60 93 17 03 	sts	0x0317, r22
     2ee:	90 93 18 03 	sts	0x0318, r25
		thousand = temp%10 + 48;
     2f2:	6a e0       	ldi	r22, 0x0A	; 10
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__udivmodhi4>
     2fa:	c0 96       	adiw	r24, 0x30	; 48
     2fc:	90 93 23 03 	sts	0x0323, r25
     300:	80 93 22 03 	sts	0x0322, r24
		lcd_wr_char(thousand);
     304:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     308:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     30a:	c3 30       	cpi	r28, 0x03	; 3
     30c:	d1 05       	cpc	r29, r1
     30e:	21 f0       	breq	.+8      	; 0x318 <lcd_print+0x84>
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	11 f0       	breq	.+4      	; 0x318 <lcd_print+0x84>
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	16 c0       	rjmp	.+44     	; 0x344 <lcd_print+0xb0>
	{
		temp = value/100;
     318:	c8 01       	movw	r24, r16
     31a:	64 e6       	ldi	r22, 0x64	; 100
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__udivmodhi4>
     322:	cb 01       	movw	r24, r22
     324:	60 93 17 03 	sts	0x0317, r22
     328:	90 93 18 03 	sts	0x0318, r25
		hundred = temp%10 + 48;
     32c:	6a e0       	ldi	r22, 0x0A	; 10
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__udivmodhi4>
     334:	c0 96       	adiw	r24, 0x30	; 48
     336:	90 93 1f 03 	sts	0x031F, r25
     33a:	80 93 1e 03 	sts	0x031E, r24
		lcd_wr_char(hundred);
     33e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     342:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     344:	c2 30       	cpi	r28, 0x02	; 2
     346:	d1 05       	cpc	r29, r1
     348:	21 f0       	breq	.+8      	; 0x352 <lcd_print+0xbe>
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	11 f0       	breq	.+4      	; 0x352 <lcd_print+0xbe>
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	16 c0       	rjmp	.+44     	; 0x37e <lcd_print+0xea>
	{
		temp = value/10;
     352:	c8 01       	movw	r24, r16
     354:	6a e0       	ldi	r22, 0x0A	; 10
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__udivmodhi4>
     35c:	cb 01       	movw	r24, r22
     35e:	60 93 17 03 	sts	0x0317, r22
     362:	90 93 18 03 	sts	0x0318, r25
		tens = temp%10 + 48;
     366:	6a e0       	ldi	r22, 0x0A	; 10
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__udivmodhi4>
     36e:	c0 96       	adiw	r24, 0x30	; 48
     370:	90 93 1d 03 	sts	0x031D, r25
     374:	80 93 1c 03 	sts	0x031C, r24
		lcd_wr_char(tens);
     378:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     37c:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     37e:	c1 30       	cpi	r28, 0x01	; 1
     380:	d1 05       	cpc	r29, r1
     382:	11 f0       	breq	.+4      	; 0x388 <lcd_print+0xf4>
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	61 f4       	brne	.+24     	; 0x3a0 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     388:	c8 01       	movw	r24, r16
     38a:	6a e0       	ldi	r22, 0x0A	; 10
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__udivmodhi4>
     392:	c0 96       	adiw	r24, 0x30	; 48
     394:	90 93 21 03 	sts	0x0321, r25
     398:	80 93 20 03 	sts	0x0320, r24
		lcd_wr_char(unit);
     39c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
	}
	if(digits>5)
     3a0:	26 97       	sbiw	r28, 0x06	; 6
     3a2:	1c f0       	brlt	.+6      	; 0x3aa <lcd_print+0x116>
	{
		lcd_wr_char('E');
     3a4:	85 e4       	ldi	r24, 0x45	; 69
     3a6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
	}
	
}
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	08 95       	ret

000003b4 <motion_pin_config>:

volatile unsigned int Degrees; //to accept angle in degrees for turning

void motion_pin_config(void)
{
	DDRA= DDRA | 0x0F; //0000 1111 --->	PA3 PA2 PA1 PA0 (HIGH)
     3b4:	81 b1       	in	r24, 0x01	; 1
     3b6:	8f 60       	ori	r24, 0x0F	; 15
     3b8:	81 b9       	out	0x01, r24	; 1
	DDRL= DDRL | 0x18; //0001 1000 ---> PL3 PL4 (HIGH)
     3ba:	ea e0       	ldi	r30, 0x0A	; 10
     3bc:	f1 e0       	ldi	r31, 0x01	; 1
     3be:	80 81       	ld	r24, Z
     3c0:	88 61       	ori	r24, 0x18	; 24
     3c2:	80 83       	st	Z, r24
	PORTA= PORTA & 0xF0;
     3c4:	82 b1       	in	r24, 0x02	; 2
     3c6:	80 7f       	andi	r24, 0xF0	; 240
     3c8:	82 b9       	out	0x02, r24	; 2
	PORTL= PORTL | 0x18;
     3ca:	eb e0       	ldi	r30, 0x0B	; 11
     3cc:	f1 e0       	ldi	r31, 0x01	; 1
     3ce:	80 81       	ld	r24, Z
     3d0:	88 61       	ori	r24, 0x18	; 24
     3d2:	80 83       	st	Z, r24
}
     3d4:	08 95       	ret

000003d6 <left_encoder_pin_config>:

void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     3d6:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     3d8:	74 9a       	sbi	0x0e, 4	; 14
}
     3da:	08 95       	ret

000003dc <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     3dc:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     3de:	75 9a       	sbi	0x0e, 5	; 14
}
     3e0:	08 95       	ret

000003e2 <init_timer5>:

void init_timer5(void)	//Timer For PWM
{
	TCCR5B = 0x00;	//stop
     3e2:	a1 e2       	ldi	r26, 0x21	; 33
     3e4:	b1 e0       	ldi	r27, 0x01	; 1
     3e6:	1c 92       	st	X, r1
	TCNT5H = 0xFF;	//counter higher 8 bit value to which OCRxH is compared with
     3e8:	2f ef       	ldi	r18, 0xFF	; 255
     3ea:	20 93 25 01 	sts	0x0125, r18
	TCNT5L = 0x01;	//counter higher 8 bit value to which OCRxH is compared with
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high for left motor
     3f4:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low for left motor
     3f8:	20 93 28 01 	sts	0x0128, r18
	OCR5BH = 0x00;	//Output compare register high for right motor	
     3fc:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register high for right motor
     400:	20 93 2a 01 	sts	0x012A, r18
	OCR5C  = 0xFF;	//Motor C1
     404:	ec e2       	ldi	r30, 0x2C	; 44
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	8f ef       	ldi	r24, 0xFF	; 255
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	91 83       	std	Z+1, r25	; 0x01
     40e:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Motor C1
     410:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;
     414:	20 83       	st	Z, r18
	TCCR5A = 0xA9;
     416:	89 ea       	ldi	r24, 0xA9	; 169
     418:	80 93 20 01 	sts	0x0120, r24
/* COM5A1=1,COM5A0=0,COM5B1=1,COM5B0=0,COM5C1=1,COM5C0=0
For Overriding normal port functionality to OCRnA ouputs
WGM51=0,WGM50=1 along with WGM52 in TCCRB for selecting fast PWM 8 bit mode
*/

	TCCR5B = 0x0B;	//WGM12=1,CS12=0,CS11=1,CS10=1	(Prescaler=64)
     41c:	8b e0       	ldi	r24, 0x0B	; 11
     41e:	8c 93       	st	X, r24

}
     420:	08 95       	ret

00000422 <left_position_encoder_interrupt_init>:
void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     422:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     424:	ea e6       	ldi	r30, 0x6A	; 106
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	82 60       	ori	r24, 0x02	; 2
     42c:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     42e:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     430:	78 94       	sei
}
     432:	08 95       	ret

00000434 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     434:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     436:	ea e6       	ldi	r30, 0x6A	; 106
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	88 60       	ori	r24, 0x08	; 8
     43e:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     440:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     442:	78 94       	sei
}
     444:	08 95       	ret

00000446 <velocity>:
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	OCR5AL = (unsigned char) left;
     446:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char) right;
     44a:	60 93 2a 01 	sts	0x012A, r22
}
     44e:	08 95       	ret

00000450 <motion_set>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     450:	92 b1       	in	r25, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     452:	90 7f       	andi	r25, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     454:	8f 70       	andi	r24, 0x0F	; 15
     456:	89 2b       	or	r24, r25
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     458:	82 b9       	out	0x02, r24	; 2
}
     45a:	08 95       	ret

0000045c <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	8f 93       	push	r24
     468:	9f 93       	push	r25
     46a:	af 93       	push	r26
     46c:	bf 93       	push	r27
 ShaftCountRight++;  //increment right shaft position count
     46e:	80 91 0f 03 	lds	r24, 0x030F
     472:	90 91 10 03 	lds	r25, 0x0310
     476:	a0 91 11 03 	lds	r26, 0x0311
     47a:	b0 91 12 03 	lds	r27, 0x0312
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	a1 1d       	adc	r26, r1
     482:	b1 1d       	adc	r27, r1
     484:	80 93 0f 03 	sts	0x030F, r24
     488:	90 93 10 03 	sts	0x0310, r25
     48c:	a0 93 11 03 	sts	0x0311, r26
     490:	b0 93 12 03 	sts	0x0312, r27
}
     494:	bf 91       	pop	r27
     496:	af 91       	pop	r26
     498:	9f 91       	pop	r25
     49a:	8f 91       	pop	r24
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <__vector_5>:
//ISR for left position encoder
ISR(INT4_vect)
{
     4a6:	1f 92       	push	r1
     4a8:	0f 92       	push	r0
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	0f 92       	push	r0
     4ae:	11 24       	eor	r1, r1
     4b0:	8f 93       	push	r24
     4b2:	9f 93       	push	r25
     4b4:	af 93       	push	r26
     4b6:	bf 93       	push	r27
 ShaftCountLeft++;  //increment left shaft position count
     4b8:	80 91 0b 03 	lds	r24, 0x030B
     4bc:	90 91 0c 03 	lds	r25, 0x030C
     4c0:	a0 91 0d 03 	lds	r26, 0x030D
     4c4:	b0 91 0e 03 	lds	r27, 0x030E
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	a1 1d       	adc	r26, r1
     4cc:	b1 1d       	adc	r27, r1
     4ce:	80 93 0b 03 	sts	0x030B, r24
     4d2:	90 93 0c 03 	sts	0x030C, r25
     4d6:	a0 93 0d 03 	sts	0x030D, r26
     4da:	b0 93 0e 03 	sts	0x030E, r27
}
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	0f 90       	pop	r0
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	0f 90       	pop	r0
     4ec:	1f 90       	pop	r1
     4ee:	18 95       	reti

000004f0 <stop>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     4f0:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     4f2:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     4f4:	82 b9       	out	0x02, r24	; 2
 ShaftCountLeft++;  //increment left shaft position count
}
void stop (void)
{
  motion_set(0x00);
}
     4f6:	08 95       	ret

000004f8 <angle_rotate>:
void angle_rotate(unsigned int Degrees)
{
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;
 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	bc 01       	movw	r22, r24
     506:	cd 01       	movw	r24, r26
     508:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__floatunsisf>
     50c:	28 e4       	ldi	r18, 0x48	; 72
     50e:	31 ee       	ldi	r19, 0xE1	; 225
     510:	42 e8       	ldi	r20, 0x82	; 130
     512:	50 e4       	ldi	r21, 0x40	; 64
     514:	0e 94 c4 06 	call	0xd88	; 0xd88 <__divsf3>
     518:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fixunssfsi>
     51c:	7b 01       	movw	r14, r22
     51e:	8c 01       	movw	r16, r24
 ShaftCountRight = 0; 
     520:	10 92 0f 03 	sts	0x030F, r1
     524:	10 92 10 03 	sts	0x0310, r1
     528:	10 92 11 03 	sts	0x0311, r1
     52c:	10 92 12 03 	sts	0x0312, r1
 ShaftCountLeft = 0; 
     530:	10 92 0b 03 	sts	0x030B, r1
     534:	10 92 0c 03 	sts	0x030C, r1
     538:	10 92 0d 03 	sts	0x030D, r1
     53c:	10 92 0e 03 	sts	0x030E, r1
 while (1)
 {
  lcd_print(1,1,ShaftCountLeft,2);
     540:	20 91 0b 03 	lds	r18, 0x030B
     544:	30 91 0c 03 	lds	r19, 0x030C
     548:	40 91 0d 03 	lds	r20, 0x030D
     54c:	50 91 0e 03 	lds	r21, 0x030E
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	a9 01       	movw	r20, r18
     556:	22 e0       	ldi	r18, 0x02	; 2
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
  lcd_print(2,1,ShaftCountRight,2);
     55e:	20 91 0f 03 	lds	r18, 0x030F
     562:	30 91 10 03 	lds	r19, 0x0310
     566:	40 91 11 03 	lds	r20, 0x0311
     56a:	50 91 12 03 	lds	r21, 0x0312
     56e:	82 e0       	ldi	r24, 0x02	; 2
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	a9 01       	movw	r20, r18
     574:	22 e0       	ldi	r18, 0x02	; 2
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     57c:	80 91 0f 03 	lds	r24, 0x030F
     580:	90 91 10 03 	lds	r25, 0x0310
     584:	a0 91 11 03 	lds	r26, 0x0311
     588:	b0 91 12 03 	lds	r27, 0x0312
     58c:	20 91 0b 03 	lds	r18, 0x030B
     590:	30 91 0c 03 	lds	r19, 0x030C
     594:	40 91 0d 03 	lds	r20, 0x030D
     598:	50 91 0e 03 	lds	r21, 0x030E
     59c:	8e 15       	cp	r24, r14
     59e:	9f 05       	cpc	r25, r15
     5a0:	a0 07       	cpc	r26, r16
     5a2:	b1 07       	cpc	r27, r17
     5a4:	28 f4       	brcc	.+10     	; 0x5b0 <angle_rotate+0xb8>
     5a6:	2e 15       	cp	r18, r14
     5a8:	3f 05       	cpc	r19, r15
     5aa:	40 07       	cpc	r20, r16
     5ac:	51 07       	cpc	r21, r17
     5ae:	40 f2       	brcs	.-112    	; 0x540 <angle_rotate+0x48>

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     5b0:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     5b2:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     5b4:	82 b9       	out	0x02, r24	; 2
  lcd_print(2,1,ShaftCountRight,2);
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
  			break;
 }
 stop(); //Stop robot
}
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	ff 90       	pop	r15
     5bc:	ef 90       	pop	r14
     5be:	08 95       	ret

000005c0 <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
     5c0:	ef 92       	push	r14
     5c2:	ff 92       	push	r15
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount =(float) DistanceInMM / 5.338; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     5c8:	a0 e0       	ldi	r26, 0x00	; 0
     5ca:	b0 e0       	ldi	r27, 0x00	; 0
     5cc:	bc 01       	movw	r22, r24
     5ce:	cd 01       	movw	r24, r26
     5d0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__floatunsisf>
     5d4:	25 ee       	ldi	r18, 0xE5	; 229
     5d6:	30 ed       	ldi	r19, 0xD0	; 208
     5d8:	4a ea       	ldi	r20, 0xAA	; 170
     5da:	50 e4       	ldi	r21, 0x40	; 64
     5dc:	0e 94 c4 06 	call	0xd88	; 0xd88 <__divsf3>
     5e0:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fixunssfsi>
     5e4:	7b 01       	movw	r14, r22
     5e6:	8c 01       	movw	r16, r24
 ShaftCountLeft = 0;
     5e8:	10 92 0b 03 	sts	0x030B, r1
     5ec:	10 92 0c 03 	sts	0x030C, r1
     5f0:	10 92 0d 03 	sts	0x030D, r1
     5f4:	10 92 0e 03 	sts	0x030E, r1
 while(1)
 {
  lcd_print(1,1,ShaftCountLeft,2);
     5f8:	20 91 0b 03 	lds	r18, 0x030B
     5fc:	30 91 0c 03 	lds	r19, 0x030C
     600:	40 91 0d 03 	lds	r20, 0x030D
     604:	50 91 0e 03 	lds	r21, 0x030E
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	61 e0       	ldi	r22, 0x01	; 1
     60c:	a9 01       	movw	r20, r18
     60e:	22 e0       	ldi	r18, 0x02	; 2
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
  lcd_print(2,1,ShaftCountRight,2);
     616:	20 91 0f 03 	lds	r18, 0x030F
     61a:	30 91 10 03 	lds	r19, 0x0310
     61e:	40 91 11 03 	lds	r20, 0x0311
     622:	50 91 12 03 	lds	r21, 0x0312
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	a9 01       	movw	r20, r18
     62c:	22 e0       	ldi	r18, 0x02	; 2
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
  if(ShaftCountLeft > ReqdShaftCountInt)
     634:	80 91 0b 03 	lds	r24, 0x030B
     638:	90 91 0c 03 	lds	r25, 0x030C
     63c:	a0 91 0d 03 	lds	r26, 0x030D
     640:	b0 91 0e 03 	lds	r27, 0x030E
     644:	e8 16       	cp	r14, r24
     646:	f9 06       	cpc	r15, r25
     648:	0a 07       	cpc	r16, r26
     64a:	1b 07       	cpc	r17, r27
     64c:	a8 f6       	brcc	.-86     	; 0x5f8 <linear_distance_mm+0x38>

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     64e:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     650:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     652:	82 b9       	out	0x02, r24	; 2
  {
  	break;
  }
 } 
 stop(); //Stop robot
}
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	08 95       	ret

0000065e <forward>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     65e:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     660:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     662:	86 60       	ori	r24, 0x06	; 6
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     664:	82 b9       	out	0x02, r24	; 2
}
//MOTION			  // RB  RF  LF  LB						
void forward(void)    // PA3 PA2 PA1 PA0
{
	motion_set(0x06);   // 0 1 1 0
}
     666:	08 95       	ret

00000668 <backward>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     668:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     66a:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     66c:	89 60       	ori	r24, 0x09	; 9
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     66e:	82 b9       	out	0x02, r24	; 2
}

void backward(void)
{
	motion_set(0x09);	// 1 0 0 1
}
     670:	08 95       	ret

00000672 <diff_left>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     672:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     674:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     676:	85 60       	ori	r24, 0x05	; 5
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     678:	82 b9       	out	0x02, r24	; 2
}

void diff_left(void) //Left wheel backward, right wheel stationary
{
 	motion_set(0x05);
}
     67a:	08 95       	ret

0000067c <diff_right>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     67c:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     67e:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     680:	8a 60       	ori	r24, 0x0A	; 10
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     682:	82 b9       	out	0x02, r24	; 2
}

void diff_right(void) //Left wheel stationary, Right wheel backward
{
 	motion_set(0x0A);
}
     684:	08 95       	ret

00000686 <left>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     686:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     688:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     68a:	85 60       	ori	r24, 0x05	; 5
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     68c:	82 b9       	out	0x02, r24	; 2
 	motion_set(0x0A);
}
void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     68e:	08 95       	ret

00000690 <right>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     690:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     692:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     694:	8a 60       	ori	r24, 0x0A	; 10
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     696:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     698:	08 95       	ret

0000069a <soft_left>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     69a:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     69c:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     69e:	84 60       	ori	r24, 0x04	; 4
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     6a0:	82 b9       	out	0x02, r24	; 2
  motion_set(0x0A);
}
void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     6a2:	08 95       	ret

000006a4 <soft_right>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     6a4:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     6a6:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     6a8:	82 60       	ori	r24, 0x02	; 2
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     6aa:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     6ac:	08 95       	ret

000006ae <soft_left_2>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     6ae:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     6b0:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     6b2:	81 60       	ori	r24, 0x01	; 1
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     6b4:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     6b6:	08 95       	ret

000006b8 <soft_right_2>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     6b8:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     6ba:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     6bc:	88 60       	ori	r24, 0x08	; 8
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     6be:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     6c0:	08 95       	ret

000006c2 <left_degrees>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     6c2:	22 b1       	in	r18, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     6c4:	20 7f       	andi	r18, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     6c6:	25 60       	ori	r18, 0x05	; 5
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     6c8:	22 b9       	out	0x02, r18	; 2

void left_degrees(unsigned int Degrees) 
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
 angle_rotate(Degrees);
     6ca:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <angle_rotate>
}
     6ce:	08 95       	ret

000006d0 <right_degrees>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     6d0:	22 b1       	in	r18, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     6d2:	20 7f       	andi	r18, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     6d4:	2a 60       	ori	r18, 0x0A	; 10
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     6d6:	22 b9       	out	0x02, r18	; 2

void right_degrees(unsigned int Degrees)
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
 angle_rotate(Degrees);
     6d8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <angle_rotate>
}
     6dc:	08 95       	ret

000006de <soft_left_degrees>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     6de:	22 b1       	in	r18, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     6e0:	20 7f       	andi	r18, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     6e2:	24 60       	ori	r18, 0x04	; 4
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     6e4:	22 b9       	out	0x02, r18	; 2
void soft_left_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <angle_rotate>
}
     6ee:	08 95       	ret

000006f0 <soft_right_degrees>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     6f0:	22 b1       	in	r18, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     6f2:	20 7f       	andi	r18, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     6f4:	22 60       	ori	r18, 0x02	; 2
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     6f6:	22 b9       	out	0x02, r18	; 2
void soft_right_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     6f8:	88 0f       	add	r24, r24
     6fa:	99 1f       	adc	r25, r25
     6fc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <angle_rotate>
}
     700:	08 95       	ret

00000702 <soft_left_2_degrees>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     702:	22 b1       	in	r18, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     704:	20 7f       	andi	r18, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     706:	21 60       	ori	r18, 0x01	; 1
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     708:	22 b9       	out	0x02, r18	; 2
void soft_left_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left_2(); //Turn reverse soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <angle_rotate>
}
     712:	08 95       	ret

00000714 <soft_right_2_degrees>:

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     714:	22 b1       	in	r18, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     716:	20 7f       	andi	r18, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     718:	28 60       	ori	r18, 0x08	; 8
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     71a:	22 b9       	out	0x02, r18	; 2
void soft_right_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right_2();  //Turn reverse soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <angle_rotate>
}
     724:	08 95       	ret

00000726 <lcd_port_config>:

void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     726:	87 b1       	in	r24, 0x07	; 7
     728:	87 6f       	ori	r24, 0xF7	; 247
     72a:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     72c:	88 b1       	in	r24, 0x08	; 8
     72e:	80 78       	andi	r24, 0x80	; 128
     730:	88 b9       	out	0x08, r24	; 8
}
     732:	08 95       	ret

00000734 <adc_pin_config>:

void adc_pin_config(void)
{
	DDRF=0x00;
     734:	10 ba       	out	0x10, r1	; 16
	PORTF=0x00;
     736:	11 ba       	out	0x11, r1	; 17
	DDRK=0x00;
     738:	10 92 07 01 	sts	0x0107, r1
	PORTK=0x00;
     73c:	10 92 08 01 	sts	0x0108, r1
}
     740:	08 95       	ret

00000742 <adc_init>:

void adc_init(void)
{
	ADCSRA=0x00;
     742:	ea e7       	ldi	r30, 0x7A	; 122
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	10 82       	st	Z, r1
	ADCSRB=0x00;
     748:	10 92 7b 00 	sts	0x007B, r1
	ADMUX=0x00;
     74c:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA=0x86;	//ADEN=1 ADIE=1....
     750:	86 e8       	ldi	r24, 0x86	; 134
     752:	80 83       	st	Z, r24
	ACSR=0x80;
     754:	80 e8       	ldi	r24, 0x80	; 128
     756:	80 bf       	out	0x30, r24	; 48
}
     758:	08 95       	ret

0000075a <init_devices>:

void init_devices(void)
{
	cli();
     75a:	f8 94       	cli

volatile unsigned int Degrees; //to accept angle in degrees for turning

void motion_pin_config(void)
{
	DDRA= DDRA | 0x0F; //0000 1111 --->	PA3 PA2 PA1 PA0 (HIGH)
     75c:	81 b1       	in	r24, 0x01	; 1
     75e:	8f 60       	ori	r24, 0x0F	; 15
     760:	81 b9       	out	0x01, r24	; 1
	DDRL= DDRL | 0x18; //0001 1000 ---> PL3 PL4 (HIGH)
     762:	ea e0       	ldi	r30, 0x0A	; 10
     764:	f1 e0       	ldi	r31, 0x01	; 1
     766:	80 81       	ld	r24, Z
     768:	88 61       	ori	r24, 0x18	; 24
     76a:	80 83       	st	Z, r24
	PORTA= PORTA & 0xF0;
     76c:	82 b1       	in	r24, 0x02	; 2
     76e:	80 7f       	andi	r24, 0xF0	; 240
     770:	82 b9       	out	0x02, r24	; 2
	PORTL= PORTL | 0x18;
     772:	eb e0       	ldi	r30, 0x0B	; 11
     774:	f1 e0       	ldi	r31, 0x01	; 1
     776:	80 81       	ld	r24, Z
     778:	88 61       	ori	r24, 0x18	; 24
     77a:	80 83       	st	Z, r24
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
}

void init_timer5(void)	//Timer For PWM
{
	TCCR5B = 0x00;	//stop
     77c:	a1 e2       	ldi	r26, 0x21	; 33
     77e:	b1 e0       	ldi	r27, 0x01	; 1
     780:	1c 92       	st	X, r1
	TCNT5H = 0xFF;	//counter higher 8 bit value to which OCRxH is compared with
     782:	2f ef       	ldi	r18, 0xFF	; 255
     784:	20 93 25 01 	sts	0x0125, r18
	TCNT5L = 0x01;	//counter higher 8 bit value to which OCRxH is compared with
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high for left motor
     78e:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low for left motor
     792:	20 93 28 01 	sts	0x0128, r18
	OCR5BH = 0x00;	//Output compare register high for right motor	
     796:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register high for right motor
     79a:	20 93 2a 01 	sts	0x012A, r18
	OCR5C  = 0xFF;	//Motor C1
     79e:	ec e2       	ldi	r30, 0x2C	; 44
     7a0:	f1 e0       	ldi	r31, 0x01	; 1
     7a2:	8f ef       	ldi	r24, 0xFF	; 255
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	91 83       	std	Z+1, r25	; 0x01
     7a8:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Motor C1
     7aa:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;
     7ae:	20 83       	st	Z, r18
	TCCR5A = 0xA9;
     7b0:	89 ea       	ldi	r24, 0xA9	; 169
     7b2:	80 93 20 01 	sts	0x0120, r24
/* COM5A1=1,COM5A0=0,COM5B1=1,COM5B0=0,COM5C1=1,COM5C0=0
For Overriding normal port functionality to OCRnA ouputs
WGM51=0,WGM50=1 along with WGM52 in TCCRB for selecting fast PWM 8 bit mode
*/

	TCCR5B = 0x0B;	//WGM12=1,CS12=0,CS11=1,CS10=1	(Prescaler=64)
     7b6:	8b e0       	ldi	r24, 0x0B	; 11
     7b8:	8c 93       	st	X, r24
 angle_rotate(Degrees);
}

void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     7ba:	87 b1       	in	r24, 0x07	; 7
     7bc:	87 6f       	ori	r24, 0xF7	; 247
     7be:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     7c0:	88 b1       	in	r24, 0x08	; 8
     7c2:	80 78       	andi	r24, 0x80	; 128
     7c4:	88 b9       	out	0x08, r24	; 8
}

void adc_pin_config(void)
{
	DDRF=0x00;
     7c6:	10 ba       	out	0x10, r1	; 16
	PORTF=0x00;
     7c8:	11 ba       	out	0x11, r1	; 17
	DDRK=0x00;
     7ca:	10 92 07 01 	sts	0x0107, r1
	PORTK=0x00;
     7ce:	10 92 08 01 	sts	0x0108, r1
	PORTL= PORTL | 0x18;
}

void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     7d2:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     7d4:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     7d6:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     7d8:	75 9a       	sbi	0x0e, 5	; 14
	PORTK=0x00;
}

void adc_init(void)
{
	ADCSRA=0x00;
     7da:	ea e7       	ldi	r30, 0x7A	; 122
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	10 82       	st	Z, r1
	ADCSRB=0x00;
     7e0:	10 92 7b 00 	sts	0x007B, r1
	ADMUX=0x00;
     7e4:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA=0x86;	//ADEN=1 ADIE=1....
     7e8:	86 e8       	ldi	r24, 0x86	; 134
     7ea:	80 83       	st	Z, r24
	ACSR=0x80;
     7ec:	80 e8       	ldi	r24, 0x80	; 128
     7ee:	80 bf       	out	0x30, r24	; 48
	lcd_port_config();
	adc_pin_config();
	left_encoder_pin_config();
	right_encoder_pin_config();
	adc_init();
	sei();
     7f0:	78 94       	sei
}
     7f2:	08 95       	ret

000007f4 <ADC_Conversion>:

unsigned char ADC_Conversion(unsigned char ch)
{
     7f4:	98 2f       	mov	r25, r24
	unsigned char a;
	if(ch>7)
     7f6:	88 30       	cpi	r24, 0x08	; 8
     7f8:	18 f0       	brcs	.+6      	; 0x800 <ADC_Conversion+0xc>
	{
		ADCSRB=0x08;
     7fa:	88 e0       	ldi	r24, 0x08	; 8
     7fc:	80 93 7b 00 	sts	0x007B, r24
	}
	ch=ch & 0x07;
	ADMUX=0x20 | ch;
     800:	97 70       	andi	r25, 0x07	; 7
     802:	90 62       	ori	r25, 0x20	; 32
     804:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA =ADCSRA | 0x40;		//set start conv bit
     808:	80 91 7a 00 	lds	r24, 0x007A
     80c:	80 64       	ori	r24, 0x40	; 64
     80e:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA & 0x10)==0);	//wait for adc conv to complete
     812:	80 91 7a 00 	lds	r24, 0x007A
     816:	84 ff       	sbrs	r24, 4
     818:	fc cf       	rjmp	.-8      	; 0x812 <ADC_Conversion+0x1e>
	a=ADCH;						//Result stored here after convo
     81a:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA=ADCSRA | 0x10;		//Clear ADIF by setting it to 1
     81e:	90 91 7a 00 	lds	r25, 0x007A
     822:	90 61       	ori	r25, 0x10	; 16
     824:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB=0x00;
     828:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     82c:	08 95       	ret

0000082e <print_sensor>:

void print_sensor(char row,char col,unsigned char channel)
{
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	18 2f       	mov	r17, r24
     834:	06 2f       	mov	r16, r22
     836:	84 2f       	mov	r24, r20
	ADC_Value=ADC_Conversion(channel);
     838:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <ADC_Conversion>
     83c:	48 2f       	mov	r20, r24
     83e:	80 93 19 03 	sts	0x0319, r24
	lcd_print(row,col,ADC_Value,3);
     842:	81 2f       	mov	r24, r17
     844:	60 2f       	mov	r22, r16
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	23 e0       	ldi	r18, 0x03	; 3
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
}
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	08 95       	ret

00000856 <main>:

int main(void)
{
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
	unsigned int i=0,djFlag=0,prev=0;
	unsigned char flag =0;
	init_devices();
     860:	0e 94 ad 03 	call	0x75a	; 0x75a <init_devices>
	lcd_set_4bit();
     864:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
     868:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init>
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
 sei();   // Enables the global interrupt 
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	OCR5AL = (unsigned char) left;
     86c:	88 ec       	ldi	r24, 0xC8	; 200
     86e:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char) right;
     872:	80 93 2a 01 	sts	0x012A, r24
	unsigned char flag =0;
	init_devices();
	lcd_set_4bit();
	lcd_init();
	velocity(MAX_VEL,MAX_VEL);    // Set the speed to max velocity
 	lcd_print(2,1,MAX_VEL,3);
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	48 ec       	ldi	r20, 0xC8	; 200
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	23 e0       	ldi	r18, 0x03	; 3
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
 	lcd_print(2,5,MAX_VEL,3);
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	65 e0       	ldi	r22, 0x05	; 5
     88a:	48 ec       	ldi	r20, 0xC8	; 200
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	23 e0       	ldi	r18, 0x03	; 3
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     896:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     898:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     89a:	86 60       	ori	r24, 0x06	; 6
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     89c:	82 b9       	out	0x02, r24	; 2
     89e:	60 e7       	ldi	r22, 0x70	; 112
     8a0:	e6 2e       	mov	r14, r22
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	f6 2e       	mov	r15, r22
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
 sei();   // Enables the global interrupt 
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	OCR5AL = (unsigned char) left;
     8a6:	18 ec       	ldi	r17, 0xC8	; 200
 	lcd_print(2,1,MAX_VEL,3);
 	lcd_print(2,5,MAX_VEL,3);
	forward(); 
	while(1)
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     8a8:	83 e0       	ldi	r24, 0x03	; 3
     8aa:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <ADC_Conversion>
     8ae:	80 93 08 03 	sts	0x0308, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <ADC_Conversion>
     8b8:	80 93 09 03 	sts	0x0309, r24
		Right_white_line = ADC_Conversion(1); //Getting data of Right WL Sensor
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <ADC_Conversion>
     8c2:	80 93 0a 03 	sts	0x030A, r24
		print_sensor(1,1,3);
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	43 e0       	ldi	r20, 0x03	; 3
     8cc:	0e 94 17 04 	call	0x82e	; 0x82e <print_sensor>
		print_sensor(1,5,2);
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	65 e0       	ldi	r22, 0x05	; 5
     8d4:	42 e0       	ldi	r20, 0x02	; 2
     8d6:	0e 94 17 04 	call	0x82e	; 0x82e <print_sensor>
		print_sensor(1,9,1);
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	69 e0       	ldi	r22, 0x09	; 9
     8de:	41 e0       	ldi	r20, 0x01	; 1
     8e0:	0e 94 17 04 	call	0x82e	; 0x82e <print_sensor>
		flag=0; djFlag = 0;
		if (Left_white_line>THRESHOLD) djFlag = 100;
     8e4:	80 91 08 03 	lds	r24, 0x0308
     8e8:	85 31       	cpi	r24, 0x15	; 21
     8ea:	18 f0       	brcs	.+6      	; 0x8f2 <main+0x9c>
     8ec:	c4 e6       	ldi	r28, 0x64	; 100
     8ee:	d0 e0       	ldi	r29, 0x00	; 0
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <main+0xa0>
     8f2:	c0 e0       	ldi	r28, 0x00	; 0
     8f4:	d0 e0       	ldi	r29, 0x00	; 0
		if (Center_white_line>THRESHOLD) djFlag += 10;
     8f6:	80 91 09 03 	lds	r24, 0x0309
     8fa:	85 31       	cpi	r24, 0x15	; 21
     8fc:	08 f0       	brcs	.+2      	; 0x900 <main+0xaa>
     8fe:	2a 96       	adiw	r28, 0x0a	; 10
		if (Right_white_line>THRESHOLD) djFlag +=1;
     900:	80 91 0a 03 	lds	r24, 0x030A
     904:	85 31       	cpi	r24, 0x15	; 21
     906:	08 f0       	brcs	.+2      	; 0x90a <main+0xb4>
     908:	21 96       	adiw	r28, 0x01	; 1
		lcd_print (2,9,djFlag,3);
     90a:	82 e0       	ldi	r24, 0x02	; 2
     90c:	69 e0       	ldi	r22, 0x09	; 9
     90e:	ae 01       	movw	r20, r28
     910:	23 e0       	ldi	r18, 0x03	; 3
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
		if (djFlag == 11 || djFlag == 110) {
     918:	cb 30       	cpi	r28, 0x0B	; 11
     91a:	d1 05       	cpc	r29, r1
     91c:	19 f0       	breq	.+6      	; 0x924 <main+0xce>
     91e:	ce 36       	cpi	r28, 0x6E	; 110
     920:	d1 05       	cpc	r29, r1
     922:	a1 f4       	brne	.+40     	; 0x94c <main+0xf6>
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
 sei();   // Enables the global interrupt 
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	OCR5AL = (unsigned char) left;
     924:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char) right;
     928:	10 92 2a 01 	sts	0x012A, r1
		if (Center_white_line>THRESHOLD) djFlag += 10;
		if (Right_white_line>THRESHOLD) djFlag +=1;
		lcd_print (2,9,djFlag,3);
		if (djFlag == 11 || djFlag == 110) {
			velocity(0,0);
			left_degrees(30);
     92c:	8e e1       	ldi	r24, 0x1E	; 30
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0e 94 61 03 	call	0x6c2	; 0x6c2 <left_degrees>
			right_degrees(30);
     934:	8e e1       	ldi	r24, 0x1E	; 30
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 68 03 	call	0x6d0	; 0x6d0 <right_degrees>
     93c:	80 e5       	ldi	r24, 0x50	; 80
     93e:	93 ec       	ldi	r25, 0xC3	; 195
     940:	f7 01       	movw	r30, r14
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	f1 f7       	brne	.-4      	; 0x942 <main+0xec>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     946:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     948:	d9 f7       	brne	.-10     	; 0x940 <main+0xea>
     94a:	ae cf       	rjmp	.-164    	; 0x8a8 <main+0x52>
			_delay_ms(5000);
		}
		else if (djFlag == 10) {
     94c:	ca 30       	cpi	r28, 0x0A	; 10
     94e:	d1 05       	cpc	r29, r1
     950:	69 f4       	brne	.+26     	; 0x96c <main+0x116>
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
 sei();   // Enables the global interrupt 
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	OCR5AL = (unsigned char) left;
     952:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char) right;
     956:	10 93 2a 01 	sts	0x012A, r17

void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
     95a:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
     95c:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
     95e:	86 60       	ori	r24, 0x06	; 6
	PORTA=PortA_Restore;	//Setting the current status of PORTA
     960:	82 b9       	out	0x02, r24	; 2
			//Go straight
			flag=1;

			velocity(MAX_VEL,MAX_VEL); 
			forward();     // Run robot at max velocity 
			lcd_print (2,1,MAX_VEL,3);
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	61 e0       	ldi	r22, 0x01	; 1
     966:	48 ec       	ldi	r20, 0xC8	; 200
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	13 c0       	rjmp	.+38     	; 0x992 <main+0x13c>
			lcd_print (2,5,MAX_VEL,3);
		} 
		else if (djFlag == 100) {
     96c:	c4 36       	cpi	r28, 0x64	; 100
     96e:	d1 05       	cpc	r29, r1
     970:	29 f4       	brne	.+10     	; 0x97c <main+0x126>
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
 sei();   // Enables the global interrupt 
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	OCR5AL = (unsigned char) left;
     972:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char) right;
     976:	10 93 2a 01 	sts	0x012A, r17
     97a:	07 c0       	rjmp	.+14     	; 0x98a <main+0x134>
			flag=1;                                                       
			velocity(0,200);     // Run robot left wheel at max velocity and right wheel 
			lcd_print (2,1,MIN_VEL,3);           // at min velocity
			lcd_print (2,5,MAX_VEL,3);
		} 
		else if (djFlag == 1) {
     97c:	c1 30       	cpi	r28, 0x01	; 1
     97e:	d1 05       	cpc	r29, r1
     980:	89 f4       	brne	.+34     	; 0x9a4 <main+0x14e>
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
 sei();   // Enables the global interrupt 
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	OCR5AL = (unsigned char) left;
     982:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char) right;
     986:	10 92 2a 01 	sts	0x012A, r1
		else if (djFlag == 1) {
			//Go right
			if (djFlag!=0) prev = 1;
			flag=1;
			velocity(200,0);      // Run robot right wheel at max velocity and left wheel 
			lcd_print (2,1,MIN_VEL,3);           // at min velocity
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	23 e0       	ldi	r18, 0x03	; 3
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
			lcd_print (2,5,MAX_VEL,3);
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	65 e0       	ldi	r22, 0x05	; 5
     99e:	48 ec       	ldi	r20, 0xC8	; 200
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	12 c0       	rjmp	.+36     	; 0x9c8 <main+0x172>
		} 
		else if (djFlag == 0) {
     9a4:	cd 2b       	or	r28, r29
     9a6:	a9 f4       	brne	.+42     	; 0x9d2 <main+0x17c>
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
 sei();   // Enables the global interrupt 
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	OCR5AL = (unsigned char) left;
     9a8:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char) right;
     9ac:	10 93 2a 01 	sts	0x012A, r17
		} 
		else if (djFlag == 0) {
			//Error
			flag=1;
			velocity(MAX_VEL,MAX_VEL);      // stop the robot
			lcd_print (2,1,0,3);
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	23 e0       	ldi	r18, 0x03	; 3
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
			lcd_print (2,5,0,3);
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	65 e0       	ldi	r22, 0x05	; 5
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	23 e0       	ldi	r18, 0x03	; 3
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
     9d0:	6b cf       	rjmp	.-298    	; 0x8a8 <main+0x52>
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
 sei();   // Enables the global interrupt 
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	OCR5AL = (unsigned char) left;
     9d2:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char) right;
     9d6:	10 92 2a 01 	sts	0x012A, r1
     9da:	66 cf       	rjmp	.-308    	; 0x8a8 <main+0x52>

000009dc <__fixunssfsi>:
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	7b 01       	movw	r14, r22
     9e6:	8c 01       	movw	r16, r24
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	5f e4       	ldi	r21, 0x4F	; 79
     9f0:	0e 94 70 07 	call	0xee0	; 0xee0 <__gesf2>
     9f4:	88 23       	and	r24, r24
     9f6:	8c f0       	brlt	.+34     	; 0xa1a <__fixunssfsi+0x3e>
     9f8:	c8 01       	movw	r24, r16
     9fa:	b7 01       	movw	r22, r14
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	5f e4       	ldi	r21, 0x4F	; 79
     a04:	0e 94 66 06 	call	0xccc	; 0xccc <__subsf3>
     a08:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixsfsi>
     a0c:	9b 01       	movw	r18, r22
     a0e:	ac 01       	movw	r20, r24
     a10:	20 50       	subi	r18, 0x00	; 0
     a12:	30 40       	sbci	r19, 0x00	; 0
     a14:	40 40       	sbci	r20, 0x00	; 0
     a16:	50 48       	sbci	r21, 0x80	; 128
     a18:	06 c0       	rjmp	.+12     	; 0xa26 <__fixunssfsi+0x4a>
     a1a:	c8 01       	movw	r24, r16
     a1c:	b7 01       	movw	r22, r14
     a1e:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fixsfsi>
     a22:	9b 01       	movw	r18, r22
     a24:	ac 01       	movw	r20, r24
     a26:	b9 01       	movw	r22, r18
     a28:	ca 01       	movw	r24, r20
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	ff 90       	pop	r15
     a30:	ef 90       	pop	r14
     a32:	08 95       	ret

00000a34 <_fpadd_parts>:
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	e0 e2       	ldi	r30, 0x20	; 32
     a3a:	f5 e0       	ldi	r31, 0x05	; 5
     a3c:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__prologue_saves__>
     a40:	dc 01       	movw	r26, r24
     a42:	2b 01       	movw	r4, r22
     a44:	fa 01       	movw	r30, r20
     a46:	9c 91       	ld	r25, X
     a48:	92 30       	cpi	r25, 0x02	; 2
     a4a:	08 f4       	brcc	.+2      	; 0xa4e <_fpadd_parts+0x1a>
     a4c:	39 c1       	rjmp	.+626    	; 0xcc0 <_fpadd_parts+0x28c>
     a4e:	eb 01       	movw	r28, r22
     a50:	88 81       	ld	r24, Y
     a52:	82 30       	cpi	r24, 0x02	; 2
     a54:	08 f4       	brcc	.+2      	; 0xa58 <_fpadd_parts+0x24>
     a56:	33 c1       	rjmp	.+614    	; 0xcbe <_fpadd_parts+0x28a>
     a58:	94 30       	cpi	r25, 0x04	; 4
     a5a:	69 f4       	brne	.+26     	; 0xa76 <_fpadd_parts+0x42>
     a5c:	84 30       	cpi	r24, 0x04	; 4
     a5e:	09 f0       	breq	.+2      	; 0xa62 <_fpadd_parts+0x2e>
     a60:	2f c1       	rjmp	.+606    	; 0xcc0 <_fpadd_parts+0x28c>
     a62:	11 96       	adiw	r26, 0x01	; 1
     a64:	9c 91       	ld	r25, X
     a66:	11 97       	sbiw	r26, 0x01	; 1
     a68:	89 81       	ldd	r24, Y+1	; 0x01
     a6a:	98 17       	cp	r25, r24
     a6c:	09 f4       	brne	.+2      	; 0xa70 <_fpadd_parts+0x3c>
     a6e:	28 c1       	rjmp	.+592    	; 0xcc0 <_fpadd_parts+0x28c>
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b2 e0       	ldi	r27, 0x02	; 2
     a74:	25 c1       	rjmp	.+586    	; 0xcc0 <_fpadd_parts+0x28c>
     a76:	84 30       	cpi	r24, 0x04	; 4
     a78:	09 f4       	brne	.+2      	; 0xa7c <_fpadd_parts+0x48>
     a7a:	21 c1       	rjmp	.+578    	; 0xcbe <_fpadd_parts+0x28a>
     a7c:	82 30       	cpi	r24, 0x02	; 2
     a7e:	a9 f4       	brne	.+42     	; 0xaaa <_fpadd_parts+0x76>
     a80:	92 30       	cpi	r25, 0x02	; 2
     a82:	09 f0       	breq	.+2      	; 0xa86 <_fpadd_parts+0x52>
     a84:	1d c1       	rjmp	.+570    	; 0xcc0 <_fpadd_parts+0x28c>
     a86:	9a 01       	movw	r18, r20
     a88:	ad 01       	movw	r20, r26
     a8a:	88 e0       	ldi	r24, 0x08	; 8
     a8c:	ea 01       	movw	r28, r20
     a8e:	09 90       	ld	r0, Y+
     a90:	ae 01       	movw	r20, r28
     a92:	e9 01       	movw	r28, r18
     a94:	09 92       	st	Y+, r0
     a96:	9e 01       	movw	r18, r28
     a98:	81 50       	subi	r24, 0x01	; 1
     a9a:	c1 f7       	brne	.-16     	; 0xa8c <_fpadd_parts+0x58>
     a9c:	e2 01       	movw	r28, r4
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	11 96       	adiw	r26, 0x01	; 1
     aa2:	9c 91       	ld	r25, X
     aa4:	89 23       	and	r24, r25
     aa6:	81 83       	std	Z+1, r24	; 0x01
     aa8:	08 c1       	rjmp	.+528    	; 0xcba <_fpadd_parts+0x286>
     aaa:	92 30       	cpi	r25, 0x02	; 2
     aac:	09 f4       	brne	.+2      	; 0xab0 <_fpadd_parts+0x7c>
     aae:	07 c1       	rjmp	.+526    	; 0xcbe <_fpadd_parts+0x28a>
     ab0:	12 96       	adiw	r26, 0x02	; 2
     ab2:	2d 90       	ld	r2, X+
     ab4:	3c 90       	ld	r3, X
     ab6:	13 97       	sbiw	r26, 0x03	; 3
     ab8:	eb 01       	movw	r28, r22
     aba:	8a 81       	ldd	r24, Y+2	; 0x02
     abc:	9b 81       	ldd	r25, Y+3	; 0x03
     abe:	14 96       	adiw	r26, 0x04	; 4
     ac0:	ad 90       	ld	r10, X+
     ac2:	bd 90       	ld	r11, X+
     ac4:	cd 90       	ld	r12, X+
     ac6:	dc 90       	ld	r13, X
     ac8:	17 97       	sbiw	r26, 0x07	; 7
     aca:	ec 80       	ldd	r14, Y+4	; 0x04
     acc:	fd 80       	ldd	r15, Y+5	; 0x05
     ace:	0e 81       	ldd	r16, Y+6	; 0x06
     ad0:	1f 81       	ldd	r17, Y+7	; 0x07
     ad2:	91 01       	movw	r18, r2
     ad4:	28 1b       	sub	r18, r24
     ad6:	39 0b       	sbc	r19, r25
     ad8:	b9 01       	movw	r22, r18
     ada:	37 ff       	sbrs	r19, 7
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <_fpadd_parts+0xb2>
     ade:	66 27       	eor	r22, r22
     ae0:	77 27       	eor	r23, r23
     ae2:	62 1b       	sub	r22, r18
     ae4:	73 0b       	sbc	r23, r19
     ae6:	60 32       	cpi	r22, 0x20	; 32
     ae8:	71 05       	cpc	r23, r1
     aea:	0c f0       	brlt	.+2      	; 0xaee <_fpadd_parts+0xba>
     aec:	61 c0       	rjmp	.+194    	; 0xbb0 <_fpadd_parts+0x17c>
     aee:	12 16       	cp	r1, r18
     af0:	13 06       	cpc	r1, r19
     af2:	6c f5       	brge	.+90     	; 0xb4e <_fpadd_parts+0x11a>
     af4:	37 01       	movw	r6, r14
     af6:	48 01       	movw	r8, r16
     af8:	06 2e       	mov	r0, r22
     afa:	04 c0       	rjmp	.+8      	; 0xb04 <_fpadd_parts+0xd0>
     afc:	96 94       	lsr	r9
     afe:	87 94       	ror	r8
     b00:	77 94       	ror	r7
     b02:	67 94       	ror	r6
     b04:	0a 94       	dec	r0
     b06:	d2 f7       	brpl	.-12     	; 0xafc <_fpadd_parts+0xc8>
     b08:	21 e0       	ldi	r18, 0x01	; 1
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	04 c0       	rjmp	.+8      	; 0xb1a <_fpadd_parts+0xe6>
     b12:	22 0f       	add	r18, r18
     b14:	33 1f       	adc	r19, r19
     b16:	44 1f       	adc	r20, r20
     b18:	55 1f       	adc	r21, r21
     b1a:	6a 95       	dec	r22
     b1c:	d2 f7       	brpl	.-12     	; 0xb12 <_fpadd_parts+0xde>
     b1e:	21 50       	subi	r18, 0x01	; 1
     b20:	30 40       	sbci	r19, 0x00	; 0
     b22:	40 40       	sbci	r20, 0x00	; 0
     b24:	50 40       	sbci	r21, 0x00	; 0
     b26:	2e 21       	and	r18, r14
     b28:	3f 21       	and	r19, r15
     b2a:	40 23       	and	r20, r16
     b2c:	51 23       	and	r21, r17
     b2e:	21 15       	cp	r18, r1
     b30:	31 05       	cpc	r19, r1
     b32:	41 05       	cpc	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	21 f0       	breq	.+8      	; 0xb40 <_fpadd_parts+0x10c>
     b38:	21 e0       	ldi	r18, 0x01	; 1
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	79 01       	movw	r14, r18
     b42:	8a 01       	movw	r16, r20
     b44:	e6 28       	or	r14, r6
     b46:	f7 28       	or	r15, r7
     b48:	08 29       	or	r16, r8
     b4a:	19 29       	or	r17, r9
     b4c:	3c c0       	rjmp	.+120    	; 0xbc6 <_fpadd_parts+0x192>
     b4e:	23 2b       	or	r18, r19
     b50:	d1 f1       	breq	.+116    	; 0xbc6 <_fpadd_parts+0x192>
     b52:	26 0e       	add	r2, r22
     b54:	37 1e       	adc	r3, r23
     b56:	35 01       	movw	r6, r10
     b58:	46 01       	movw	r8, r12
     b5a:	06 2e       	mov	r0, r22
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <_fpadd_parts+0x132>
     b5e:	96 94       	lsr	r9
     b60:	87 94       	ror	r8
     b62:	77 94       	ror	r7
     b64:	67 94       	ror	r6
     b66:	0a 94       	dec	r0
     b68:	d2 f7       	brpl	.-12     	; 0xb5e <_fpadd_parts+0x12a>
     b6a:	21 e0       	ldi	r18, 0x01	; 1
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	04 c0       	rjmp	.+8      	; 0xb7c <_fpadd_parts+0x148>
     b74:	22 0f       	add	r18, r18
     b76:	33 1f       	adc	r19, r19
     b78:	44 1f       	adc	r20, r20
     b7a:	55 1f       	adc	r21, r21
     b7c:	6a 95       	dec	r22
     b7e:	d2 f7       	brpl	.-12     	; 0xb74 <_fpadd_parts+0x140>
     b80:	21 50       	subi	r18, 0x01	; 1
     b82:	30 40       	sbci	r19, 0x00	; 0
     b84:	40 40       	sbci	r20, 0x00	; 0
     b86:	50 40       	sbci	r21, 0x00	; 0
     b88:	2a 21       	and	r18, r10
     b8a:	3b 21       	and	r19, r11
     b8c:	4c 21       	and	r20, r12
     b8e:	5d 21       	and	r21, r13
     b90:	21 15       	cp	r18, r1
     b92:	31 05       	cpc	r19, r1
     b94:	41 05       	cpc	r20, r1
     b96:	51 05       	cpc	r21, r1
     b98:	21 f0       	breq	.+8      	; 0xba2 <_fpadd_parts+0x16e>
     b9a:	21 e0       	ldi	r18, 0x01	; 1
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	59 01       	movw	r10, r18
     ba4:	6a 01       	movw	r12, r20
     ba6:	a6 28       	or	r10, r6
     ba8:	b7 28       	or	r11, r7
     baa:	c8 28       	or	r12, r8
     bac:	d9 28       	or	r13, r9
     bae:	0b c0       	rjmp	.+22     	; 0xbc6 <_fpadd_parts+0x192>
     bb0:	82 15       	cp	r24, r2
     bb2:	93 05       	cpc	r25, r3
     bb4:	2c f0       	brlt	.+10     	; 0xbc0 <_fpadd_parts+0x18c>
     bb6:	1c 01       	movw	r2, r24
     bb8:	aa 24       	eor	r10, r10
     bba:	bb 24       	eor	r11, r11
     bbc:	65 01       	movw	r12, r10
     bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <_fpadd_parts+0x192>
     bc0:	ee 24       	eor	r14, r14
     bc2:	ff 24       	eor	r15, r15
     bc4:	87 01       	movw	r16, r14
     bc6:	11 96       	adiw	r26, 0x01	; 1
     bc8:	9c 91       	ld	r25, X
     bca:	d2 01       	movw	r26, r4
     bcc:	11 96       	adiw	r26, 0x01	; 1
     bce:	8c 91       	ld	r24, X
     bd0:	98 17       	cp	r25, r24
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <_fpadd_parts+0x1a2>
     bd4:	45 c0       	rjmp	.+138    	; 0xc60 <_fpadd_parts+0x22c>
     bd6:	99 23       	and	r25, r25
     bd8:	39 f0       	breq	.+14     	; 0xbe8 <_fpadd_parts+0x1b4>
     bda:	a8 01       	movw	r20, r16
     bdc:	97 01       	movw	r18, r14
     bde:	2a 19       	sub	r18, r10
     be0:	3b 09       	sbc	r19, r11
     be2:	4c 09       	sbc	r20, r12
     be4:	5d 09       	sbc	r21, r13
     be6:	06 c0       	rjmp	.+12     	; 0xbf4 <_fpadd_parts+0x1c0>
     be8:	a6 01       	movw	r20, r12
     bea:	95 01       	movw	r18, r10
     bec:	2e 19       	sub	r18, r14
     bee:	3f 09       	sbc	r19, r15
     bf0:	40 0b       	sbc	r20, r16
     bf2:	51 0b       	sbc	r21, r17
     bf4:	57 fd       	sbrc	r21, 7
     bf6:	08 c0       	rjmp	.+16     	; 0xc08 <_fpadd_parts+0x1d4>
     bf8:	11 82       	std	Z+1, r1	; 0x01
     bfa:	33 82       	std	Z+3, r3	; 0x03
     bfc:	22 82       	std	Z+2, r2	; 0x02
     bfe:	24 83       	std	Z+4, r18	; 0x04
     c00:	35 83       	std	Z+5, r19	; 0x05
     c02:	46 83       	std	Z+6, r20	; 0x06
     c04:	57 83       	std	Z+7, r21	; 0x07
     c06:	1d c0       	rjmp	.+58     	; 0xc42 <_fpadd_parts+0x20e>
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	81 83       	std	Z+1, r24	; 0x01
     c0c:	33 82       	std	Z+3, r3	; 0x03
     c0e:	22 82       	std	Z+2, r2	; 0x02
     c10:	88 27       	eor	r24, r24
     c12:	99 27       	eor	r25, r25
     c14:	dc 01       	movw	r26, r24
     c16:	82 1b       	sub	r24, r18
     c18:	93 0b       	sbc	r25, r19
     c1a:	a4 0b       	sbc	r26, r20
     c1c:	b5 0b       	sbc	r27, r21
     c1e:	84 83       	std	Z+4, r24	; 0x04
     c20:	95 83       	std	Z+5, r25	; 0x05
     c22:	a6 83       	std	Z+6, r26	; 0x06
     c24:	b7 83       	std	Z+7, r27	; 0x07
     c26:	0d c0       	rjmp	.+26     	; 0xc42 <_fpadd_parts+0x20e>
     c28:	22 0f       	add	r18, r18
     c2a:	33 1f       	adc	r19, r19
     c2c:	44 1f       	adc	r20, r20
     c2e:	55 1f       	adc	r21, r21
     c30:	24 83       	std	Z+4, r18	; 0x04
     c32:	35 83       	std	Z+5, r19	; 0x05
     c34:	46 83       	std	Z+6, r20	; 0x06
     c36:	57 83       	std	Z+7, r21	; 0x07
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	93 83       	std	Z+3, r25	; 0x03
     c40:	82 83       	std	Z+2, r24	; 0x02
     c42:	24 81       	ldd	r18, Z+4	; 0x04
     c44:	35 81       	ldd	r19, Z+5	; 0x05
     c46:	46 81       	ldd	r20, Z+6	; 0x06
     c48:	57 81       	ldd	r21, Z+7	; 0x07
     c4a:	da 01       	movw	r26, r20
     c4c:	c9 01       	movw	r24, r18
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	a1 09       	sbc	r26, r1
     c52:	b1 09       	sbc	r27, r1
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	9f 4f       	sbci	r25, 0xFF	; 255
     c58:	af 4f       	sbci	r26, 0xFF	; 255
     c5a:	bf 43       	sbci	r27, 0x3F	; 63
     c5c:	28 f3       	brcs	.-54     	; 0xc28 <_fpadd_parts+0x1f4>
     c5e:	0b c0       	rjmp	.+22     	; 0xc76 <_fpadd_parts+0x242>
     c60:	91 83       	std	Z+1, r25	; 0x01
     c62:	33 82       	std	Z+3, r3	; 0x03
     c64:	22 82       	std	Z+2, r2	; 0x02
     c66:	ea 0c       	add	r14, r10
     c68:	fb 1c       	adc	r15, r11
     c6a:	0c 1d       	adc	r16, r12
     c6c:	1d 1d       	adc	r17, r13
     c6e:	e4 82       	std	Z+4, r14	; 0x04
     c70:	f5 82       	std	Z+5, r15	; 0x05
     c72:	06 83       	std	Z+6, r16	; 0x06
     c74:	17 83       	std	Z+7, r17	; 0x07
     c76:	83 e0       	ldi	r24, 0x03	; 3
     c78:	80 83       	st	Z, r24
     c7a:	24 81       	ldd	r18, Z+4	; 0x04
     c7c:	35 81       	ldd	r19, Z+5	; 0x05
     c7e:	46 81       	ldd	r20, Z+6	; 0x06
     c80:	57 81       	ldd	r21, Z+7	; 0x07
     c82:	57 ff       	sbrs	r21, 7
     c84:	1a c0       	rjmp	.+52     	; 0xcba <_fpadd_parts+0x286>
     c86:	c9 01       	movw	r24, r18
     c88:	aa 27       	eor	r26, r26
     c8a:	97 fd       	sbrc	r25, 7
     c8c:	a0 95       	com	r26
     c8e:	ba 2f       	mov	r27, r26
     c90:	81 70       	andi	r24, 0x01	; 1
     c92:	90 70       	andi	r25, 0x00	; 0
     c94:	a0 70       	andi	r26, 0x00	; 0
     c96:	b0 70       	andi	r27, 0x00	; 0
     c98:	56 95       	lsr	r21
     c9a:	47 95       	ror	r20
     c9c:	37 95       	ror	r19
     c9e:	27 95       	ror	r18
     ca0:	82 2b       	or	r24, r18
     ca2:	93 2b       	or	r25, r19
     ca4:	a4 2b       	or	r26, r20
     ca6:	b5 2b       	or	r27, r21
     ca8:	84 83       	std	Z+4, r24	; 0x04
     caa:	95 83       	std	Z+5, r25	; 0x05
     cac:	a6 83       	std	Z+6, r26	; 0x06
     cae:	b7 83       	std	Z+7, r27	; 0x07
     cb0:	82 81       	ldd	r24, Z+2	; 0x02
     cb2:	93 81       	ldd	r25, Z+3	; 0x03
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	93 83       	std	Z+3, r25	; 0x03
     cb8:	82 83       	std	Z+2, r24	; 0x02
     cba:	df 01       	movw	r26, r30
     cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <_fpadd_parts+0x28c>
     cbe:	d2 01       	movw	r26, r4
     cc0:	cd 01       	movw	r24, r26
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	e2 e1       	ldi	r30, 0x12	; 18
     cc8:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__epilogue_restores__>

00000ccc <__subsf3>:
     ccc:	a0 e2       	ldi	r26, 0x20	; 32
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	ec e6       	ldi	r30, 0x6C	; 108
     cd2:	f6 e0       	ldi	r31, 0x06	; 6
     cd4:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__prologue_saves__+0x18>
     cd8:	69 83       	std	Y+1, r22	; 0x01
     cda:	7a 83       	std	Y+2, r23	; 0x02
     cdc:	8b 83       	std	Y+3, r24	; 0x03
     cde:	9c 83       	std	Y+4, r25	; 0x04
     ce0:	2d 83       	std	Y+5, r18	; 0x05
     ce2:	3e 83       	std	Y+6, r19	; 0x06
     ce4:	4f 83       	std	Y+7, r20	; 0x07
     ce6:	58 87       	std	Y+8, r21	; 0x08
     ce8:	e9 e0       	ldi	r30, 0x09	; 9
     cea:	ee 2e       	mov	r14, r30
     cec:	f1 2c       	mov	r15, r1
     cee:	ec 0e       	add	r14, r28
     cf0:	fd 1e       	adc	r15, r29
     cf2:	ce 01       	movw	r24, r28
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	b7 01       	movw	r22, r14
     cf8:	0e 94 91 09 	call	0x1322	; 0x1322 <__unpack_f>
     cfc:	8e 01       	movw	r16, r28
     cfe:	0f 5e       	subi	r16, 0xEF	; 239
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
     d02:	ce 01       	movw	r24, r28
     d04:	05 96       	adiw	r24, 0x05	; 5
     d06:	b8 01       	movw	r22, r16
     d08:	0e 94 91 09 	call	0x1322	; 0x1322 <__unpack_f>
     d0c:	8a 89       	ldd	r24, Y+18	; 0x12
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	89 27       	eor	r24, r25
     d12:	8a 8b       	std	Y+18, r24	; 0x12
     d14:	c7 01       	movw	r24, r14
     d16:	b8 01       	movw	r22, r16
     d18:	ae 01       	movw	r20, r28
     d1a:	47 5e       	subi	r20, 0xE7	; 231
     d1c:	5f 4f       	sbci	r21, 0xFF	; 255
     d1e:	0e 94 1a 05 	call	0xa34	; 0xa34 <_fpadd_parts>
     d22:	0e 94 bc 08 	call	0x1178	; 0x1178 <__pack_f>
     d26:	a0 96       	adiw	r28, 0x20	; 32
     d28:	e6 e0       	ldi	r30, 0x06	; 6
     d2a:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__epilogue_restores__+0x18>

00000d2e <__addsf3>:
     d2e:	a0 e2       	ldi	r26, 0x20	; 32
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ed e9       	ldi	r30, 0x9D	; 157
     d34:	f6 e0       	ldi	r31, 0x06	; 6
     d36:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__prologue_saves__+0x18>
     d3a:	69 83       	std	Y+1, r22	; 0x01
     d3c:	7a 83       	std	Y+2, r23	; 0x02
     d3e:	8b 83       	std	Y+3, r24	; 0x03
     d40:	9c 83       	std	Y+4, r25	; 0x04
     d42:	2d 83       	std	Y+5, r18	; 0x05
     d44:	3e 83       	std	Y+6, r19	; 0x06
     d46:	4f 83       	std	Y+7, r20	; 0x07
     d48:	58 87       	std	Y+8, r21	; 0x08
     d4a:	f9 e0       	ldi	r31, 0x09	; 9
     d4c:	ef 2e       	mov	r14, r31
     d4e:	f1 2c       	mov	r15, r1
     d50:	ec 0e       	add	r14, r28
     d52:	fd 1e       	adc	r15, r29
     d54:	ce 01       	movw	r24, r28
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	b7 01       	movw	r22, r14
     d5a:	0e 94 91 09 	call	0x1322	; 0x1322 <__unpack_f>
     d5e:	8e 01       	movw	r16, r28
     d60:	0f 5e       	subi	r16, 0xEF	; 239
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	ce 01       	movw	r24, r28
     d66:	05 96       	adiw	r24, 0x05	; 5
     d68:	b8 01       	movw	r22, r16
     d6a:	0e 94 91 09 	call	0x1322	; 0x1322 <__unpack_f>
     d6e:	c7 01       	movw	r24, r14
     d70:	b8 01       	movw	r22, r16
     d72:	ae 01       	movw	r20, r28
     d74:	47 5e       	subi	r20, 0xE7	; 231
     d76:	5f 4f       	sbci	r21, 0xFF	; 255
     d78:	0e 94 1a 05 	call	0xa34	; 0xa34 <_fpadd_parts>
     d7c:	0e 94 bc 08 	call	0x1178	; 0x1178 <__pack_f>
     d80:	a0 96       	adiw	r28, 0x20	; 32
     d82:	e6 e0       	ldi	r30, 0x06	; 6
     d84:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__epilogue_restores__+0x18>

00000d88 <__divsf3>:
     d88:	a8 e1       	ldi	r26, 0x18	; 24
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	ea ec       	ldi	r30, 0xCA	; 202
     d8e:	f6 e0       	ldi	r31, 0x06	; 6
     d90:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__prologue_saves__+0x10>
     d94:	69 83       	std	Y+1, r22	; 0x01
     d96:	7a 83       	std	Y+2, r23	; 0x02
     d98:	8b 83       	std	Y+3, r24	; 0x03
     d9a:	9c 83       	std	Y+4, r25	; 0x04
     d9c:	2d 83       	std	Y+5, r18	; 0x05
     d9e:	3e 83       	std	Y+6, r19	; 0x06
     da0:	4f 83       	std	Y+7, r20	; 0x07
     da2:	58 87       	std	Y+8, r21	; 0x08
     da4:	b9 e0       	ldi	r27, 0x09	; 9
     da6:	eb 2e       	mov	r14, r27
     da8:	f1 2c       	mov	r15, r1
     daa:	ec 0e       	add	r14, r28
     dac:	fd 1e       	adc	r15, r29
     dae:	ce 01       	movw	r24, r28
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	b7 01       	movw	r22, r14
     db4:	0e 94 91 09 	call	0x1322	; 0x1322 <__unpack_f>
     db8:	8e 01       	movw	r16, r28
     dba:	0f 5e       	subi	r16, 0xEF	; 239
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	ce 01       	movw	r24, r28
     dc0:	05 96       	adiw	r24, 0x05	; 5
     dc2:	b8 01       	movw	r22, r16
     dc4:	0e 94 91 09 	call	0x1322	; 0x1322 <__unpack_f>
     dc8:	29 85       	ldd	r18, Y+9	; 0x09
     dca:	22 30       	cpi	r18, 0x02	; 2
     dcc:	08 f4       	brcc	.+2      	; 0xdd0 <__divsf3+0x48>
     dce:	7e c0       	rjmp	.+252    	; 0xecc <__divsf3+0x144>
     dd0:	39 89       	ldd	r19, Y+17	; 0x11
     dd2:	32 30       	cpi	r19, 0x02	; 2
     dd4:	10 f4       	brcc	.+4      	; 0xdda <__divsf3+0x52>
     dd6:	b8 01       	movw	r22, r16
     dd8:	7c c0       	rjmp	.+248    	; 0xed2 <__divsf3+0x14a>
     dda:	8a 85       	ldd	r24, Y+10	; 0x0a
     ddc:	9a 89       	ldd	r25, Y+18	; 0x12
     dde:	89 27       	eor	r24, r25
     de0:	8a 87       	std	Y+10, r24	; 0x0a
     de2:	24 30       	cpi	r18, 0x04	; 4
     de4:	11 f0       	breq	.+4      	; 0xdea <__divsf3+0x62>
     de6:	22 30       	cpi	r18, 0x02	; 2
     de8:	31 f4       	brne	.+12     	; 0xdf6 <__divsf3+0x6e>
     dea:	23 17       	cp	r18, r19
     dec:	09 f0       	breq	.+2      	; 0xdf0 <__divsf3+0x68>
     dee:	6e c0       	rjmp	.+220    	; 0xecc <__divsf3+0x144>
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	72 e0       	ldi	r23, 0x02	; 2
     df4:	6e c0       	rjmp	.+220    	; 0xed2 <__divsf3+0x14a>
     df6:	34 30       	cpi	r19, 0x04	; 4
     df8:	39 f4       	brne	.+14     	; 0xe08 <__divsf3+0x80>
     dfa:	1d 86       	std	Y+13, r1	; 0x0d
     dfc:	1e 86       	std	Y+14, r1	; 0x0e
     dfe:	1f 86       	std	Y+15, r1	; 0x0f
     e00:	18 8a       	std	Y+16, r1	; 0x10
     e02:	1c 86       	std	Y+12, r1	; 0x0c
     e04:	1b 86       	std	Y+11, r1	; 0x0b
     e06:	04 c0       	rjmp	.+8      	; 0xe10 <__divsf3+0x88>
     e08:	32 30       	cpi	r19, 0x02	; 2
     e0a:	21 f4       	brne	.+8      	; 0xe14 <__divsf3+0x8c>
     e0c:	84 e0       	ldi	r24, 0x04	; 4
     e0e:	89 87       	std	Y+9, r24	; 0x09
     e10:	b7 01       	movw	r22, r14
     e12:	5f c0       	rjmp	.+190    	; 0xed2 <__divsf3+0x14a>
     e14:	2b 85       	ldd	r18, Y+11	; 0x0b
     e16:	3c 85       	ldd	r19, Y+12	; 0x0c
     e18:	8b 89       	ldd	r24, Y+19	; 0x13
     e1a:	9c 89       	ldd	r25, Y+20	; 0x14
     e1c:	28 1b       	sub	r18, r24
     e1e:	39 0b       	sbc	r19, r25
     e20:	3c 87       	std	Y+12, r19	; 0x0c
     e22:	2b 87       	std	Y+11, r18	; 0x0b
     e24:	ed 84       	ldd	r14, Y+13	; 0x0d
     e26:	fe 84       	ldd	r15, Y+14	; 0x0e
     e28:	0f 85       	ldd	r16, Y+15	; 0x0f
     e2a:	18 89       	ldd	r17, Y+16	; 0x10
     e2c:	ad 88       	ldd	r10, Y+21	; 0x15
     e2e:	be 88       	ldd	r11, Y+22	; 0x16
     e30:	cf 88       	ldd	r12, Y+23	; 0x17
     e32:	d8 8c       	ldd	r13, Y+24	; 0x18
     e34:	ea 14       	cp	r14, r10
     e36:	fb 04       	cpc	r15, r11
     e38:	0c 05       	cpc	r16, r12
     e3a:	1d 05       	cpc	r17, r13
     e3c:	40 f4       	brcc	.+16     	; 0xe4e <__divsf3+0xc6>
     e3e:	ee 0c       	add	r14, r14
     e40:	ff 1c       	adc	r15, r15
     e42:	00 1f       	adc	r16, r16
     e44:	11 1f       	adc	r17, r17
     e46:	21 50       	subi	r18, 0x01	; 1
     e48:	30 40       	sbci	r19, 0x00	; 0
     e4a:	3c 87       	std	Y+12, r19	; 0x0c
     e4c:	2b 87       	std	Y+11, r18	; 0x0b
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	a0 e0       	ldi	r26, 0x00	; 0
     e5c:	b0 e4       	ldi	r27, 0x40	; 64
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	ea 14       	cp	r14, r10
     e64:	fb 04       	cpc	r15, r11
     e66:	0c 05       	cpc	r16, r12
     e68:	1d 05       	cpc	r17, r13
     e6a:	40 f0       	brcs	.+16     	; 0xe7c <__divsf3+0xf4>
     e6c:	28 2b       	or	r18, r24
     e6e:	39 2b       	or	r19, r25
     e70:	4a 2b       	or	r20, r26
     e72:	5b 2b       	or	r21, r27
     e74:	ea 18       	sub	r14, r10
     e76:	fb 08       	sbc	r15, r11
     e78:	0c 09       	sbc	r16, r12
     e7a:	1d 09       	sbc	r17, r13
     e7c:	b6 95       	lsr	r27
     e7e:	a7 95       	ror	r26
     e80:	97 95       	ror	r25
     e82:	87 95       	ror	r24
     e84:	ee 0c       	add	r14, r14
     e86:	ff 1c       	adc	r15, r15
     e88:	00 1f       	adc	r16, r16
     e8a:	11 1f       	adc	r17, r17
     e8c:	6f 5f       	subi	r22, 0xFF	; 255
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	6f 31       	cpi	r22, 0x1F	; 31
     e92:	71 05       	cpc	r23, r1
     e94:	31 f7       	brne	.-52     	; 0xe62 <__divsf3+0xda>
     e96:	da 01       	movw	r26, r20
     e98:	c9 01       	movw	r24, r18
     e9a:	8f 77       	andi	r24, 0x7F	; 127
     e9c:	90 70       	andi	r25, 0x00	; 0
     e9e:	a0 70       	andi	r26, 0x00	; 0
     ea0:	b0 70       	andi	r27, 0x00	; 0
     ea2:	80 34       	cpi	r24, 0x40	; 64
     ea4:	91 05       	cpc	r25, r1
     ea6:	a1 05       	cpc	r26, r1
     ea8:	b1 05       	cpc	r27, r1
     eaa:	61 f4       	brne	.+24     	; 0xec4 <__divsf3+0x13c>
     eac:	27 fd       	sbrc	r18, 7
     eae:	0a c0       	rjmp	.+20     	; 0xec4 <__divsf3+0x13c>
     eb0:	e1 14       	cp	r14, r1
     eb2:	f1 04       	cpc	r15, r1
     eb4:	01 05       	cpc	r16, r1
     eb6:	11 05       	cpc	r17, r1
     eb8:	29 f0       	breq	.+10     	; 0xec4 <__divsf3+0x13c>
     eba:	20 5c       	subi	r18, 0xC0	; 192
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	4f 4f       	sbci	r20, 0xFF	; 255
     ec0:	5f 4f       	sbci	r21, 0xFF	; 255
     ec2:	20 78       	andi	r18, 0x80	; 128
     ec4:	2d 87       	std	Y+13, r18	; 0x0d
     ec6:	3e 87       	std	Y+14, r19	; 0x0e
     ec8:	4f 87       	std	Y+15, r20	; 0x0f
     eca:	58 8b       	std	Y+16, r21	; 0x10
     ecc:	be 01       	movw	r22, r28
     ece:	67 5f       	subi	r22, 0xF7	; 247
     ed0:	7f 4f       	sbci	r23, 0xFF	; 255
     ed2:	cb 01       	movw	r24, r22
     ed4:	0e 94 bc 08 	call	0x1178	; 0x1178 <__pack_f>
     ed8:	68 96       	adiw	r28, 0x18	; 24
     eda:	ea e0       	ldi	r30, 0x0A	; 10
     edc:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__epilogue_restores__+0x10>

00000ee0 <__gesf2>:
     ee0:	a8 e1       	ldi	r26, 0x18	; 24
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e6 e7       	ldi	r30, 0x76	; 118
     ee6:	f7 e0       	ldi	r31, 0x07	; 7
     ee8:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__prologue_saves__+0x18>
     eec:	69 83       	std	Y+1, r22	; 0x01
     eee:	7a 83       	std	Y+2, r23	; 0x02
     ef0:	8b 83       	std	Y+3, r24	; 0x03
     ef2:	9c 83       	std	Y+4, r25	; 0x04
     ef4:	2d 83       	std	Y+5, r18	; 0x05
     ef6:	3e 83       	std	Y+6, r19	; 0x06
     ef8:	4f 83       	std	Y+7, r20	; 0x07
     efa:	58 87       	std	Y+8, r21	; 0x08
     efc:	89 e0       	ldi	r24, 0x09	; 9
     efe:	e8 2e       	mov	r14, r24
     f00:	f1 2c       	mov	r15, r1
     f02:	ec 0e       	add	r14, r28
     f04:	fd 1e       	adc	r15, r29
     f06:	ce 01       	movw	r24, r28
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	b7 01       	movw	r22, r14
     f0c:	0e 94 91 09 	call	0x1322	; 0x1322 <__unpack_f>
     f10:	8e 01       	movw	r16, r28
     f12:	0f 5e       	subi	r16, 0xEF	; 239
     f14:	1f 4f       	sbci	r17, 0xFF	; 255
     f16:	ce 01       	movw	r24, r28
     f18:	05 96       	adiw	r24, 0x05	; 5
     f1a:	b8 01       	movw	r22, r16
     f1c:	0e 94 91 09 	call	0x1322	; 0x1322 <__unpack_f>
     f20:	89 85       	ldd	r24, Y+9	; 0x09
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	40 f0       	brcs	.+16     	; 0xf36 <__gesf2+0x56>
     f26:	89 89       	ldd	r24, Y+17	; 0x11
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	28 f0       	brcs	.+10     	; 0xf36 <__gesf2+0x56>
     f2c:	c7 01       	movw	r24, r14
     f2e:	b8 01       	movw	r22, r16
     f30:	0e 94 09 0a 	call	0x1412	; 0x1412 <__fpcmp_parts_f>
     f34:	01 c0       	rjmp	.+2      	; 0xf38 <__gesf2+0x58>
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	68 96       	adiw	r28, 0x18	; 24
     f3a:	e6 e0       	ldi	r30, 0x06	; 6
     f3c:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__epilogue_restores__+0x18>

00000f40 <__fixsfsi>:
     f40:	ac e0       	ldi	r26, 0x0C	; 12
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e6 ea       	ldi	r30, 0xA6	; 166
     f46:	f7 e0       	ldi	r31, 0x07	; 7
     f48:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__prologue_saves__+0x20>
     f4c:	69 83       	std	Y+1, r22	; 0x01
     f4e:	7a 83       	std	Y+2, r23	; 0x02
     f50:	8b 83       	std	Y+3, r24	; 0x03
     f52:	9c 83       	std	Y+4, r25	; 0x04
     f54:	ce 01       	movw	r24, r28
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	be 01       	movw	r22, r28
     f5a:	6b 5f       	subi	r22, 0xFB	; 251
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	0e 94 91 09 	call	0x1322	; 0x1322 <__unpack_f>
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	82 30       	cpi	r24, 0x02	; 2
     f66:	61 f1       	breq	.+88     	; 0xfc0 <__fixsfsi+0x80>
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	50 f1       	brcs	.+84     	; 0xfc0 <__fixsfsi+0x80>
     f6c:	84 30       	cpi	r24, 0x04	; 4
     f6e:	21 f4       	brne	.+8      	; 0xf78 <__fixsfsi+0x38>
     f70:	8e 81       	ldd	r24, Y+6	; 0x06
     f72:	88 23       	and	r24, r24
     f74:	51 f1       	breq	.+84     	; 0xfca <__fixsfsi+0x8a>
     f76:	2e c0       	rjmp	.+92     	; 0xfd4 <__fixsfsi+0x94>
     f78:	2f 81       	ldd	r18, Y+7	; 0x07
     f7a:	38 85       	ldd	r19, Y+8	; 0x08
     f7c:	37 fd       	sbrc	r19, 7
     f7e:	20 c0       	rjmp	.+64     	; 0xfc0 <__fixsfsi+0x80>
     f80:	6e 81       	ldd	r22, Y+6	; 0x06
     f82:	2f 31       	cpi	r18, 0x1F	; 31
     f84:	31 05       	cpc	r19, r1
     f86:	1c f0       	brlt	.+6      	; 0xf8e <__fixsfsi+0x4e>
     f88:	66 23       	and	r22, r22
     f8a:	f9 f0       	breq	.+62     	; 0xfca <__fixsfsi+0x8a>
     f8c:	23 c0       	rjmp	.+70     	; 0xfd4 <__fixsfsi+0x94>
     f8e:	8e e1       	ldi	r24, 0x1E	; 30
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	82 1b       	sub	r24, r18
     f94:	93 0b       	sbc	r25, r19
     f96:	29 85       	ldd	r18, Y+9	; 0x09
     f98:	3a 85       	ldd	r19, Y+10	; 0x0a
     f9a:	4b 85       	ldd	r20, Y+11	; 0x0b
     f9c:	5c 85       	ldd	r21, Y+12	; 0x0c
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <__fixsfsi+0x68>
     fa0:	56 95       	lsr	r21
     fa2:	47 95       	ror	r20
     fa4:	37 95       	ror	r19
     fa6:	27 95       	ror	r18
     fa8:	8a 95       	dec	r24
     faa:	d2 f7       	brpl	.-12     	; 0xfa0 <__fixsfsi+0x60>
     fac:	66 23       	and	r22, r22
     fae:	b1 f0       	breq	.+44     	; 0xfdc <__fixsfsi+0x9c>
     fb0:	50 95       	com	r21
     fb2:	40 95       	com	r20
     fb4:	30 95       	com	r19
     fb6:	21 95       	neg	r18
     fb8:	3f 4f       	sbci	r19, 0xFF	; 255
     fba:	4f 4f       	sbci	r20, 0xFF	; 255
     fbc:	5f 4f       	sbci	r21, 0xFF	; 255
     fbe:	0e c0       	rjmp	.+28     	; 0xfdc <__fixsfsi+0x9c>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	09 c0       	rjmp	.+18     	; 0xfdc <__fixsfsi+0x9c>
     fca:	2f ef       	ldi	r18, 0xFF	; 255
     fcc:	3f ef       	ldi	r19, 0xFF	; 255
     fce:	4f ef       	ldi	r20, 0xFF	; 255
     fd0:	5f e7       	ldi	r21, 0x7F	; 127
     fd2:	04 c0       	rjmp	.+8      	; 0xfdc <__fixsfsi+0x9c>
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	50 e8       	ldi	r21, 0x80	; 128
     fdc:	b9 01       	movw	r22, r18
     fde:	ca 01       	movw	r24, r20
     fe0:	2c 96       	adiw	r28, 0x0c	; 12
     fe2:	e2 e0       	ldi	r30, 0x02	; 2
     fe4:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__epilogue_restores__+0x20>

00000fe8 <__floatunsisf>:
     fe8:	a8 e0       	ldi	r26, 0x08	; 8
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ea ef       	ldi	r30, 0xFA	; 250
     fee:	f7 e0       	ldi	r31, 0x07	; 7
     ff0:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__prologue_saves__+0x10>
     ff4:	7b 01       	movw	r14, r22
     ff6:	8c 01       	movw	r16, r24
     ff8:	61 15       	cp	r22, r1
     ffa:	71 05       	cpc	r23, r1
     ffc:	81 05       	cpc	r24, r1
     ffe:	91 05       	cpc	r25, r1
    1000:	19 f4       	brne	.+6      	; 0x1008 <__floatunsisf+0x20>
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	60 c0       	rjmp	.+192    	; 0x10c8 <__floatunsisf+0xe0>
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	8e e1       	ldi	r24, 0x1E	; 30
    100e:	c8 2e       	mov	r12, r24
    1010:	d1 2c       	mov	r13, r1
    1012:	dc 82       	std	Y+4, r13	; 0x04
    1014:	cb 82       	std	Y+3, r12	; 0x03
    1016:	ed 82       	std	Y+5, r14	; 0x05
    1018:	fe 82       	std	Y+6, r15	; 0x06
    101a:	0f 83       	std	Y+7, r16	; 0x07
    101c:	18 87       	std	Y+8, r17	; 0x08
    101e:	c8 01       	movw	r24, r16
    1020:	b7 01       	movw	r22, r14
    1022:	0e 94 6d 08 	call	0x10da	; 0x10da <__clzsi2>
    1026:	fc 01       	movw	r30, r24
    1028:	31 97       	sbiw	r30, 0x01	; 1
    102a:	f7 ff       	sbrs	r31, 7
    102c:	3b c0       	rjmp	.+118    	; 0x10a4 <__floatunsisf+0xbc>
    102e:	22 27       	eor	r18, r18
    1030:	33 27       	eor	r19, r19
    1032:	2e 1b       	sub	r18, r30
    1034:	3f 0b       	sbc	r19, r31
    1036:	57 01       	movw	r10, r14
    1038:	68 01       	movw	r12, r16
    103a:	02 2e       	mov	r0, r18
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <__floatunsisf+0x5e>
    103e:	d6 94       	lsr	r13
    1040:	c7 94       	ror	r12
    1042:	b7 94       	ror	r11
    1044:	a7 94       	ror	r10
    1046:	0a 94       	dec	r0
    1048:	d2 f7       	brpl	.-12     	; 0x103e <__floatunsisf+0x56>
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	a0 e0       	ldi	r26, 0x00	; 0
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <__floatunsisf+0x7c>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	aa 1f       	adc	r26, r26
    1062:	bb 1f       	adc	r27, r27
    1064:	2a 95       	dec	r18
    1066:	d2 f7       	brpl	.-12     	; 0x105c <__floatunsisf+0x74>
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	a1 09       	sbc	r26, r1
    106c:	b1 09       	sbc	r27, r1
    106e:	8e 21       	and	r24, r14
    1070:	9f 21       	and	r25, r15
    1072:	a0 23       	and	r26, r16
    1074:	b1 23       	and	r27, r17
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	a1 05       	cpc	r26, r1
    107a:	b1 05       	cpc	r27, r1
    107c:	21 f0       	breq	.+8      	; 0x1086 <__floatunsisf+0x9e>
    107e:	41 e0       	ldi	r20, 0x01	; 1
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	4a 29       	or	r20, r10
    1088:	5b 29       	or	r21, r11
    108a:	6c 29       	or	r22, r12
    108c:	7d 29       	or	r23, r13
    108e:	4d 83       	std	Y+5, r20	; 0x05
    1090:	5e 83       	std	Y+6, r21	; 0x06
    1092:	6f 83       	std	Y+7, r22	; 0x07
    1094:	78 87       	std	Y+8, r23	; 0x08
    1096:	8e e1       	ldi	r24, 0x1E	; 30
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	8e 1b       	sub	r24, r30
    109c:	9f 0b       	sbc	r25, r31
    109e:	9c 83       	std	Y+4, r25	; 0x04
    10a0:	8b 83       	std	Y+3, r24	; 0x03
    10a2:	12 c0       	rjmp	.+36     	; 0x10c8 <__floatunsisf+0xe0>
    10a4:	30 97       	sbiw	r30, 0x00	; 0
    10a6:	81 f0       	breq	.+32     	; 0x10c8 <__floatunsisf+0xe0>
    10a8:	0e 2e       	mov	r0, r30
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <__floatunsisf+0xcc>
    10ac:	ee 0c       	add	r14, r14
    10ae:	ff 1c       	adc	r15, r15
    10b0:	00 1f       	adc	r16, r16
    10b2:	11 1f       	adc	r17, r17
    10b4:	0a 94       	dec	r0
    10b6:	d2 f7       	brpl	.-12     	; 0x10ac <__floatunsisf+0xc4>
    10b8:	ed 82       	std	Y+5, r14	; 0x05
    10ba:	fe 82       	std	Y+6, r15	; 0x06
    10bc:	0f 83       	std	Y+7, r16	; 0x07
    10be:	18 87       	std	Y+8, r17	; 0x08
    10c0:	ce 1a       	sub	r12, r30
    10c2:	df 0a       	sbc	r13, r31
    10c4:	dc 82       	std	Y+4, r13	; 0x04
    10c6:	cb 82       	std	Y+3, r12	; 0x03
    10c8:	1a 82       	std	Y+2, r1	; 0x02
    10ca:	ce 01       	movw	r24, r28
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	0e 94 bc 08 	call	0x1178	; 0x1178 <__pack_f>
    10d2:	28 96       	adiw	r28, 0x08	; 8
    10d4:	ea e0       	ldi	r30, 0x0A	; 10
    10d6:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__epilogue_restores__+0x10>

000010da <__clzsi2>:
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	7b 01       	movw	r14, r22
    10e4:	8c 01       	movw	r16, r24
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	e8 16       	cp	r14, r24
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	f8 06       	cpc	r15, r24
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	08 07       	cpc	r16, r24
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	18 07       	cpc	r17, r24
    10f6:	88 f4       	brcc	.+34     	; 0x111a <__clzsi2+0x40>
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	e8 16       	cp	r14, r24
    10fc:	f1 04       	cpc	r15, r1
    10fe:	01 05       	cpc	r16, r1
    1100:	11 05       	cpc	r17, r1
    1102:	31 f0       	breq	.+12     	; 0x1110 <__clzsi2+0x36>
    1104:	28 f0       	brcs	.+10     	; 0x1110 <__clzsi2+0x36>
    1106:	88 e0       	ldi	r24, 0x08	; 8
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 e0       	ldi	r26, 0x00	; 0
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	17 c0       	rjmp	.+46     	; 0x113e <__clzsi2+0x64>
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a0 e0       	ldi	r26, 0x00	; 0
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	12 c0       	rjmp	.+36     	; 0x113e <__clzsi2+0x64>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	e8 16       	cp	r14, r24
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	f8 06       	cpc	r15, r24
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	08 07       	cpc	r16, r24
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	18 07       	cpc	r17, r24
    112a:	28 f0       	brcs	.+10     	; 0x1136 <__clzsi2+0x5c>
    112c:	88 e1       	ldi	r24, 0x18	; 24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	04 c0       	rjmp	.+8      	; 0x113e <__clzsi2+0x64>
    1136:	80 e1       	ldi	r24, 0x10	; 16
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a0 e0       	ldi	r26, 0x00	; 0
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	20 e2       	ldi	r18, 0x20	; 32
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	28 1b       	sub	r18, r24
    1148:	39 0b       	sbc	r19, r25
    114a:	4a 0b       	sbc	r20, r26
    114c:	5b 0b       	sbc	r21, r27
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <__clzsi2+0x7e>
    1150:	16 95       	lsr	r17
    1152:	07 95       	ror	r16
    1154:	f7 94       	ror	r15
    1156:	e7 94       	ror	r14
    1158:	8a 95       	dec	r24
    115a:	d2 f7       	brpl	.-12     	; 0x1150 <__clzsi2+0x76>
    115c:	f7 01       	movw	r30, r14
    115e:	e8 5f       	subi	r30, 0xF8	; 248
    1160:	fd 4f       	sbci	r31, 0xFD	; 253
    1162:	80 81       	ld	r24, Z
    1164:	28 1b       	sub	r18, r24
    1166:	31 09       	sbc	r19, r1
    1168:	41 09       	sbc	r20, r1
    116a:	51 09       	sbc	r21, r1
    116c:	c9 01       	movw	r24, r18
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	08 95       	ret

00001178 <__pack_f>:
    1178:	df 92       	push	r13
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	fc 01       	movw	r30, r24
    1184:	e4 80       	ldd	r14, Z+4	; 0x04
    1186:	f5 80       	ldd	r15, Z+5	; 0x05
    1188:	06 81       	ldd	r16, Z+6	; 0x06
    118a:	17 81       	ldd	r17, Z+7	; 0x07
    118c:	d1 80       	ldd	r13, Z+1	; 0x01
    118e:	80 81       	ld	r24, Z
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	48 f4       	brcc	.+18     	; 0x11a6 <__pack_f+0x2e>
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	a0 e1       	ldi	r26, 0x10	; 16
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 2a       	or	r14, r24
    119e:	f9 2a       	or	r15, r25
    11a0:	0a 2b       	or	r16, r26
    11a2:	1b 2b       	or	r17, r27
    11a4:	a5 c0       	rjmp	.+330    	; 0x12f0 <__pack_f+0x178>
    11a6:	84 30       	cpi	r24, 0x04	; 4
    11a8:	09 f4       	brne	.+2      	; 0x11ac <__pack_f+0x34>
    11aa:	9f c0       	rjmp	.+318    	; 0x12ea <__pack_f+0x172>
    11ac:	82 30       	cpi	r24, 0x02	; 2
    11ae:	21 f4       	brne	.+8      	; 0x11b8 <__pack_f+0x40>
    11b0:	ee 24       	eor	r14, r14
    11b2:	ff 24       	eor	r15, r15
    11b4:	87 01       	movw	r16, r14
    11b6:	05 c0       	rjmp	.+10     	; 0x11c2 <__pack_f+0x4a>
    11b8:	e1 14       	cp	r14, r1
    11ba:	f1 04       	cpc	r15, r1
    11bc:	01 05       	cpc	r16, r1
    11be:	11 05       	cpc	r17, r1
    11c0:	19 f4       	brne	.+6      	; 0x11c8 <__pack_f+0x50>
    11c2:	e0 e0       	ldi	r30, 0x00	; 0
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	96 c0       	rjmp	.+300    	; 0x12f4 <__pack_f+0x17c>
    11c8:	62 81       	ldd	r22, Z+2	; 0x02
    11ca:	73 81       	ldd	r23, Z+3	; 0x03
    11cc:	9f ef       	ldi	r25, 0xFF	; 255
    11ce:	62 38       	cpi	r22, 0x82	; 130
    11d0:	79 07       	cpc	r23, r25
    11d2:	0c f0       	brlt	.+2      	; 0x11d6 <__pack_f+0x5e>
    11d4:	5b c0       	rjmp	.+182    	; 0x128c <__pack_f+0x114>
    11d6:	22 e8       	ldi	r18, 0x82	; 130
    11d8:	3f ef       	ldi	r19, 0xFF	; 255
    11da:	26 1b       	sub	r18, r22
    11dc:	37 0b       	sbc	r19, r23
    11de:	2a 31       	cpi	r18, 0x1A	; 26
    11e0:	31 05       	cpc	r19, r1
    11e2:	2c f0       	brlt	.+10     	; 0x11ee <__pack_f+0x76>
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	2a c0       	rjmp	.+84     	; 0x1242 <__pack_f+0xca>
    11ee:	b8 01       	movw	r22, r16
    11f0:	a7 01       	movw	r20, r14
    11f2:	02 2e       	mov	r0, r18
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <__pack_f+0x86>
    11f6:	76 95       	lsr	r23
    11f8:	67 95       	ror	r22
    11fa:	57 95       	ror	r21
    11fc:	47 95       	ror	r20
    11fe:	0a 94       	dec	r0
    1200:	d2 f7       	brpl	.-12     	; 0x11f6 <__pack_f+0x7e>
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a0 e0       	ldi	r26, 0x00	; 0
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	04 c0       	rjmp	.+8      	; 0x1214 <__pack_f+0x9c>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	aa 1f       	adc	r26, r26
    1212:	bb 1f       	adc	r27, r27
    1214:	2a 95       	dec	r18
    1216:	d2 f7       	brpl	.-12     	; 0x120c <__pack_f+0x94>
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	a1 09       	sbc	r26, r1
    121c:	b1 09       	sbc	r27, r1
    121e:	8e 21       	and	r24, r14
    1220:	9f 21       	and	r25, r15
    1222:	a0 23       	and	r26, r16
    1224:	b1 23       	and	r27, r17
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	a1 05       	cpc	r26, r1
    122a:	b1 05       	cpc	r27, r1
    122c:	21 f0       	breq	.+8      	; 0x1236 <__pack_f+0xbe>
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	a0 e0       	ldi	r26, 0x00	; 0
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	9a 01       	movw	r18, r20
    1238:	ab 01       	movw	r20, r22
    123a:	28 2b       	or	r18, r24
    123c:	39 2b       	or	r19, r25
    123e:	4a 2b       	or	r20, r26
    1240:	5b 2b       	or	r21, r27
    1242:	da 01       	movw	r26, r20
    1244:	c9 01       	movw	r24, r18
    1246:	8f 77       	andi	r24, 0x7F	; 127
    1248:	90 70       	andi	r25, 0x00	; 0
    124a:	a0 70       	andi	r26, 0x00	; 0
    124c:	b0 70       	andi	r27, 0x00	; 0
    124e:	80 34       	cpi	r24, 0x40	; 64
    1250:	91 05       	cpc	r25, r1
    1252:	a1 05       	cpc	r26, r1
    1254:	b1 05       	cpc	r27, r1
    1256:	39 f4       	brne	.+14     	; 0x1266 <__pack_f+0xee>
    1258:	27 ff       	sbrs	r18, 7
    125a:	09 c0       	rjmp	.+18     	; 0x126e <__pack_f+0xf6>
    125c:	20 5c       	subi	r18, 0xC0	; 192
    125e:	3f 4f       	sbci	r19, 0xFF	; 255
    1260:	4f 4f       	sbci	r20, 0xFF	; 255
    1262:	5f 4f       	sbci	r21, 0xFF	; 255
    1264:	04 c0       	rjmp	.+8      	; 0x126e <__pack_f+0xf6>
    1266:	21 5c       	subi	r18, 0xC1	; 193
    1268:	3f 4f       	sbci	r19, 0xFF	; 255
    126a:	4f 4f       	sbci	r20, 0xFF	; 255
    126c:	5f 4f       	sbci	r21, 0xFF	; 255
    126e:	e0 e0       	ldi	r30, 0x00	; 0
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	20 30       	cpi	r18, 0x00	; 0
    1274:	a0 e0       	ldi	r26, 0x00	; 0
    1276:	3a 07       	cpc	r19, r26
    1278:	a0 e0       	ldi	r26, 0x00	; 0
    127a:	4a 07       	cpc	r20, r26
    127c:	a0 e4       	ldi	r26, 0x40	; 64
    127e:	5a 07       	cpc	r21, r26
    1280:	10 f0       	brcs	.+4      	; 0x1286 <__pack_f+0x10e>
    1282:	e1 e0       	ldi	r30, 0x01	; 1
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	79 01       	movw	r14, r18
    1288:	8a 01       	movw	r16, r20
    128a:	27 c0       	rjmp	.+78     	; 0x12da <__pack_f+0x162>
    128c:	60 38       	cpi	r22, 0x80	; 128
    128e:	71 05       	cpc	r23, r1
    1290:	64 f5       	brge	.+88     	; 0x12ea <__pack_f+0x172>
    1292:	fb 01       	movw	r30, r22
    1294:	e1 58       	subi	r30, 0x81	; 129
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	d8 01       	movw	r26, r16
    129a:	c7 01       	movw	r24, r14
    129c:	8f 77       	andi	r24, 0x7F	; 127
    129e:	90 70       	andi	r25, 0x00	; 0
    12a0:	a0 70       	andi	r26, 0x00	; 0
    12a2:	b0 70       	andi	r27, 0x00	; 0
    12a4:	80 34       	cpi	r24, 0x40	; 64
    12a6:	91 05       	cpc	r25, r1
    12a8:	a1 05       	cpc	r26, r1
    12aa:	b1 05       	cpc	r27, r1
    12ac:	39 f4       	brne	.+14     	; 0x12bc <__pack_f+0x144>
    12ae:	e7 fe       	sbrs	r14, 7
    12b0:	0d c0       	rjmp	.+26     	; 0x12cc <__pack_f+0x154>
    12b2:	80 e4       	ldi	r24, 0x40	; 64
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a0 e0       	ldi	r26, 0x00	; 0
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <__pack_f+0x14c>
    12bc:	8f e3       	ldi	r24, 0x3F	; 63
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	a0 e0       	ldi	r26, 0x00	; 0
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e8 0e       	add	r14, r24
    12c6:	f9 1e       	adc	r15, r25
    12c8:	0a 1f       	adc	r16, r26
    12ca:	1b 1f       	adc	r17, r27
    12cc:	17 ff       	sbrs	r17, 7
    12ce:	05 c0       	rjmp	.+10     	; 0x12da <__pack_f+0x162>
    12d0:	16 95       	lsr	r17
    12d2:	07 95       	ror	r16
    12d4:	f7 94       	ror	r15
    12d6:	e7 94       	ror	r14
    12d8:	31 96       	adiw	r30, 0x01	; 1
    12da:	87 e0       	ldi	r24, 0x07	; 7
    12dc:	16 95       	lsr	r17
    12de:	07 95       	ror	r16
    12e0:	f7 94       	ror	r15
    12e2:	e7 94       	ror	r14
    12e4:	8a 95       	dec	r24
    12e6:	d1 f7       	brne	.-12     	; 0x12dc <__pack_f+0x164>
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <__pack_f+0x17c>
    12ea:	ee 24       	eor	r14, r14
    12ec:	ff 24       	eor	r15, r15
    12ee:	87 01       	movw	r16, r14
    12f0:	ef ef       	ldi	r30, 0xFF	; 255
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	6e 2f       	mov	r22, r30
    12f6:	67 95       	ror	r22
    12f8:	66 27       	eor	r22, r22
    12fa:	67 95       	ror	r22
    12fc:	90 2f       	mov	r25, r16
    12fe:	9f 77       	andi	r25, 0x7F	; 127
    1300:	d7 94       	ror	r13
    1302:	dd 24       	eor	r13, r13
    1304:	d7 94       	ror	r13
    1306:	8e 2f       	mov	r24, r30
    1308:	86 95       	lsr	r24
    130a:	49 2f       	mov	r20, r25
    130c:	46 2b       	or	r20, r22
    130e:	58 2f       	mov	r21, r24
    1310:	5d 29       	or	r21, r13
    1312:	b7 01       	movw	r22, r14
    1314:	ca 01       	movw	r24, r20
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	df 90       	pop	r13
    1320:	08 95       	ret

00001322 <__unpack_f>:
    1322:	fc 01       	movw	r30, r24
    1324:	db 01       	movw	r26, r22
    1326:	40 81       	ld	r20, Z
    1328:	51 81       	ldd	r21, Z+1	; 0x01
    132a:	22 81       	ldd	r18, Z+2	; 0x02
    132c:	62 2f       	mov	r22, r18
    132e:	6f 77       	andi	r22, 0x7F	; 127
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	22 1f       	adc	r18, r18
    1334:	22 27       	eor	r18, r18
    1336:	22 1f       	adc	r18, r18
    1338:	93 81       	ldd	r25, Z+3	; 0x03
    133a:	89 2f       	mov	r24, r25
    133c:	88 0f       	add	r24, r24
    133e:	82 2b       	or	r24, r18
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	99 1f       	adc	r25, r25
    1346:	99 27       	eor	r25, r25
    1348:	99 1f       	adc	r25, r25
    134a:	11 96       	adiw	r26, 0x01	; 1
    134c:	9c 93       	st	X, r25
    134e:	11 97       	sbiw	r26, 0x01	; 1
    1350:	21 15       	cp	r18, r1
    1352:	31 05       	cpc	r19, r1
    1354:	a9 f5       	brne	.+106    	; 0x13c0 <__unpack_f+0x9e>
    1356:	41 15       	cp	r20, r1
    1358:	51 05       	cpc	r21, r1
    135a:	61 05       	cpc	r22, r1
    135c:	71 05       	cpc	r23, r1
    135e:	11 f4       	brne	.+4      	; 0x1364 <__unpack_f+0x42>
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	37 c0       	rjmp	.+110    	; 0x13d2 <__unpack_f+0xb0>
    1364:	82 e8       	ldi	r24, 0x82	; 130
    1366:	9f ef       	ldi	r25, 0xFF	; 255
    1368:	13 96       	adiw	r26, 0x03	; 3
    136a:	9c 93       	st	X, r25
    136c:	8e 93       	st	-X, r24
    136e:	12 97       	sbiw	r26, 0x02	; 2
    1370:	9a 01       	movw	r18, r20
    1372:	ab 01       	movw	r20, r22
    1374:	67 e0       	ldi	r22, 0x07	; 7
    1376:	22 0f       	add	r18, r18
    1378:	33 1f       	adc	r19, r19
    137a:	44 1f       	adc	r20, r20
    137c:	55 1f       	adc	r21, r21
    137e:	6a 95       	dec	r22
    1380:	d1 f7       	brne	.-12     	; 0x1376 <__unpack_f+0x54>
    1382:	83 e0       	ldi	r24, 0x03	; 3
    1384:	8c 93       	st	X, r24
    1386:	0d c0       	rjmp	.+26     	; 0x13a2 <__unpack_f+0x80>
    1388:	22 0f       	add	r18, r18
    138a:	33 1f       	adc	r19, r19
    138c:	44 1f       	adc	r20, r20
    138e:	55 1f       	adc	r21, r21
    1390:	12 96       	adiw	r26, 0x02	; 2
    1392:	8d 91       	ld	r24, X+
    1394:	9c 91       	ld	r25, X
    1396:	13 97       	sbiw	r26, 0x03	; 3
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	13 96       	adiw	r26, 0x03	; 3
    139c:	9c 93       	st	X, r25
    139e:	8e 93       	st	-X, r24
    13a0:	12 97       	sbiw	r26, 0x02	; 2
    13a2:	20 30       	cpi	r18, 0x00	; 0
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	38 07       	cpc	r19, r24
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	48 07       	cpc	r20, r24
    13ac:	80 e4       	ldi	r24, 0x40	; 64
    13ae:	58 07       	cpc	r21, r24
    13b0:	58 f3       	brcs	.-42     	; 0x1388 <__unpack_f+0x66>
    13b2:	14 96       	adiw	r26, 0x04	; 4
    13b4:	2d 93       	st	X+, r18
    13b6:	3d 93       	st	X+, r19
    13b8:	4d 93       	st	X+, r20
    13ba:	5c 93       	st	X, r21
    13bc:	17 97       	sbiw	r26, 0x07	; 7
    13be:	08 95       	ret
    13c0:	2f 3f       	cpi	r18, 0xFF	; 255
    13c2:	31 05       	cpc	r19, r1
    13c4:	79 f4       	brne	.+30     	; 0x13e4 <__unpack_f+0xc2>
    13c6:	41 15       	cp	r20, r1
    13c8:	51 05       	cpc	r21, r1
    13ca:	61 05       	cpc	r22, r1
    13cc:	71 05       	cpc	r23, r1
    13ce:	19 f4       	brne	.+6      	; 0x13d6 <__unpack_f+0xb4>
    13d0:	84 e0       	ldi	r24, 0x04	; 4
    13d2:	8c 93       	st	X, r24
    13d4:	08 95       	ret
    13d6:	64 ff       	sbrs	r22, 4
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <__unpack_f+0xbe>
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	8c 93       	st	X, r24
    13de:	12 c0       	rjmp	.+36     	; 0x1404 <__unpack_f+0xe2>
    13e0:	1c 92       	st	X, r1
    13e2:	10 c0       	rjmp	.+32     	; 0x1404 <__unpack_f+0xe2>
    13e4:	2f 57       	subi	r18, 0x7F	; 127
    13e6:	30 40       	sbci	r19, 0x00	; 0
    13e8:	13 96       	adiw	r26, 0x03	; 3
    13ea:	3c 93       	st	X, r19
    13ec:	2e 93       	st	-X, r18
    13ee:	12 97       	sbiw	r26, 0x02	; 2
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	8c 93       	st	X, r24
    13f4:	87 e0       	ldi	r24, 0x07	; 7
    13f6:	44 0f       	add	r20, r20
    13f8:	55 1f       	adc	r21, r21
    13fa:	66 1f       	adc	r22, r22
    13fc:	77 1f       	adc	r23, r23
    13fe:	8a 95       	dec	r24
    1400:	d1 f7       	brne	.-12     	; 0x13f6 <__unpack_f+0xd4>
    1402:	70 64       	ori	r23, 0x40	; 64
    1404:	14 96       	adiw	r26, 0x04	; 4
    1406:	4d 93       	st	X+, r20
    1408:	5d 93       	st	X+, r21
    140a:	6d 93       	st	X+, r22
    140c:	7c 93       	st	X, r23
    140e:	17 97       	sbiw	r26, 0x07	; 7
    1410:	08 95       	ret

00001412 <__fpcmp_parts_f>:
    1412:	1f 93       	push	r17
    1414:	dc 01       	movw	r26, r24
    1416:	fb 01       	movw	r30, r22
    1418:	9c 91       	ld	r25, X
    141a:	92 30       	cpi	r25, 0x02	; 2
    141c:	08 f4       	brcc	.+2      	; 0x1420 <__fpcmp_parts_f+0xe>
    141e:	47 c0       	rjmp	.+142    	; 0x14ae <__fpcmp_parts_f+0x9c>
    1420:	80 81       	ld	r24, Z
    1422:	82 30       	cpi	r24, 0x02	; 2
    1424:	08 f4       	brcc	.+2      	; 0x1428 <__fpcmp_parts_f+0x16>
    1426:	43 c0       	rjmp	.+134    	; 0x14ae <__fpcmp_parts_f+0x9c>
    1428:	94 30       	cpi	r25, 0x04	; 4
    142a:	51 f4       	brne	.+20     	; 0x1440 <__fpcmp_parts_f+0x2e>
    142c:	11 96       	adiw	r26, 0x01	; 1
    142e:	1c 91       	ld	r17, X
    1430:	84 30       	cpi	r24, 0x04	; 4
    1432:	99 f5       	brne	.+102    	; 0x149a <__fpcmp_parts_f+0x88>
    1434:	81 81       	ldd	r24, Z+1	; 0x01
    1436:	68 2f       	mov	r22, r24
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	61 1b       	sub	r22, r17
    143c:	71 09       	sbc	r23, r1
    143e:	3f c0       	rjmp	.+126    	; 0x14be <__fpcmp_parts_f+0xac>
    1440:	84 30       	cpi	r24, 0x04	; 4
    1442:	21 f0       	breq	.+8      	; 0x144c <__fpcmp_parts_f+0x3a>
    1444:	92 30       	cpi	r25, 0x02	; 2
    1446:	31 f4       	brne	.+12     	; 0x1454 <__fpcmp_parts_f+0x42>
    1448:	82 30       	cpi	r24, 0x02	; 2
    144a:	b9 f1       	breq	.+110    	; 0x14ba <__fpcmp_parts_f+0xa8>
    144c:	81 81       	ldd	r24, Z+1	; 0x01
    144e:	88 23       	and	r24, r24
    1450:	89 f1       	breq	.+98     	; 0x14b4 <__fpcmp_parts_f+0xa2>
    1452:	2d c0       	rjmp	.+90     	; 0x14ae <__fpcmp_parts_f+0x9c>
    1454:	11 96       	adiw	r26, 0x01	; 1
    1456:	1c 91       	ld	r17, X
    1458:	11 97       	sbiw	r26, 0x01	; 1
    145a:	82 30       	cpi	r24, 0x02	; 2
    145c:	f1 f0       	breq	.+60     	; 0x149a <__fpcmp_parts_f+0x88>
    145e:	81 81       	ldd	r24, Z+1	; 0x01
    1460:	18 17       	cp	r17, r24
    1462:	d9 f4       	brne	.+54     	; 0x149a <__fpcmp_parts_f+0x88>
    1464:	12 96       	adiw	r26, 0x02	; 2
    1466:	2d 91       	ld	r18, X+
    1468:	3c 91       	ld	r19, X
    146a:	13 97       	sbiw	r26, 0x03	; 3
    146c:	82 81       	ldd	r24, Z+2	; 0x02
    146e:	93 81       	ldd	r25, Z+3	; 0x03
    1470:	82 17       	cp	r24, r18
    1472:	93 07       	cpc	r25, r19
    1474:	94 f0       	brlt	.+36     	; 0x149a <__fpcmp_parts_f+0x88>
    1476:	28 17       	cp	r18, r24
    1478:	39 07       	cpc	r19, r25
    147a:	bc f0       	brlt	.+46     	; 0x14aa <__fpcmp_parts_f+0x98>
    147c:	14 96       	adiw	r26, 0x04	; 4
    147e:	8d 91       	ld	r24, X+
    1480:	9d 91       	ld	r25, X+
    1482:	0d 90       	ld	r0, X+
    1484:	bc 91       	ld	r27, X
    1486:	a0 2d       	mov	r26, r0
    1488:	24 81       	ldd	r18, Z+4	; 0x04
    148a:	35 81       	ldd	r19, Z+5	; 0x05
    148c:	46 81       	ldd	r20, Z+6	; 0x06
    148e:	57 81       	ldd	r21, Z+7	; 0x07
    1490:	28 17       	cp	r18, r24
    1492:	39 07       	cpc	r19, r25
    1494:	4a 07       	cpc	r20, r26
    1496:	5b 07       	cpc	r21, r27
    1498:	18 f4       	brcc	.+6      	; 0x14a0 <__fpcmp_parts_f+0x8e>
    149a:	11 23       	and	r17, r17
    149c:	41 f0       	breq	.+16     	; 0x14ae <__fpcmp_parts_f+0x9c>
    149e:	0a c0       	rjmp	.+20     	; 0x14b4 <__fpcmp_parts_f+0xa2>
    14a0:	82 17       	cp	r24, r18
    14a2:	93 07       	cpc	r25, r19
    14a4:	a4 07       	cpc	r26, r20
    14a6:	b5 07       	cpc	r27, r21
    14a8:	40 f4       	brcc	.+16     	; 0x14ba <__fpcmp_parts_f+0xa8>
    14aa:	11 23       	and	r17, r17
    14ac:	19 f0       	breq	.+6      	; 0x14b4 <__fpcmp_parts_f+0xa2>
    14ae:	61 e0       	ldi	r22, 0x01	; 1
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	05 c0       	rjmp	.+10     	; 0x14be <__fpcmp_parts_f+0xac>
    14b4:	6f ef       	ldi	r22, 0xFF	; 255
    14b6:	7f ef       	ldi	r23, 0xFF	; 255
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <__fpcmp_parts_f+0xac>
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	cb 01       	movw	r24, r22
    14c0:	1f 91       	pop	r17
    14c2:	08 95       	ret

000014c4 <__udivmodhi4>:
    14c4:	aa 1b       	sub	r26, r26
    14c6:	bb 1b       	sub	r27, r27
    14c8:	51 e1       	ldi	r21, 0x11	; 17
    14ca:	07 c0       	rjmp	.+14     	; 0x14da <__udivmodhi4_ep>

000014cc <__udivmodhi4_loop>:
    14cc:	aa 1f       	adc	r26, r26
    14ce:	bb 1f       	adc	r27, r27
    14d0:	a6 17       	cp	r26, r22
    14d2:	b7 07       	cpc	r27, r23
    14d4:	10 f0       	brcs	.+4      	; 0x14da <__udivmodhi4_ep>
    14d6:	a6 1b       	sub	r26, r22
    14d8:	b7 0b       	sbc	r27, r23

000014da <__udivmodhi4_ep>:
    14da:	88 1f       	adc	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	5a 95       	dec	r21
    14e0:	a9 f7       	brne	.-22     	; 0x14cc <__udivmodhi4_loop>
    14e2:	80 95       	com	r24
    14e4:	90 95       	com	r25
    14e6:	bc 01       	movw	r22, r24
    14e8:	cd 01       	movw	r24, r26
    14ea:	08 95       	ret

000014ec <__prologue_saves__>:
    14ec:	2f 92       	push	r2
    14ee:	3f 92       	push	r3
    14f0:	4f 92       	push	r4
    14f2:	5f 92       	push	r5
    14f4:	6f 92       	push	r6
    14f6:	7f 92       	push	r7
    14f8:	8f 92       	push	r8
    14fa:	9f 92       	push	r9
    14fc:	af 92       	push	r10
    14fe:	bf 92       	push	r11
    1500:	cf 92       	push	r12
    1502:	df 92       	push	r13
    1504:	ef 92       	push	r14
    1506:	ff 92       	push	r15
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	ca 1b       	sub	r28, r26
    1516:	db 0b       	sbc	r29, r27
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	19 94       	eijmp

00001524 <__epilogue_restores__>:
    1524:	2a 88       	ldd	r2, Y+18	; 0x12
    1526:	39 88       	ldd	r3, Y+17	; 0x11
    1528:	48 88       	ldd	r4, Y+16	; 0x10
    152a:	5f 84       	ldd	r5, Y+15	; 0x0f
    152c:	6e 84       	ldd	r6, Y+14	; 0x0e
    152e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1530:	8c 84       	ldd	r8, Y+12	; 0x0c
    1532:	9b 84       	ldd	r9, Y+11	; 0x0b
    1534:	aa 84       	ldd	r10, Y+10	; 0x0a
    1536:	b9 84       	ldd	r11, Y+9	; 0x09
    1538:	c8 84       	ldd	r12, Y+8	; 0x08
    153a:	df 80       	ldd	r13, Y+7	; 0x07
    153c:	ee 80       	ldd	r14, Y+6	; 0x06
    153e:	fd 80       	ldd	r15, Y+5	; 0x05
    1540:	0c 81       	ldd	r16, Y+4	; 0x04
    1542:	1b 81       	ldd	r17, Y+3	; 0x03
    1544:	aa 81       	ldd	r26, Y+2	; 0x02
    1546:	b9 81       	ldd	r27, Y+1	; 0x01
    1548:	ce 0f       	add	r28, r30
    154a:	d1 1d       	adc	r29, r1
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	ed 01       	movw	r28, r26
    1558:	08 95       	ret

0000155a <_exit>:
    155a:	f8 94       	cli

0000155c <__stop_program>:
    155c:	ff cf       	rjmp	.-2      	; 0x155c <__stop_program>
