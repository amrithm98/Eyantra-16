
encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003d8  00800200  000030c8  0000315c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000030c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006c0  008005d8  008005d8  00003534  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003534  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000053b  00000000  00000000  00003554  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002188  00000000  00000000  00003a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000371  00000000  00000000  00005c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000182a  00000000  00000000  00005f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e0  00000000  00000000  000077b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005bc  00000000  00000000  00007b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011a5  00000000  00000000  00008150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000092f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_5>
      18:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <getFinalDest+0x4>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	15 e0       	ldi	r17, 0x05	; 5
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e8 ec       	ldi	r30, 0xC8	; 200
     17e:	f0 e3       	ldi	r31, 0x30	; 48
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 3d       	cpi	r26, 0xD8	; 216
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	1c e0       	ldi	r17, 0x0C	; 12
     192:	a8 ed       	ldi	r26, 0xD8	; 216
     194:	b5 e0       	ldi	r27, 0x05	; 5
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a8 39       	cpi	r26, 0x98	; 152
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 8b 0b 	call	0x1716	; 0x1716 <main>
     1a4:	0c 94 62 18 	jmp	0x30c4	; 0x30c4 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	9e e0       	ldi	r25, 0x0E	; 14
     1b0:	fc 01       	movw	r30, r24
     1b2:	31 97       	sbiw	r30, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_set_4bit+0x6>
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ba:	40 e3       	ldi	r20, 0x30	; 48
     1bc:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	38 e4       	ldi	r19, 0x48	; 72
     1c4:	f9 01       	movw	r30, r18
     1c6:	31 97       	sbiw	r30, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ca:	42 98       	cbi	0x08, 2	; 8
     1cc:	fc 01       	movw	r30, r24
     1ce:	31 97       	sbiw	r30, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1d2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1d4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1d6:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1d8:	42 9a       	sbi	0x08, 2	; 8
     1da:	f9 01       	movw	r30, r18
     1dc:	31 97       	sbiw	r30, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1e0:	42 98       	cbi	0x08, 2	; 8
     1e2:	fc 01       	movw	r30, r24
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1e8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1ea:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ec:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1ee:	42 9a       	sbi	0x08, 2	; 8
     1f0:	f9 01       	movw	r30, r18
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1f6:	42 98       	cbi	0x08, 2	; 8
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1fc:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1fe:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     200:	80 e2       	ldi	r24, 0x20	; 32
     202:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     204:	42 9a       	sbi	0x08, 2	; 8
     206:	c9 01       	movw	r24, r18
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     20c:	42 98       	cbi	0x08, 2	; 8

	
}
     20e:	08 95       	ret

00000210 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     210:	98 b1       	in	r25, 0x08	; 8
     212:	9f 70       	andi	r25, 0x0F	; 15
     214:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     216:	28 b1       	in	r18, 0x08	; 8
     218:	98 2f       	mov	r25, r24
     21a:	90 7f       	andi	r25, 0xF0	; 240
     21c:	92 2b       	or	r25, r18
     21e:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     220:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     222:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     224:	42 9a       	sbi	0x08, 2	; 8
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	38 e4       	ldi	r19, 0x48	; 72
     22a:	f9 01       	movw	r30, r18
     22c:	31 97       	sbiw	r30, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     230:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     232:	98 b1       	in	r25, 0x08	; 8
     234:	9f 70       	andi	r25, 0x0F	; 15
     236:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     238:	98 b1       	in	r25, 0x08	; 8
     23a:	82 95       	swap	r24
     23c:	80 7f       	andi	r24, 0xF0	; 240
     23e:	98 2b       	or	r25, r24
     240:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     242:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     244:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     246:	42 9a       	sbi	0x08, 2	; 8
     248:	c9 01       	movw	r24, r18
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     24e:	42 98       	cbi	0x08, 2	; 8
}
     250:	08 95       	ret

00000252 <lcd_init>:
     252:	86 e6       	ldi	r24, 0x66	; 102
     254:	9e e0       	ldi	r25, 0x0E	; 14
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <lcd_init+0x4>
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     25a:	88 e2       	ldi	r24, 0x28	; 40
     25c:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x01);
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x06);
     266:	86 e0       	ldi	r24, 0x06	; 6
     268:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x0E);
     26c:	8e e0       	ldi	r24, 0x0E	; 14
     26e:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
	lcd_wr_command(0x80);
     272:	80 e8       	ldi	r24, 0x80	; 128
     274:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
		
}
     278:	08 95       	ret

0000027a <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     27a:	98 b1       	in	r25, 0x08	; 8
     27c:	9f 70       	andi	r25, 0x0F	; 15
     27e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     280:	28 b1       	in	r18, 0x08	; 8
     282:	98 2f       	mov	r25, r24
     284:	90 7f       	andi	r25, 0xF0	; 240
     286:	92 2b       	or	r25, r18
     288:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     28a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     28c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     28e:	42 9a       	sbi	0x08, 2	; 8
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	38 e4       	ldi	r19, 0x48	; 72
     294:	f9 01       	movw	r30, r18
     296:	31 97       	sbiw	r30, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     29a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     29c:	98 b1       	in	r25, 0x08	; 8
     29e:	9f 70       	andi	r25, 0x0F	; 15
     2a0:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2a2:	98 b1       	in	r25, 0x08	; 8
     2a4:	82 95       	swap	r24
     2a6:	80 7f       	andi	r24, 0xF0	; 240
     2a8:	98 2b       	or	r25, r24
     2aa:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2ac:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2ae:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2b0:	42 9a       	sbi	0x08, 2	; 8
     2b2:	c9 01       	movw	r24, r18
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     2b8:	42 98       	cbi	0x08, 2	; 8
}
     2ba:	08 95       	ret

000002bc <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     2bc:	80 e8       	ldi	r24, 0x80	; 128
     2be:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
}
     2c2:	08 95       	ret

000002c4 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	ec 01       	movw	r28, r24
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     2cc:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
		str++;
     2d0:	21 96       	adiw	r28, 0x01	; 1


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     2d2:	88 81       	ld	r24, Y
     2d4:	88 23       	and	r24, r24
     2d6:	d1 f7       	brne	.-12     	; 0x2cc <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	69 f0       	breq	.+26     	; 0x2fc <lcd_cursor+0x1e>
     2e2:	83 30       	cpi	r24, 0x03	; 3
     2e4:	18 f4       	brcc	.+6      	; 0x2ec <lcd_cursor+0xe>
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	a9 f4       	brne	.+42     	; 0x314 <lcd_cursor+0x36>
     2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <lcd_cursor+0x18>
     2ec:	83 30       	cpi	r24, 0x03	; 3
     2ee:	49 f0       	breq	.+18     	; 0x302 <lcd_cursor+0x24>
     2f0:	84 30       	cpi	r24, 0x04	; 4
     2f2:	81 f4       	brne	.+32     	; 0x314 <lcd_cursor+0x36>
     2f4:	0b c0       	rjmp	.+22     	; 0x30c <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     2f6:	86 2f       	mov	r24, r22
     2f8:	81 58       	subi	r24, 0x81	; 129
     2fa:	05 c0       	rjmp	.+10     	; 0x306 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     2fc:	86 2f       	mov	r24, r22
     2fe:	81 54       	subi	r24, 0x41	; 65
     300:	02 c0       	rjmp	.+4      	; 0x306 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     302:	86 2f       	mov	r24, r22
     304:	8d 56       	subi	r24, 0x6D	; 109
     306:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
     30a:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     30c:	86 2f       	mov	r24, r22
     30e:	8d 52       	subi	r24, 0x2D	; 45
     310:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
     314:	08 95       	ret

00000316 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	8a 01       	movw	r16, r20
     320:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     322:	88 23       	and	r24, r24
     324:	11 f0       	breq	.+4      	; 0x32a <lcd_print+0x14>
     326:	66 23       	and	r22, r22
     328:	19 f4       	brne	.+6      	; 0x330 <lcd_print+0x1a>
	{
		lcd_home();
     32a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_home>
     32e:	02 c0       	rjmp	.+4      	; 0x334 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     330:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_cursor>
	}
	if(digits==5 || flag==1)
     334:	c5 30       	cpi	r28, 0x05	; 5
     336:	d1 05       	cpc	r29, r1
     338:	71 f4       	brne	.+28     	; 0x356 <lcd_print+0x40>
	{
		million=value/10000+48;
     33a:	c8 01       	movw	r24, r16
     33c:	60 e1       	ldi	r22, 0x10	; 16
     33e:	77 e2       	ldi	r23, 0x27	; 39
     340:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__udivmodhi4>
     344:	cb 01       	movw	r24, r22
     346:	c0 96       	adiw	r24, 0x30	; 48
     348:	90 93 3c 06 	sts	0x063C, r25
     34c:	80 93 3b 06 	sts	0x063B, r24
		lcd_wr_char(million);
     350:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     354:	05 c0       	rjmp	.+10     	; 0x360 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     356:	c4 30       	cpi	r28, 0x04	; 4
     358:	d1 05       	cpc	r29, r1
     35a:	11 f0       	breq	.+4      	; 0x360 <lcd_print+0x4a>
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	16 c0       	rjmp	.+44     	; 0x38c <lcd_print+0x76>
	{
		temp = value/1000;
     360:	c8 01       	movw	r24, r16
     362:	68 ee       	ldi	r22, 0xE8	; 232
     364:	73 e0       	ldi	r23, 0x03	; 3
     366:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__udivmodhi4>
     36a:	cb 01       	movw	r24, r22
     36c:	60 93 b3 08 	sts	0x08B3, r22
     370:	90 93 b4 08 	sts	0x08B4, r25
		thousand = temp%10 + 48;
     374:	6a e0       	ldi	r22, 0x0A	; 10
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__udivmodhi4>
     37c:	c0 96       	adiw	r24, 0x30	; 48
     37e:	90 93 bf 08 	sts	0x08BF, r25
     382:	80 93 be 08 	sts	0x08BE, r24
		lcd_wr_char(thousand);
     386:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     38a:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     38c:	c3 30       	cpi	r28, 0x03	; 3
     38e:	d1 05       	cpc	r29, r1
     390:	21 f0       	breq	.+8      	; 0x39a <lcd_print+0x84>
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	11 f0       	breq	.+4      	; 0x39a <lcd_print+0x84>
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	16 c0       	rjmp	.+44     	; 0x3c6 <lcd_print+0xb0>
	{
		temp = value/100;
     39a:	c8 01       	movw	r24, r16
     39c:	64 e6       	ldi	r22, 0x64	; 100
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__udivmodhi4>
     3a4:	cb 01       	movw	r24, r22
     3a6:	60 93 b3 08 	sts	0x08B3, r22
     3aa:	90 93 b4 08 	sts	0x08B4, r25
		hundred = temp%10 + 48;
     3ae:	6a e0       	ldi	r22, 0x0A	; 10
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__udivmodhi4>
     3b6:	c0 96       	adiw	r24, 0x30	; 48
     3b8:	90 93 bb 08 	sts	0x08BB, r25
     3bc:	80 93 ba 08 	sts	0x08BA, r24
		lcd_wr_char(hundred);
     3c0:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     3c4:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     3c6:	c2 30       	cpi	r28, 0x02	; 2
     3c8:	d1 05       	cpc	r29, r1
     3ca:	21 f0       	breq	.+8      	; 0x3d4 <lcd_print+0xbe>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	11 f0       	breq	.+4      	; 0x3d4 <lcd_print+0xbe>
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	16 c0       	rjmp	.+44     	; 0x400 <lcd_print+0xea>
	{
		temp = value/10;
     3d4:	c8 01       	movw	r24, r16
     3d6:	6a e0       	ldi	r22, 0x0A	; 10
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__udivmodhi4>
     3de:	cb 01       	movw	r24, r22
     3e0:	60 93 b3 08 	sts	0x08B3, r22
     3e4:	90 93 b4 08 	sts	0x08B4, r25
		tens = temp%10 + 48;
     3e8:	6a e0       	ldi	r22, 0x0A	; 10
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__udivmodhi4>
     3f0:	c0 96       	adiw	r24, 0x30	; 48
     3f2:	90 93 b9 08 	sts	0x08B9, r25
     3f6:	80 93 b8 08 	sts	0x08B8, r24
		lcd_wr_char(tens);
     3fa:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
     3fe:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     400:	c1 30       	cpi	r28, 0x01	; 1
     402:	d1 05       	cpc	r29, r1
     404:	11 f0       	breq	.+4      	; 0x40a <lcd_print+0xf4>
     406:	81 30       	cpi	r24, 0x01	; 1
     408:	61 f4       	brne	.+24     	; 0x422 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     40a:	c8 01       	movw	r24, r16
     40c:	6a e0       	ldi	r22, 0x0A	; 10
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__udivmodhi4>
     414:	c0 96       	adiw	r24, 0x30	; 48
     416:	90 93 bd 08 	sts	0x08BD, r25
     41a:	80 93 bc 08 	sts	0x08BC, r24
		lcd_wr_char(unit);
     41e:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
	}
	if(digits>5)
     422:	26 97       	sbiw	r28, 0x06	; 6
     424:	1c f0       	brlt	.+6      	; 0x42c <lcd_print+0x116>
	{
		lcd_wr_char('E');
     426:	85 e4       	ldi	r24, 0x45	; 69
     428:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_wr_char>
	}
	
}
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	08 95       	ret

00000436 <motion_pin_config>:
volatile unsigned long int distanceShaft = 0;

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     436:	81 b1       	in	r24, 0x01	; 1
     438:	8f 60       	ori	r24, 0x0F	; 15
     43a:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     43c:	82 b1       	in	r24, 0x02	; 2
     43e:	80 7f       	andi	r24, 0xF0	; 240
     440:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     442:	ea e0       	ldi	r30, 0x0A	; 10
     444:	f1 e0       	ldi	r31, 0x01	; 1
     446:	80 81       	ld	r24, Z
     448:	88 61       	ori	r24, 0x18	; 24
     44a:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     44c:	eb e0       	ldi	r30, 0x0B	; 11
     44e:	f1 e0       	ldi	r31, 0x01	; 1
     450:	80 81       	ld	r24, Z
     452:	88 61       	ori	r24, 0x18	; 24
     454:	80 83       	st	Z, r24
}
     456:	08 95       	ret

00000458 <buzzer_on>:
void buzzer_on(void)
{
	
	PORTC= 0x08;   // pin 3 to high 0000 1000
     458:	88 e0       	ldi	r24, 0x08	; 8
     45a:	88 b9       	out	0x08, r24	; 8
}
     45c:	08 95       	ret

0000045e <buzzer_pin_config>:

void buzzer_pin_config(void)
{
	DDRC=DDRC | 0x08; // pin 3 as op
     45e:	3b 9a       	sbi	0x07, 3	; 7
	PORTC=PORTC & 0xF7;
     460:	43 98       	cbi	0x08, 3	; 8

}
     462:	08 95       	ret

00000464 <buzzer_off>:
void buzzer_off(void)
{
	PORTC= 0x00;
     464:	18 b8       	out	0x08, r1	; 8
}
     466:	08 95       	ret

00000468 <init_timer5>:
void init_timer5(void)	//Timer For PWM
{
	TCCR5B = 0x00;	//stop
     468:	a1 e2       	ldi	r26, 0x21	; 33
     46a:	b1 e0       	ldi	r27, 0x01	; 1
     46c:	1c 92       	st	X, r1
	TCNT5H = 0xFF;	//counter higher 8 bit value to which OCRxH is compared with
     46e:	2f ef       	ldi	r18, 0xFF	; 255
     470:	20 93 25 01 	sts	0x0125, r18
	TCNT5L = 0x01;	//counter higher 8 bit value to which OCRxH is compared with
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high for left motor
     47a:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low for left motor
     47e:	20 93 28 01 	sts	0x0128, r18
	OCR5BH = 0x00;	//Output compare register high for right motor	
     482:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register high for right motor
     486:	20 93 2a 01 	sts	0x012A, r18
	OCR5C  = 0xFF;	//Motor C1
     48a:	ec e2       	ldi	r30, 0x2C	; 44
     48c:	f1 e0       	ldi	r31, 0x01	; 1
     48e:	8f ef       	ldi	r24, 0xFF	; 255
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	91 83       	std	Z+1, r25	; 0x01
     494:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Motor C1
     496:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;
     49a:	20 83       	st	Z, r18
	TCCR5A = 0xA9;
     49c:	89 ea       	ldi	r24, 0xA9	; 169
     49e:	80 93 20 01 	sts	0x0120, r24
/* COM5A1=1,COM5A0=0,COM5B1=1,COM5B0=0,COM5C1=1,COM5C0=0
For Overriding normal port functionality to OCRnA ouputs
WGM51=0,WGM50=1 along with WGM52 in TCCRB for selecting fast PWM 8 bit mode
*/

	TCCR5B = 0x0B;	//WGM12=1,CS12=0,CS11=1,CS10=1	(Prescaler=64)
     4a2:	8b e0       	ldi	r24, 0x0B	; 11
     4a4:	8c 93       	st	X, r24

}
     4a6:	08 95       	ret

000004a8 <lcd_port_config>:
	return distanceInt;
}

void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     4a8:	87 b1       	in	r24, 0x07	; 7
     4aa:	87 6f       	ori	r24, 0xF7	; 247
     4ac:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     4ae:	88 b1       	in	r24, 0x08	; 8
     4b0:	80 78       	andi	r24, 0x80	; 128
     4b2:	88 b9       	out	0x08, r24	; 8
}
     4b4:	08 95       	ret

000004b6 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     4b6:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     4b8:	74 9a       	sbi	0x0e, 4	; 14
}
     4ba:	08 95       	ret

000004bc <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     4bc:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     4be:	75 9a       	sbi	0x0e, 5	; 14
}
     4c0:	08 95       	ret

000004c2 <left_position_encoder_interrupt_init>:

//Function to initialize ports
void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     4c2:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     4c4:	ea e6       	ldi	r30, 0x6A	; 106
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 81       	ld	r24, Z
     4ca:	82 60       	ori	r24, 0x02	; 2
     4cc:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     4ce:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     4d0:	78 94       	sei
}
     4d2:	08 95       	ret

000004d4 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     4d4:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     4d6:	ea e6       	ldi	r30, 0x6A	; 106
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	80 81       	ld	r24, Z
     4dc:	88 60       	ori	r24, 0x08	; 8
     4de:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     4e0:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     4e2:	78 94       	sei
}
     4e4:	08 95       	ret

000004e6 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
     4e6:	1f 92       	push	r1
     4e8:	0f 92       	push	r0
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	0f 92       	push	r0
     4ee:	11 24       	eor	r1, r1
     4f0:	8f 93       	push	r24
     4f2:	9f 93       	push	r25
     4f4:	af 93       	push	r26
     4f6:	bf 93       	push	r27
 distanceShaft++;
     4f8:	80 91 e3 05 	lds	r24, 0x05E3
     4fc:	90 91 e4 05 	lds	r25, 0x05E4
     500:	a0 91 e5 05 	lds	r26, 0x05E5
     504:	b0 91 e6 05 	lds	r27, 0x05E6
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	a1 1d       	adc	r26, r1
     50c:	b1 1d       	adc	r27, r1
     50e:	80 93 e3 05 	sts	0x05E3, r24
     512:	90 93 e4 05 	sts	0x05E4, r25
     516:	a0 93 e5 05 	sts	0x05E5, r26
     51a:	b0 93 e6 05 	sts	0x05E6, r27
 ShaftCountRight++;  //increment right shaft position count
     51e:	80 91 df 05 	lds	r24, 0x05DF
     522:	90 91 e0 05 	lds	r25, 0x05E0
     526:	a0 91 e1 05 	lds	r26, 0x05E1
     52a:	b0 91 e2 05 	lds	r27, 0x05E2
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	a1 1d       	adc	r26, r1
     532:	b1 1d       	adc	r27, r1
     534:	80 93 df 05 	sts	0x05DF, r24
     538:	90 93 e0 05 	sts	0x05E0, r25
     53c:	a0 93 e1 05 	sts	0x05E1, r26
     540:	b0 93 e2 05 	sts	0x05E2, r27
}
     544:	bf 91       	pop	r27
     546:	af 91       	pop	r26
     548:	9f 91       	pop	r25
     54a:	8f 91       	pop	r24
     54c:	0f 90       	pop	r0
     54e:	0f be       	out	0x3f, r0	; 63
     550:	0f 90       	pop	r0
     552:	1f 90       	pop	r1
     554:	18 95       	reti

00000556 <__vector_5>:
//ISR for left position encoder
ISR(INT4_vect)
{
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	8f 93       	push	r24
     562:	9f 93       	push	r25
     564:	af 93       	push	r26
     566:	bf 93       	push	r27
 distanceShaft++;
     568:	80 91 e3 05 	lds	r24, 0x05E3
     56c:	90 91 e4 05 	lds	r25, 0x05E4
     570:	a0 91 e5 05 	lds	r26, 0x05E5
     574:	b0 91 e6 05 	lds	r27, 0x05E6
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	a1 1d       	adc	r26, r1
     57c:	b1 1d       	adc	r27, r1
     57e:	80 93 e3 05 	sts	0x05E3, r24
     582:	90 93 e4 05 	sts	0x05E4, r25
     586:	a0 93 e5 05 	sts	0x05E5, r26
     58a:	b0 93 e6 05 	sts	0x05E6, r27
 ShaftCountLeft++;  //increment left shaft position count
     58e:	80 91 db 05 	lds	r24, 0x05DB
     592:	90 91 dc 05 	lds	r25, 0x05DC
     596:	a0 91 dd 05 	lds	r26, 0x05DD
     59a:	b0 91 de 05 	lds	r27, 0x05DE
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	a1 1d       	adc	r26, r1
     5a2:	b1 1d       	adc	r27, r1
     5a4:	80 93 db 05 	sts	0x05DB, r24
     5a8:	90 93 dc 05 	sts	0x05DC, r25
     5ac:	a0 93 dd 05 	sts	0x05DD, r26
     5b0:	b0 93 de 05 	sts	0x05DE, r27
}
     5b4:	bf 91       	pop	r27
     5b6:	af 91       	pop	r26
     5b8:	9f 91       	pop	r25
     5ba:	8f 91       	pop	r24
     5bc:	0f 90       	pop	r0
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	0f 90       	pop	r0
     5c2:	1f 90       	pop	r1
     5c4:	18 95       	reti

000005c6 <motion_set>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     5c6:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     5c8:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     5ca:	8f 70       	andi	r24, 0x0F	; 15
     5cc:	89 2b       	or	r24, r25
 PORTA = PortARestore; 		// executing the command
     5ce:	82 b9       	out	0x02, r24	; 2
}
     5d0:	08 95       	ret

000005d2 <forward>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     5d2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     5d4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     5d6:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     5d8:	82 b9       	out	0x02, r24	; 2
}

void forward (void) //both wheels forward
{
  motion_set(0x06);
}
     5da:	08 95       	ret

000005dc <back>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     5dc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     5de:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     5e0:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     5e2:	82 b9       	out	0x02, r24	; 2
}

void back (void) //both wheels backward
{
  motion_set(0x09);
}
     5e4:	08 95       	ret

000005e6 <left>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     5e6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     5e8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     5ea:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     5ec:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     5ee:	08 95       	ret

000005f0 <right>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     5f0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     5f2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     5f4:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     5f6:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     5f8:	08 95       	ret

000005fa <soft_left>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     5fa:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     5fc:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     5fe:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     600:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     602:	08 95       	ret

00000604 <soft_right>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     604:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     606:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     608:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     60a:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     60c:	08 95       	ret

0000060e <soft_left_2>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     60e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     610:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     612:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     614:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     616:	08 95       	ret

00000618 <soft_right_2>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     618:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     61a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     61c:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     61e:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     620:	08 95       	ret

00000622 <stop>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     622:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     624:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     626:	82 b9       	out	0x02, r24	; 2
}

void stop (void)
{
  motion_set(0x00);
}
     628:	08 95       	ret

0000062a <angle_rotate>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     62a:	ef 92       	push	r14
     62c:	ff 92       	push	r15
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;
 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     632:	a0 e0       	ldi	r26, 0x00	; 0
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	bc 01       	movw	r22, r24
     638:	cd 01       	movw	r24, r26
     63a:	0e 94 1f 13 	call	0x263e	; 0x263e <__floatunsisf>
     63e:	28 e4       	ldi	r18, 0x48	; 72
     640:	31 ee       	ldi	r19, 0xE1	; 225
     642:	42 e8       	ldi	r20, 0x82	; 130
     644:	50 e4       	ldi	r21, 0x40	; 64
     646:	0e 94 91 11 	call	0x2322	; 0x2322 <__divsf3>
     64a:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__fixunssfsi>
     64e:	7b 01       	movw	r14, r22
     650:	8c 01       	movw	r16, r24
 ShaftCountRight = 0; 
     652:	10 92 df 05 	sts	0x05DF, r1
     656:	10 92 e0 05 	sts	0x05E0, r1
     65a:	10 92 e1 05 	sts	0x05E1, r1
     65e:	10 92 e2 05 	sts	0x05E2, r1
 ShaftCountLeft = 0; 
     662:	10 92 db 05 	sts	0x05DB, r1
     666:	10 92 dc 05 	sts	0x05DC, r1
     66a:	10 92 dd 05 	sts	0x05DD, r1
     66e:	10 92 de 05 	sts	0x05DE, r1
 while (1)
 {
  //lcd_print(2,8,ShaftCountLeft,2);
  //lcd_print(2,5,ShaftCountRight,2);
  //lcd_print(2,1,ReqdShaftCountInt,3);
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     672:	80 91 df 05 	lds	r24, 0x05DF
     676:	90 91 e0 05 	lds	r25, 0x05E0
     67a:	a0 91 e1 05 	lds	r26, 0x05E1
     67e:	b0 91 e2 05 	lds	r27, 0x05E2
     682:	20 91 db 05 	lds	r18, 0x05DB
     686:	30 91 dc 05 	lds	r19, 0x05DC
     68a:	40 91 dd 05 	lds	r20, 0x05DD
     68e:	50 91 de 05 	lds	r21, 0x05DE
     692:	8e 15       	cp	r24, r14
     694:	9f 05       	cpc	r25, r15
     696:	a0 07       	cpc	r26, r16
     698:	b1 07       	cpc	r27, r17
     69a:	28 f4       	brcc	.+10     	; 0x6a6 <angle_rotate+0x7c>
     69c:	2e 15       	cp	r18, r14
     69e:	3f 05       	cpc	r19, r15
     6a0:	40 07       	cpc	r20, r16
     6a2:	51 07       	cpc	r21, r17
     6a4:	30 f3       	brcs	.-52     	; 0x672 <angle_rotate+0x48>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6a6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6a8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     6aa:	82 b9       	out	0x02, r24	; 2
  //lcd_print(2,1,ReqdShaftCountInt,3);
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
  			break;
 }
 stop(); //Stop robot
}
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	08 95       	ret

000006b6 <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount =(float) DistanceInMM / 5.338; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     6be:	a0 e0       	ldi	r26, 0x00	; 0
     6c0:	b0 e0       	ldi	r27, 0x00	; 0
     6c2:	bc 01       	movw	r22, r24
     6c4:	cd 01       	movw	r24, r26
     6c6:	0e 94 1f 13 	call	0x263e	; 0x263e <__floatunsisf>
     6ca:	25 ee       	ldi	r18, 0xE5	; 229
     6cc:	30 ed       	ldi	r19, 0xD0	; 208
     6ce:	4a ea       	ldi	r20, 0xAA	; 170
     6d0:	50 e4       	ldi	r21, 0x40	; 64
     6d2:	0e 94 91 11 	call	0x2322	; 0x2322 <__divsf3>
     6d6:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__fixunssfsi>
     6da:	7b 01       	movw	r14, r22
     6dc:	8c 01       	movw	r16, r24
 ShaftCountLeft = ShaftCountRight = 0;
     6de:	10 92 df 05 	sts	0x05DF, r1
     6e2:	10 92 e0 05 	sts	0x05E0, r1
     6e6:	10 92 e1 05 	sts	0x05E1, r1
     6ea:	10 92 e2 05 	sts	0x05E2, r1
     6ee:	80 91 df 05 	lds	r24, 0x05DF
     6f2:	90 91 e0 05 	lds	r25, 0x05E0
     6f6:	a0 91 e1 05 	lds	r26, 0x05E1
     6fa:	b0 91 e2 05 	lds	r27, 0x05E2
     6fe:	80 93 db 05 	sts	0x05DB, r24
     702:	90 93 dc 05 	sts	0x05DC, r25
     706:	a0 93 dd 05 	sts	0x05DD, r26
     70a:	b0 93 de 05 	sts	0x05DE, r27
 while(1)
 {
  //lcd_print(2,1,ShaftCountLeft,2);
  //lcd_print(2,1,ShaftCountRight,5);
  //lcd_print(2,7,ReqdShaftCountInt,5);
  if((ShaftCountLeft > ReqdShaftCountInt) | (ShaftCountRight > ReqdShaftCountInt))
     70e:	80 91 db 05 	lds	r24, 0x05DB
     712:	90 91 dc 05 	lds	r25, 0x05DC
     716:	a0 91 dd 05 	lds	r26, 0x05DD
     71a:	b0 91 de 05 	lds	r27, 0x05DE
     71e:	20 91 df 05 	lds	r18, 0x05DF
     722:	30 91 e0 05 	lds	r19, 0x05E0
     726:	40 91 e1 05 	lds	r20, 0x05E1
     72a:	50 91 e2 05 	lds	r21, 0x05E2
     72e:	e8 16       	cp	r14, r24
     730:	f9 06       	cpc	r15, r25
     732:	0a 07       	cpc	r16, r26
     734:	1b 07       	cpc	r17, r27
     736:	28 f0       	brcs	.+10     	; 0x742 <linear_distance_mm+0x8c>
     738:	e2 16       	cp	r14, r18
     73a:	f3 06       	cpc	r15, r19
     73c:	04 07       	cpc	r16, r20
     73e:	15 07       	cpc	r17, r21
     740:	30 f7       	brcc	.-52     	; 0x70e <linear_distance_mm+0x58>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     742:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     744:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     746:	82 b9       	out	0x02, r24	; 2
  {
  	break;
  }
 } 
 stop(); //Stop robot
}
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	08 95       	ret

00000752 <forward_mm>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     752:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     754:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     756:	26 60       	ori	r18, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     758:	22 b9       	out	0x02, r18	; 2
}

void forward_mm(unsigned int DistanceInMM)
{
 forward();
 linear_distance_mm(DistanceInMM);
     75a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <linear_distance_mm>
}
     75e:	08 95       	ret

00000760 <back_mm>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     760:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     762:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     764:	29 60       	ori	r18, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     766:	22 b9       	out	0x02, r18	; 2
}

void back_mm(unsigned int DistanceInMM)
{
 back();
 linear_distance_mm(DistanceInMM);
     768:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <linear_distance_mm>
}
     76c:	08 95       	ret

0000076e <left_degrees>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     76e:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     770:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     772:	25 60       	ori	r18, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     774:	22 b9       	out	0x02, r18	; 2

void left_degrees(unsigned int Degrees) 
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
 angle_rotate(Degrees);
     776:	0e 94 15 03 	call	0x62a	; 0x62a <angle_rotate>
}
     77a:	08 95       	ret

0000077c <right_degrees>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     77c:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     77e:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     780:	2a 60       	ori	r18, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     782:	22 b9       	out	0x02, r18	; 2

void right_degrees(unsigned int Degrees)
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
 angle_rotate(Degrees);
     784:	0e 94 15 03 	call	0x62a	; 0x62a <angle_rotate>
}
     788:	08 95       	ret

0000078a <soft_left_degrees>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     78a:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     78c:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     78e:	24 60       	ori	r18, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     790:	22 b9       	out	0x02, r18	; 2
void soft_left_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	0e 94 15 03 	call	0x62a	; 0x62a <angle_rotate>
}
     79a:	08 95       	ret

0000079c <soft_right_degrees>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     79c:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     79e:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7a0:	22 60       	ori	r18, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     7a2:	22 b9       	out	0x02, r18	; 2
void soft_right_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	0e 94 15 03 	call	0x62a	; 0x62a <angle_rotate>
}
     7ac:	08 95       	ret

000007ae <soft_left_2_degrees>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7ae:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7b0:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7b2:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     7b4:	22 b9       	out	0x02, r18	; 2
void soft_left_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left_2(); //Turn reverse soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	0e 94 15 03 	call	0x62a	; 0x62a <angle_rotate>
}
     7be:	08 95       	ret

000007c0 <soft_right_2_degrees>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7c0:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7c2:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7c4:	28 60       	ori	r18, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     7c6:	22 b9       	out	0x02, r18	; 2
void soft_right_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right_2();  //Turn reverse soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	0e 94 15 03 	call	0x62a	; 0x62a <angle_rotate>
}
     7d0:	08 95       	ret

000007d2 <adc_pin_config>:
void adc_pin_config(void)
{
	DDRF=0x00;
     7d2:	10 ba       	out	0x10, r1	; 16
	PORTF=0x00;
     7d4:	11 ba       	out	0x11, r1	; 17
	DDRK=0x00;
     7d6:	10 92 07 01 	sts	0x0107, r1
	PORTK=0x00;
     7da:	10 92 08 01 	sts	0x0108, r1
}
     7de:	08 95       	ret

000007e0 <adc_init>:

void adc_init(void)
{
	ADCSRA=0x00;
     7e0:	ea e7       	ldi	r30, 0x7A	; 122
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	10 82       	st	Z, r1
	ADCSRB=0x00;
     7e6:	10 92 7b 00 	sts	0x007B, r1
	ADMUX=0x00;
     7ea:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA=0x86;	//ADEN=1 ADIE=1....
     7ee:	86 e8       	ldi	r24, 0x86	; 134
     7f0:	80 83       	st	Z, r24
	ACSR=0x80;
     7f2:	80 e8       	ldi	r24, 0x80	; 128
     7f4:	80 bf       	out	0x30, r24	; 48
}
     7f6:	08 95       	ret

000007f8 <velocity>:
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	//lcd_print(2,1,left,3);
	//lcd_print(2,5,right,3);
	OCR5AL = (unsigned char) left;
     7f8:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char) right;
     7fc:	60 93 2a 01 	sts	0x012A, r22
}
     800:	08 95       	ret

00000802 <port_init>:
volatile unsigned long int distanceShaft = 0;

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     802:	81 b1       	in	r24, 0x01	; 1
     804:	8f 60       	ori	r24, 0x0F	; 15
     806:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     808:	82 b1       	in	r24, 0x02	; 2
     80a:	80 7f       	andi	r24, 0xF0	; 240
     80c:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     80e:	ea e0       	ldi	r30, 0x0A	; 10
     810:	f1 e0       	ldi	r31, 0x01	; 1
     812:	80 81       	ld	r24, Z
     814:	88 61       	ori	r24, 0x18	; 24
     816:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     818:	eb e0       	ldi	r30, 0x0B	; 11
     81a:	f1 e0       	ldi	r31, 0x01	; 1
     81c:	80 81       	ld	r24, Z
     81e:	88 61       	ori	r24, 0x18	; 24
     820:	80 83       	st	Z, r24
}

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     822:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     824:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     826:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     828:	75 9a       	sbi	0x0e, 5	; 14
	PORTC= 0x08;   // pin 3 to high 0000 1000
}

void buzzer_pin_config(void)
{
	DDRC=DDRC | 0x08; // pin 3 as op
     82a:	3b 9a       	sbi	0x07, 3	; 7
	PORTC=PORTC & 0xF7;
     82c:	43 98       	cbi	0x08, 3	; 8
{
 motion_pin_config(); //robot motion pins config
 left_encoder_pin_config(); //left encoder pin config
 right_encoder_pin_config(); //right encoder pin config	
 buzzer_pin_config();//Buzzer Pin
}
     82e:	08 95       	ret

00000830 <init_devices>:
void init_devices()
{
 cli(); //Clears the global interrupt
     830:	f8 94       	cli
 port_init();  //Initializes all the ports
     832:	0e 94 01 04 	call	0x802	; 0x802 <port_init>
	return distanceInt;
}

void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     836:	87 b1       	in	r24, 0x07	; 7
     838:	87 6f       	ori	r24, 0xF7	; 247
     83a:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     83c:	88 b1       	in	r24, 0x08	; 8
     83e:	80 78       	andi	r24, 0x80	; 128
     840:	88 b9       	out	0x08, r24	; 8
 Degrees=Degrees*2;
 angle_rotate(Degrees);
}
void adc_pin_config(void)
{
	DDRF=0x00;
     842:	10 ba       	out	0x10, r1	; 16
	PORTF=0x00;
     844:	11 ba       	out	0x11, r1	; 17
	DDRK=0x00;
     846:	10 92 07 01 	sts	0x0107, r1
	PORTK=0x00;
     84a:	10 92 08 01 	sts	0x0108, r1
{
	PORTC= 0x00;
}
void init_timer5(void)	//Timer For PWM
{
	TCCR5B = 0x00;	//stop
     84e:	a1 e2       	ldi	r26, 0x21	; 33
     850:	b1 e0       	ldi	r27, 0x01	; 1
     852:	1c 92       	st	X, r1
	TCNT5H = 0xFF;	//counter higher 8 bit value to which OCRxH is compared with
     854:	2f ef       	ldi	r18, 0xFF	; 255
     856:	20 93 25 01 	sts	0x0125, r18
	TCNT5L = 0x01;	//counter higher 8 bit value to which OCRxH is compared with
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high for left motor
     860:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low for left motor
     864:	20 93 28 01 	sts	0x0128, r18
	OCR5BH = 0x00;	//Output compare register high for right motor	
     868:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register high for right motor
     86c:	20 93 2a 01 	sts	0x012A, r18
	OCR5C  = 0xFF;	//Motor C1
     870:	ec e2       	ldi	r30, 0x2C	; 44
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	8f ef       	ldi	r24, 0xFF	; 255
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	91 83       	std	Z+1, r25	; 0x01
     87a:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Motor C1
     87c:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;
     880:	20 83       	st	Z, r18
	TCCR5A = 0xA9;
     882:	89 ea       	ldi	r24, 0xA9	; 169
     884:	80 93 20 01 	sts	0x0120, r24
/* COM5A1=1,COM5A0=0,COM5B1=1,COM5B0=0,COM5C1=1,COM5C0=0
For Overriding normal port functionality to OCRnA ouputs
WGM51=0,WGM50=1 along with WGM52 in TCCRB for selecting fast PWM 8 bit mode
*/

	TCCR5B = 0x0B;	//WGM12=1,CS12=0,CS11=1,CS10=1	(Prescaler=64)
     888:	8b e0       	ldi	r24, 0x0B	; 11
     88a:	8c 93       	st	X, r24
}

//Function to initialize ports
void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     88c:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     88e:	ea e6       	ldi	r30, 0x6A	; 106
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	82 60       	ori	r24, 0x02	; 2
     896:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     898:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     89a:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     89c:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     89e:	ea e6       	ldi	r30, 0x6A	; 106
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	88 60       	ori	r24, 0x08	; 8
     8a6:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     8a8:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     8aa:	78 94       	sei
	PORTK=0x00;
}

void adc_init(void)
{
	ADCSRA=0x00;
     8ac:	ea e7       	ldi	r30, 0x7A	; 122
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	10 82       	st	Z, r1
	ADCSRB=0x00;
     8b2:	10 92 7b 00 	sts	0x007B, r1
	ADMUX=0x00;
     8b6:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA=0x86;	//ADEN=1 ADIE=1....
     8ba:	86 e8       	ldi	r24, 0x86	; 134
     8bc:	80 83       	st	Z, r24
	ACSR=0x80;
     8be:	80 e8       	ldi	r24, 0x80	; 128
     8c0:	80 bf       	out	0x30, r24	; 48
 adc_pin_config();
 init_timer5();
 left_position_encoder_interrupt_init();
 right_position_encoder_interrupt_init();
 adc_init();
 sei();   // Enables the global interrupt 
     8c2:	78 94       	sei
}
     8c4:	08 95       	ret

000008c6 <ADC_Conversion>:

unsigned char ADC_Conversion(unsigned char ch)
{
     8c6:	98 2f       	mov	r25, r24
	unsigned char a;
	if(ch>7)
     8c8:	88 30       	cpi	r24, 0x08	; 8
     8ca:	18 f0       	brcs	.+6      	; 0x8d2 <ADC_Conversion+0xc>
	{
		ADCSRB=0x08;
     8cc:	88 e0       	ldi	r24, 0x08	; 8
     8ce:	80 93 7b 00 	sts	0x007B, r24
	}
	ch=ch & 0x07;
	ADMUX=0x20 | ch;
     8d2:	97 70       	andi	r25, 0x07	; 7
     8d4:	90 62       	ori	r25, 0x20	; 32
     8d6:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA =ADCSRA | 0x40;		//set start conv bit
     8da:	80 91 7a 00 	lds	r24, 0x007A
     8de:	80 64       	ori	r24, 0x40	; 64
     8e0:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA & 0x10)==0);	//wait for adc conv to complete
     8e4:	80 91 7a 00 	lds	r24, 0x007A
     8e8:	84 ff       	sbrs	r24, 4
     8ea:	fc cf       	rjmp	.-8      	; 0x8e4 <ADC_Conversion+0x1e>
	a=ADCH;						//Result stored here after convo
     8ec:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA=ADCSRA | 0x10;		//Clear ADIF by setting it to 1
     8f0:	90 91 7a 00 	lds	r25, 0x007A
     8f4:	90 61       	ori	r25, 0x10	; 16
     8f6:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB=0x00;
     8fa:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     8fe:	08 95       	ret

00000900 <print_sensor>:

void print_sensor(char row,char col,unsigned char channel)
{
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	18 2f       	mov	r17, r24
     906:	06 2f       	mov	r16, r22
     908:	84 2f       	mov	r24, r20
	ADC_Value=ADC_Conversion(channel);
     90a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <ADC_Conversion>
     90e:	48 2f       	mov	r20, r24
     910:	80 93 b5 08 	sts	0x08B5, r24
	lcd_print(row,col,ADC_Value,3);
     914:	81 2f       	mov	r24, r17
     916:	60 2f       	mov	r22, r16
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	23 e0       	ldi	r18, 0x03	; 3
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
}
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	08 95       	ret

00000928 <addToArr>:
struct edge { int obstacle, angle, endA, endB, distance; };
struct vertice { int n, x, y, edgeCount, edgePoints[6]; };
struct vertice verticeList[49];
struct edge edgeList[63];

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
     928:	cf 92       	push	r12
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	fc 01       	movw	r30, r24
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     936:	71 83       	std	Z+1, r23	; 0x01
     938:	60 83       	st	Z, r22
     93a:	53 83       	std	Z+3, r21	; 0x03
     93c:	42 83       	std	Z+2, r20	; 0x02
     93e:	35 83       	std	Z+5, r19	; 0x05
     940:	24 83       	std	Z+4, r18	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     942:	17 83       	std	Z+7, r17	; 0x07
     944:	06 83       	std	Z+6, r16	; 0x06
     946:	f1 86       	std	Z+9, r15	; 0x09
     948:	e0 86       	std	Z+8, r14	; 0x08
     94a:	d3 86       	std	Z+11, r13	; 0x0b
     94c:	c2 86       	std	Z+10, r12	; 0x0a
}
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	08 95       	ret

0000095c <getFinalDest>:

int getFinalDest(int dest, int finalDest[]) {
     95c:	9c 01       	movw	r18, r24
     95e:	fb 01       	movw	r30, r22
	if (dest < 25) {
     960:	89 31       	cpi	r24, 0x19	; 25
     962:	91 05       	cpc	r25, r1
     964:	2c f4       	brge	.+10     	; 0x970 <getFinalDest+0x14>
		finalDest[0] = dest;
     966:	91 83       	std	Z+1, r25	; 0x01
     968:	80 83       	st	Z, r24
     96a:	21 e0       	ldi	r18, 0x01	; 1
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	d1 c0       	rjmp	.+418    	; 0xb12 <getFinalDest+0x1b6>
		return 1;
	} else {
		switch(dest) {
     970:	8d 31       	cpi	r24, 0x1D	; 29
     972:	91 05       	cpc	r25, r1
     974:	09 f4       	brne	.+2      	; 0x978 <getFinalDest+0x1c>
     976:	67 c0       	rjmp	.+206    	; 0xa46 <getFinalDest+0xea>
     978:	8e 31       	cpi	r24, 0x1E	; 30
     97a:	91 05       	cpc	r25, r1
     97c:	8c f4       	brge	.+34     	; 0x9a0 <getFinalDest+0x44>
     97e:	8a 31       	cpi	r24, 0x1A	; 26
     980:	91 05       	cpc	r25, r1
     982:	71 f1       	breq	.+92     	; 0x9e0 <getFinalDest+0x84>
     984:	8b 31       	cpi	r24, 0x1B	; 27
     986:	91 05       	cpc	r25, r1
     988:	24 f4       	brge	.+8      	; 0x992 <getFinalDest+0x36>
     98a:	89 31       	cpi	r24, 0x19	; 25
     98c:	91 05       	cpc	r25, r1
     98e:	c1 f4       	brne	.+48     	; 0x9c0 <getFinalDest+0x64>
     990:	1a c0       	rjmp	.+52     	; 0x9c6 <getFinalDest+0x6a>
     992:	8b 31       	cpi	r24, 0x1B	; 27
     994:	91 05       	cpc	r25, r1
     996:	c9 f1       	breq	.+114    	; 0xa0a <getFinalDest+0xae>
     998:	8c 31       	cpi	r24, 0x1C	; 28
     99a:	91 05       	cpc	r25, r1
     99c:	89 f4       	brne	.+34     	; 0x9c0 <getFinalDest+0x64>
     99e:	44 c0       	rjmp	.+136    	; 0xa28 <getFinalDest+0xcc>
     9a0:	8f 31       	cpi	r24, 0x1F	; 31
     9a2:	91 05       	cpc	r25, r1
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <getFinalDest+0x4c>
     9a6:	75 c0       	rjmp	.+234    	; 0xa92 <getFinalDest+0x136>
     9a8:	8f 31       	cpi	r24, 0x1F	; 31
     9aa:	91 05       	cpc	r25, r1
     9ac:	0c f4       	brge	.+2      	; 0x9b0 <getFinalDest+0x54>
     9ae:	62 c0       	rjmp	.+196    	; 0xa74 <getFinalDest+0x118>
     9b0:	80 32       	cpi	r24, 0x20	; 32
     9b2:	91 05       	cpc	r25, r1
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <getFinalDest+0x5c>
     9b6:	7c c0       	rjmp	.+248    	; 0xab0 <getFinalDest+0x154>
     9b8:	81 32       	cpi	r24, 0x21	; 33
     9ba:	91 05       	cpc	r25, r1
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <getFinalDest+0x64>
     9be:	93 c0       	rjmp	.+294    	; 0xae6 <getFinalDest+0x18a>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	a6 c0       	rjmp	.+332    	; 0xb12 <getFinalDest+0x1b6>
struct vertice { int n, x, y, edgeCount, edgePoints[6]; };
struct vertice verticeList[49];
struct edge edgeList[63];

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	91 83       	std	Z+1, r25	; 0x01
     9cc:	80 83       	st	Z, r24
     9ce:	33 83       	std	Z+3, r19	; 0x03
     9d0:	22 83       	std	Z+2, r18	; 0x02
     9d2:	8a e1       	ldi	r24, 0x1A	; 26
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	95 83       	std	Z+5, r25	; 0x05
     9d8:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     9da:	8b e1       	ldi	r24, 0x1B	; 27
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	91 c0       	rjmp	.+290    	; 0xb02 <getFinalDest+0x1a6>
struct vertice { int n, x, y, edgeCount, edgePoints[6]; };
struct vertice verticeList[49];
struct edge edgeList[63];

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     9e0:	89 e1       	ldi	r24, 0x19	; 25
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	91 83       	std	Z+1, r25	; 0x01
     9e6:	80 83       	st	Z, r24
     9e8:	33 83       	std	Z+3, r19	; 0x03
     9ea:	22 83       	std	Z+2, r18	; 0x02
     9ec:	8c e1       	ldi	r24, 0x1C	; 28
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	95 83       	std	Z+5, r25	; 0x05
     9f2:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     9f4:	8d e1       	ldi	r24, 0x1D	; 29
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	97 83       	std	Z+7, r25	; 0x07
     9fa:	86 83       	std	Z+6, r24	; 0x06
     9fc:	8e e1       	ldi	r24, 0x1E	; 30
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	91 87       	std	Z+9, r25	; 0x09
     a02:	80 87       	std	Z+8, r24	; 0x08
     a04:	8f e1       	ldi	r24, 0x1F	; 31
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	69 c0       	rjmp	.+210    	; 0xadc <getFinalDest+0x180>
struct vertice { int n, x, y, edgeCount, edgePoints[6]; };
struct vertice verticeList[49];
struct edge edgeList[63];

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     a0a:	85 e0       	ldi	r24, 0x05	; 5
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	91 83       	std	Z+1, r25	; 0x01
     a10:	80 83       	st	Z, r24
     a12:	8c e1       	ldi	r24, 0x1C	; 28
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	93 83       	std	Z+3, r25	; 0x03
     a18:	82 83       	std	Z+2, r24	; 0x02
     a1a:	8d e1       	ldi	r24, 0x1D	; 29
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	95 83       	std	Z+5, r25	; 0x05
     a20:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     a22:	80 e2       	ldi	r24, 0x20	; 32
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	6d c0       	rjmp	.+218    	; 0xb02 <getFinalDest+0x1a6>
struct vertice { int n, x, y, edgeCount, edgePoints[6]; };
struct vertice verticeList[49];
struct edge edgeList[63];

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     a28:	89 e0       	ldi	r24, 0x09	; 9
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	91 83       	std	Z+1, r25	; 0x01
     a2e:	80 83       	st	Z, r24
     a30:	81 e2       	ldi	r24, 0x21	; 33
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	93 83       	std	Z+3, r25	; 0x03
     a36:	82 83       	std	Z+2, r24	; 0x02
     a38:	82 e2       	ldi	r24, 0x22	; 34
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	95 83       	std	Z+5, r25	; 0x05
     a3e:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     a40:	83 e2       	ldi	r24, 0x23	; 35
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	5e c0       	rjmp	.+188    	; 0xb02 <getFinalDest+0x1a6>
struct vertice { int n, x, y, edgeCount, edgePoints[6]; };
struct vertice verticeList[49];
struct edge edgeList[63];

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     a46:	81 e2       	ldi	r24, 0x21	; 33
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	91 83       	std	Z+1, r25	; 0x01
     a4c:	80 83       	st	Z, r24
     a4e:	82 e2       	ldi	r24, 0x22	; 34
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	93 83       	std	Z+3, r25	; 0x03
     a54:	82 83       	std	Z+2, r24	; 0x02
     a56:	84 e2       	ldi	r24, 0x24	; 36
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	95 83       	std	Z+5, r25	; 0x05
     a5c:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     a5e:	85 e2       	ldi	r24, 0x25	; 37
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	97 83       	std	Z+7, r25	; 0x07
     a64:	86 83       	std	Z+6, r24	; 0x06
     a66:	86 e2       	ldi	r24, 0x26	; 38
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	91 87       	std	Z+9, r25	; 0x09
     a6c:	80 87       	std	Z+8, r24	; 0x08
     a6e:	87 e2       	ldi	r24, 0x27	; 39
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	34 c0       	rjmp	.+104    	; 0xadc <getFinalDest+0x180>
struct vertice { int n, x, y, edgeCount, edgePoints[6]; };
struct vertice verticeList[49];
struct edge edgeList[63];

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     a74:	8d e0       	ldi	r24, 0x0D	; 13
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	91 83       	std	Z+1, r25	; 0x01
     a7a:	80 83       	st	Z, r24
     a7c:	84 e2       	ldi	r24, 0x24	; 36
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	93 83       	std	Z+3, r25	; 0x03
     a82:	82 83       	std	Z+2, r24	; 0x02
     a84:	85 e2       	ldi	r24, 0x25	; 37
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	95 83       	std	Z+5, r25	; 0x05
     a8a:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     a8c:	88 e2       	ldi	r24, 0x28	; 40
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	38 c0       	rjmp	.+112    	; 0xb02 <getFinalDest+0x1a6>
struct vertice { int n, x, y, edgeCount, edgePoints[6]; };
struct vertice verticeList[49];
struct edge edgeList[63];

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     a92:	81 e1       	ldi	r24, 0x11	; 17
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	91 83       	std	Z+1, r25	; 0x01
     a98:	80 83       	st	Z, r24
     a9a:	89 e2       	ldi	r24, 0x29	; 41
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	93 83       	std	Z+3, r25	; 0x03
     aa0:	82 83       	std	Z+2, r24	; 0x02
     aa2:	8a e2       	ldi	r24, 0x2A	; 42
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	95 83       	std	Z+5, r25	; 0x05
     aa8:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     aaa:	8b e2       	ldi	r24, 0x2B	; 43
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	29 c0       	rjmp	.+82     	; 0xb02 <getFinalDest+0x1a6>
struct vertice { int n, x, y, edgeCount, edgePoints[6]; };
struct vertice verticeList[49];
struct edge edgeList[63];

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     ab0:	89 e2       	ldi	r24, 0x29	; 41
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	91 83       	std	Z+1, r25	; 0x01
     ab6:	80 83       	st	Z, r24
     ab8:	8a e2       	ldi	r24, 0x2A	; 42
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	93 83       	std	Z+3, r25	; 0x03
     abe:	82 83       	std	Z+2, r24	; 0x02
     ac0:	8c e2       	ldi	r24, 0x2C	; 44
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	95 83       	std	Z+5, r25	; 0x05
     ac6:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     ac8:	8d e2       	ldi	r24, 0x2D	; 45
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	97 83       	std	Z+7, r25	; 0x07
     ace:	86 83       	std	Z+6, r24	; 0x06
     ad0:	8e e2       	ldi	r24, 0x2E	; 46
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	91 87       	std	Z+9, r25	; 0x09
     ad6:	80 87       	std	Z+8, r24	; 0x08
     ad8:	8f e2       	ldi	r24, 0x2F	; 47
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	93 87       	std	Z+11, r25	; 0x0b
     ade:	82 87       	std	Z+10, r24	; 0x0a
     ae0:	26 e0       	ldi	r18, 0x06	; 6
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	16 c0       	rjmp	.+44     	; 0xb12 <getFinalDest+0x1b6>
struct vertice { int n, x, y, edgeCount, edgePoints[6]; };
struct vertice verticeList[49];
struct edge edgeList[63];

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     ae6:	85 e1       	ldi	r24, 0x15	; 21
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	91 83       	std	Z+1, r25	; 0x01
     aec:	80 83       	st	Z, r24
     aee:	8c e2       	ldi	r24, 0x2C	; 44
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	93 83       	std	Z+3, r25	; 0x03
     af4:	82 83       	std	Z+2, r24	; 0x02
     af6:	8d e2       	ldi	r24, 0x2D	; 45
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	95 83       	std	Z+5, r25	; 0x05
     afc:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     afe:	80 e3       	ldi	r24, 0x30	; 48
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	97 83       	std	Z+7, r25	; 0x07
     b04:	86 83       	std	Z+6, r24	; 0x06
     b06:	11 86       	std	Z+9, r1	; 0x09
     b08:	10 86       	std	Z+8, r1	; 0x08
     b0a:	13 86       	std	Z+11, r1	; 0x0b
     b0c:	12 86       	std	Z+10, r1	; 0x0a
     b0e:	24 e0       	ldi	r18, 0x04	; 4
     b10:	30 e0       	ldi	r19, 0x00	; 0
			case 32: addToArr(finalDest,41,42,44,45,46,47); return 6;
			case 33: addToArr(finalDest,21,44,45,48,0,0); return 4;
		}
	}
	return 0;
}
     b12:	c9 01       	movw	r24, r18
     b14:	08 95       	ret

00000b16 <getOtherSide>:

int getOtherSide(int tempE, int tempG) {
     b16:	ac 01       	movw	r20, r24
	if (edgeList[tempE].endA != tempG) return edgeList[tempE].endA;
     b18:	fc 01       	movw	r30, r24
     b1a:	b3 e0       	ldi	r27, 0x03	; 3
     b1c:	ee 0f       	add	r30, r30
     b1e:	ff 1f       	adc	r31, r31
     b20:	ba 95       	dec	r27
     b22:	e1 f7       	brne	.-8      	; 0xb1c <getOtherSide+0x6>
     b24:	88 0f       	add	r24, r24
     b26:	99 1f       	adc	r25, r25
     b28:	e8 0f       	add	r30, r24
     b2a:	f9 1f       	adc	r31, r25
     b2c:	e3 5c       	subi	r30, 0xC3	; 195
     b2e:	f9 4f       	sbci	r31, 0xF9	; 249
     b30:	24 81       	ldd	r18, Z+4	; 0x04
     b32:	35 81       	ldd	r19, Z+5	; 0x05
     b34:	26 17       	cp	r18, r22
     b36:	37 07       	cpc	r19, r23
     b38:	79 f4       	brne	.+30     	; 0xb58 <getOtherSide+0x42>
	return edgeList[tempE].endB;
     b3a:	ca 01       	movw	r24, r20
     b3c:	fa 01       	movw	r30, r20
     b3e:	73 e0       	ldi	r23, 0x03	; 3
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	7a 95       	dec	r23
     b46:	e1 f7       	brne	.-8      	; 0xb40 <getOtherSide+0x2a>
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	e8 0f       	add	r30, r24
     b4e:	f9 1f       	adc	r31, r25
     b50:	e3 5c       	subi	r30, 0xC3	; 195
     b52:	f9 4f       	sbci	r31, 0xF9	; 249
     b54:	26 81       	ldd	r18, Z+6	; 0x06
     b56:	37 81       	ldd	r19, Z+7	; 0x07
}
     b58:	c9 01       	movw	r24, r18
     b5a:	08 95       	ret

00000b5c <dequeue>:

void dequeue(int q[],int qLen,int n) {
     b5c:	9a 01       	movw	r18, r20
     b5e:	fa 01       	movw	r30, r20
     b60:	31 96       	adiw	r30, 0x01	; 1
     b62:	ee 0f       	add	r30, r30
     b64:	ff 1f       	adc	r31, r31
     b66:	e8 0f       	add	r30, r24
     b68:	f9 1f       	adc	r31, r25
     b6a:	d9 01       	movw	r26, r18
     b6c:	aa 0f       	add	r26, r26
     b6e:	bb 1f       	adc	r27, r27
     b70:	a8 0f       	add	r26, r24
     b72:	b9 1f       	adc	r27, r25
	int i;
	for (i = n; i < qLen-1; i++) {
     b74:	61 50       	subi	r22, 0x01	; 1
     b76:	70 40       	sbci	r23, 0x00	; 0
     b78:	06 c0       	rjmp	.+12     	; 0xb86 <dequeue+0x2a>
		q[i] = q[i+1];
     b7a:	81 91       	ld	r24, Z+
     b7c:	91 91       	ld	r25, Z+
     b7e:	8d 93       	st	X+, r24
     b80:	9d 93       	st	X+, r25
	return edgeList[tempE].endB;
}

void dequeue(int q[],int qLen,int n) {
	int i;
	for (i = n; i < qLen-1; i++) {
     b82:	2f 5f       	subi	r18, 0xFF	; 255
     b84:	3f 4f       	sbci	r19, 0xFF	; 255
     b86:	26 17       	cp	r18, r22
     b88:	37 07       	cpc	r19, r23
     b8a:	bc f3       	brlt	.-18     	; 0xb7a <dequeue+0x1e>
		q[i] = q[i+1];
	}
}
     b8c:	08 95       	ret

00000b8e <enqueue>:

void enqueue(int q[],int qLen,int n,int x) {
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	ec 01       	movw	r28, r24
     b94:	fb 01       	movw	r30, r22
     b96:	31 97       	sbiw	r30, 0x01	; 1
     b98:	ee 0f       	add	r30, r30
     b9a:	ff 1f       	adc	r31, r31
     b9c:	ec 0f       	add	r30, r28
     b9e:	fd 1f       	adc	r31, r29
     ba0:	db 01       	movw	r26, r22
     ba2:	aa 0f       	add	r26, r26
     ba4:	bb 1f       	adc	r27, r27
     ba6:	ac 0f       	add	r26, r28
     ba8:	bd 1f       	adc	r27, r29
     baa:	07 c0       	rjmp	.+14     	; 0xbba <enqueue+0x2c>
	int i;
	for (i = qLen-1; i >= n; i--) {
		q[i+1] = q[i];
     bac:	80 81       	ld	r24, Z
     bae:	91 81       	ldd	r25, Z+1	; 0x01
     bb0:	11 96       	adiw	r26, 0x01	; 1
     bb2:	9c 93       	st	X, r25
     bb4:	8e 93       	st	-X, r24
     bb6:	32 97       	sbiw	r30, 0x02	; 2
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	61 50       	subi	r22, 0x01	; 1
     bbc:	70 40       	sbci	r23, 0x00	; 0
	}
}

void enqueue(int q[],int qLen,int n,int x) {
	int i;
	for (i = qLen-1; i >= n; i--) {
     bbe:	64 17       	cp	r22, r20
     bc0:	75 07       	cpc	r23, r21
     bc2:	a4 f7       	brge	.-24     	; 0xbac <enqueue+0x1e>
		q[i+1] = q[i];
	}
	q[n] = x;
     bc4:	44 0f       	add	r20, r20
     bc6:	55 1f       	adc	r21, r21
     bc8:	c4 0f       	add	r28, r20
     bca:	d5 1f       	adc	r29, r21
     bcc:	39 83       	std	Y+1, r19	; 0x01
     bce:	28 83       	st	Y, r18
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <addObstacle>:

void addObstacle(int a, int b) {
	int i;
	a--; b--;
     bd6:	ac 01       	movw	r20, r24
     bd8:	41 50       	subi	r20, 0x01	; 1
     bda:	50 40       	sbci	r21, 0x00	; 0
     bdc:	61 50       	subi	r22, 0x01	; 1
     bde:	70 40       	sbci	r23, 0x00	; 0
     be0:	ed e3       	ldi	r30, 0x3D	; 61
     be2:	f6 e0       	ldi	r31, 0x06	; 6
	for (i = 0; i < 63; i++) {
		if ((edgeList[i].endA==a && edgeList[i].endB==b) || (edgeList[i].endA==b && edgeList[i].endB==a))
			edgeList[i].obstacle = 1;
     be4:	a1 e0       	ldi	r26, 0x01	; 1
     be6:	b0 e0       	ldi	r27, 0x00	; 0

void addObstacle(int a, int b) {
	int i;
	a--; b--;
	for (i = 0; i < 63; i++) {
		if ((edgeList[i].endA==a && edgeList[i].endB==b) || (edgeList[i].endA==b && edgeList[i].endB==a))
     be8:	24 81       	ldd	r18, Z+4	; 0x04
     bea:	35 81       	ldd	r19, Z+5	; 0x05
     bec:	24 17       	cp	r18, r20
     bee:	35 07       	cpc	r19, r21
     bf0:	29 f4       	brne	.+10     	; 0xbfc <addObstacle+0x26>
     bf2:	86 81       	ldd	r24, Z+6	; 0x06
     bf4:	97 81       	ldd	r25, Z+7	; 0x07
     bf6:	86 17       	cp	r24, r22
     bf8:	97 07       	cpc	r25, r23
     bfa:	41 f0       	breq	.+16     	; 0xc0c <addObstacle+0x36>
     bfc:	26 17       	cp	r18, r22
     bfe:	37 07       	cpc	r19, r23
     c00:	39 f4       	brne	.+14     	; 0xc10 <addObstacle+0x3a>
     c02:	86 81       	ldd	r24, Z+6	; 0x06
     c04:	97 81       	ldd	r25, Z+7	; 0x07
     c06:	84 17       	cp	r24, r20
     c08:	95 07       	cpc	r25, r21
     c0a:	11 f4       	brne	.+4      	; 0xc10 <addObstacle+0x3a>
			edgeList[i].obstacle = 1;
     c0c:	b1 83       	std	Z+1, r27	; 0x01
     c0e:	a0 83       	st	Z, r26
     c10:	3a 96       	adiw	r30, 0x0a	; 10
}

void addObstacle(int a, int b) {
	int i;
	a--; b--;
	for (i = 0; i < 63; i++) {
     c12:	88 e0       	ldi	r24, 0x08	; 8
     c14:	e3 3b       	cpi	r30, 0xB3	; 179
     c16:	f8 07       	cpc	r31, r24
     c18:	39 f7       	brne	.-50     	; 0xbe8 <addObstacle+0x12>
		if ((edgeList[i].endA==a && edgeList[i].endB==b) || (edgeList[i].endA==b && edgeList[i].endB==a))
			edgeList[i].obstacle = 1;
	}
}
     c1a:	08 95       	ret

00000c1c <init_graph>:

void init_graph() {
     c1c:	8f 92       	push	r8
     c1e:	9f 92       	push	r9
     c20:	af 92       	push	r10
     c22:	bf 92       	push	r11
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	cc 5b       	subi	r28, 0xBC	; 188
     c3a:	d2 40       	sbci	r29, 0x02	; 2
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
	int verticeXY[98] = {57,275,63,219,84,169,117,121,164,89,216,65,271,59,328,63,381,88,426,125,463,168,480,221,489,276,480,330,458,384,425,425,381,458,328,484,273,489,214,485,161,461,116,428,83,382,63,333,116,223,146,278,114,329,147,167,209,167,241,217,206,272,240,112,397,164,333,166,302,115,429,225,397,277,336,276,304,223,430,329,305,439,334,382,398,386,241,437,214,382,240,333,302,328,145,382,271,275},
     c46:	de 01       	movw	r26, r28
     c48:	a3 50       	subi	r26, 0x03	; 3
     c4a:	bf 4f       	sbci	r27, 0xFF	; 255
     c4c:	ec e0       	ldi	r30, 0x0C	; 12
     c4e:	f4 e0       	ldi	r31, 0x04	; 4
     c50:	84 ec       	ldi	r24, 0xC4	; 196
     c52:	01 90       	ld	r0, Z+
     c54:	0d 92       	st	X+, r0
     c56:	81 50       	subi	r24, 0x01	; 1
     c58:	e1 f7       	brne	.-8      	; 0xc52 <init_graph+0x36>
	edgeEnds[126] = {1,2,1,24,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,3,25,25,26,26,27,27,23,25,28,28,29,29,30,30,31,31,26,3,28,32,7,32,29,7,35,35,34,34,33,33,11,33,36,36,37,37,38,38,39,39,34,11,36,37,40,40,15,43,15,43,42,41,42,41,19,42,47,47,46,46,45,45,44,44,41,19,44,45,48,48,23,26,45,29,34,37,42},
     c5a:	de 01       	movw	r26, r28
     c5c:	af 53       	subi	r26, 0x3F	; 63
     c5e:	be 4f       	sbci	r27, 0xFE	; 254
     c60:	e0 e1       	ldi	r30, 0x10	; 16
     c62:	f3 e0       	ldi	r31, 0x03	; 3
     c64:	8c ef       	ldi	r24, 0xFC	; 252
     c66:	01 90       	ld	r0, Z+
     c68:	0d 92       	st	X+, r0
     c6a:	81 50       	subi	r24, 0x01	; 1
     c6c:	e1 f7       	brne	.-8      	; 0xc66 <init_graph+0x4a>
	edgeAngles[63] = {82,-82,67,52,37,22,7,-7,-22,-37,-52,-67,-82,-97,-112,-127,-142,-157,-172,172,157,142,127,112,-60,-60,-120,-120,60,0,-60,-120,180,0,60,-120,-60,-60,0,0,-60,-120,180,120,60,-120,-60,-60,0,180,60,-120,120,180,-120,-60,0,120,180,180,-60,0,-120},
     c6e:	de 01       	movw	r26, r28
     c70:	11 96       	adiw	r26, 0x01	; 1
     c72:	e2 e9       	ldi	r30, 0x92	; 146
     c74:	f2 e0       	ldi	r31, 0x02	; 2
     c76:	8e e7       	ldi	r24, 0x7E	; 126
     c78:	01 90       	ld	r0, Z+
     c7a:	0d 92       	st	X+, r0
     c7c:	81 50       	subi	r24, 0x01	; 1
     c7e:	e1 f7       	brne	.-8      	; 0xc78 <init_graph+0x5c>
	edgeDist[63] = {20,21,19,21,20,20,20,20,21,21,20,20,20,19,21,18,20,21,20,21,21,20,20,18,22,21,21,22,21,21,21,23,21,23,22,23,23,21,23,24,24,22,22,22,23,24,22,22,21,23,23,21,22,22,20,22,23,22,25,22,45,45,44},
     c80:	de 01       	movw	r26, r28
     c82:	a1 58       	subi	r26, 0x81	; 129
     c84:	bf 4f       	sbci	r27, 0xFF	; 255
     c86:	e4 e1       	ldi	r30, 0x14	; 20
     c88:	f2 e0       	ldi	r31, 0x02	; 2
     c8a:	8e e7       	ldi	r24, 0x7E	; 126
     c8c:	01 90       	ld	r0, Z+
     c8e:	0d 92       	st	X+, r0
     c90:	81 50       	subi	r24, 0x01	; 1
     c92:	e1 f7       	brne	.-8      	; 0xc8c <init_graph+0x70>
     c94:	e2 ec       	ldi	r30, 0xC2	; 194
     c96:	f8 e0       	ldi	r31, 0x08	; 8
     c98:	de 01       	movw	r26, r28
     c9a:	a3 50       	subi	r26, 0x03	; 3
     c9c:	bf 4f       	sbci	r27, 0xFF	; 255
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
	i;
	for (i = 0; i < 49; i++) { //Vertice Initialization
		verticeList[i].n = i;
     ca2:	31 83       	std	Z+1, r19	; 0x01
     ca4:	20 83       	st	Z, r18
		verticeList[i].x = verticeXY[2*i];
     ca6:	8d 91       	ld	r24, X+
     ca8:	9c 91       	ld	r25, X
     caa:	11 97       	sbiw	r26, 0x01	; 1
     cac:	93 83       	std	Z+3, r25	; 0x03
     cae:	82 83       	std	Z+2, r24	; 0x02
		verticeList[i].y = verticeXY[2*i+1];
     cb0:	12 96       	adiw	r26, 0x02	; 2
     cb2:	8d 91       	ld	r24, X+
     cb4:	9c 91       	ld	r25, X
     cb6:	13 97       	sbiw	r26, 0x03	; 3
     cb8:	95 83       	std	Z+5, r25	; 0x05
     cba:	84 83       	std	Z+4, r24	; 0x04
		verticeList[i].edgeCount = 0;
     cbc:	17 82       	std	Z+7, r1	; 0x07
     cbe:	16 82       	std	Z+6, r1	; 0x06
	int verticeXY[98] = {57,275,63,219,84,169,117,121,164,89,216,65,271,59,328,63,381,88,426,125,463,168,480,221,489,276,480,330,458,384,425,425,381,458,328,484,273,489,214,485,161,461,116,428,83,382,63,333,116,223,146,278,114,329,147,167,209,167,241,217,206,272,240,112,397,164,333,166,302,115,429,225,397,277,336,276,304,223,430,329,305,439,334,382,398,386,241,437,214,382,240,333,302,328,145,382,271,275},
	edgeEnds[126] = {1,2,1,24,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,3,25,25,26,26,27,27,23,25,28,28,29,29,30,30,31,31,26,3,28,32,7,32,29,7,35,35,34,34,33,33,11,33,36,36,37,37,38,38,39,39,34,11,36,37,40,40,15,43,15,43,42,41,42,41,19,42,47,47,46,46,45,45,44,44,41,19,44,45,48,48,23,26,45,29,34,37,42},
	edgeAngles[63] = {82,-82,67,52,37,22,7,-7,-22,-37,-52,-67,-82,-97,-112,-127,-142,-157,-172,172,157,142,127,112,-60,-60,-120,-120,60,0,-60,-120,180,0,60,-120,-60,-60,0,0,-60,-120,180,120,60,-120,-60,-60,0,180,60,-120,120,180,-120,-60,0,120,180,180,-60,0,-120},
	edgeDist[63] = {20,21,19,21,20,20,20,20,21,21,20,20,20,19,21,18,20,21,20,21,21,20,20,18,22,21,21,22,21,21,21,23,21,23,22,23,23,21,23,24,24,22,22,22,23,24,22,22,21,23,23,21,22,22,20,22,23,22,25,22,45,45,44},
	i;
	for (i = 0; i < 49; i++) { //Vertice Initialization
     cc0:	2f 5f       	subi	r18, 0xFF	; 255
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	74 96       	adiw	r30, 0x14	; 20
     cc6:	14 96       	adiw	r26, 0x04	; 4
     cc8:	21 33       	cpi	r18, 0x31	; 49
     cca:	31 05       	cpc	r19, r1
     ccc:	51 f7       	brne	.-44     	; 0xca2 <init_graph+0x86>
     cce:	6d e3       	ldi	r22, 0x3D	; 61
     cd0:	76 e0       	ldi	r23, 0x06	; 6
     cd2:	5e 01       	movw	r10, r28
     cd4:	08 94       	sec
     cd6:	a1 1c       	adc	r10, r1
     cd8:	b1 1c       	adc	r11, r1
     cda:	21 ec       	ldi	r18, 0xC1	; 193
     cdc:	e2 2e       	mov	r14, r18
     cde:	21 e0       	ldi	r18, 0x01	; 1
     ce0:	f2 2e       	mov	r15, r18
     ce2:	ec 0e       	add	r14, r28
     ce4:	fd 1e       	adc	r15, r29
     ce6:	9f e7       	ldi	r25, 0x7F	; 127
     ce8:	c9 2e       	mov	r12, r25
     cea:	d1 2c       	mov	r13, r1
     cec:	cc 0e       	add	r12, r28
     cee:	dd 1e       	adc	r13, r29
     cf0:	00 e0       	ldi	r16, 0x00	; 0
     cf2:	10 e0       	ldi	r17, 0x00	; 0
		edgeList[i].obstacle = 0;
		edgeList[i].angle = edgeAngles[i];
		edgeList[i].endA = edgeEnds[2*i]-1;
		edgeList[i].endB = edgeEnds[2*i+1]-1;
		edgeList[i].distance = edgeDist[i];
		verticeList[edgeList[i].endA].edgePoints[(verticeList[edgeList[i].endA].edgeCount)++] = i;
     cf4:	84 e1       	ldi	r24, 0x14	; 20
     cf6:	88 2e       	mov	r8, r24
     cf8:	91 2c       	mov	r9, r1
		verticeList[i].x = verticeXY[2*i];
		verticeList[i].y = verticeXY[2*i+1];
		verticeList[i].edgeCount = 0;
	}
	for (i = 0; i < 63; i++) { //Edge Initialization
		edgeList[i].obstacle = 0;
     cfa:	fb 01       	movw	r30, r22
     cfc:	11 82       	std	Z+1, r1	; 0x01
     cfe:	10 82       	st	Z, r1
		edgeList[i].angle = edgeAngles[i];
     d00:	f5 01       	movw	r30, r10
     d02:	81 91       	ld	r24, Z+
     d04:	91 91       	ld	r25, Z+
     d06:	5f 01       	movw	r10, r30
     d08:	fb 01       	movw	r30, r22
     d0a:	93 83       	std	Z+3, r25	; 0x03
     d0c:	82 83       	std	Z+2, r24	; 0x02
		edgeList[i].endA = edgeEnds[2*i]-1;
     d0e:	f7 01       	movw	r30, r14
     d10:	80 81       	ld	r24, Z
     d12:	91 81       	ldd	r25, Z+1	; 0x01
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	fb 01       	movw	r30, r22
     d18:	95 83       	std	Z+5, r25	; 0x05
     d1a:	84 83       	std	Z+4, r24	; 0x04
		edgeList[i].endB = edgeEnds[2*i+1]-1;
     d1c:	f7 01       	movw	r30, r14
     d1e:	42 81       	ldd	r20, Z+2	; 0x02
     d20:	53 81       	ldd	r21, Z+3	; 0x03
     d22:	41 50       	subi	r20, 0x01	; 1
     d24:	50 40       	sbci	r21, 0x00	; 0
     d26:	fb 01       	movw	r30, r22
     d28:	57 83       	std	Z+7, r21	; 0x07
     d2a:	46 83       	std	Z+6, r20	; 0x06
		edgeList[i].distance = edgeDist[i];
     d2c:	f6 01       	movw	r30, r12
     d2e:	21 91       	ld	r18, Z+
     d30:	31 91       	ld	r19, Z+
     d32:	6f 01       	movw	r12, r30
     d34:	fb 01       	movw	r30, r22
     d36:	31 87       	std	Z+9, r19	; 0x09
     d38:	20 87       	std	Z+8, r18	; 0x08
		verticeList[edgeList[i].endA].edgePoints[(verticeList[edgeList[i].endA].edgeCount)++] = i;
     d3a:	88 9d       	mul	r24, r8
     d3c:	d0 01       	movw	r26, r0
     d3e:	89 9d       	mul	r24, r9
     d40:	b0 0d       	add	r27, r0
     d42:	98 9d       	mul	r25, r8
     d44:	b0 0d       	add	r27, r0
     d46:	11 24       	eor	r1, r1
     d48:	ae 53       	subi	r26, 0x3E	; 62
     d4a:	b7 4f       	sbci	r27, 0xF7	; 247
     d4c:	16 96       	adiw	r26, 0x06	; 6
     d4e:	2d 91       	ld	r18, X+
     d50:	3c 91       	ld	r19, X
     d52:	17 97       	sbiw	r26, 0x07	; 7
     d54:	fc 01       	movw	r30, r24
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	e8 0f       	add	r30, r24
     d68:	f9 1f       	adc	r31, r25
     d6a:	e2 0f       	add	r30, r18
     d6c:	f3 1f       	adc	r31, r19
     d6e:	ee 0f       	add	r30, r30
     d70:	ff 1f       	adc	r31, r31
     d72:	ee 53       	subi	r30, 0x3E	; 62
     d74:	f7 4f       	sbci	r31, 0xF7	; 247
     d76:	11 87       	std	Z+9, r17	; 0x09
     d78:	00 87       	std	Z+8, r16	; 0x08
     d7a:	2f 5f       	subi	r18, 0xFF	; 255
     d7c:	3f 4f       	sbci	r19, 0xFF	; 255
     d7e:	17 96       	adiw	r26, 0x07	; 7
     d80:	3c 93       	st	X, r19
     d82:	2e 93       	st	-X, r18
     d84:	16 97       	sbiw	r26, 0x06	; 6
		verticeList[edgeList[i].endB].edgePoints[(verticeList[edgeList[i].endB].edgeCount)++] = i;
     d86:	48 9d       	mul	r20, r8
     d88:	d0 01       	movw	r26, r0
     d8a:	49 9d       	mul	r20, r9
     d8c:	b0 0d       	add	r27, r0
     d8e:	58 9d       	mul	r21, r8
     d90:	b0 0d       	add	r27, r0
     d92:	11 24       	eor	r1, r1
     d94:	ae 53       	subi	r26, 0x3E	; 62
     d96:	b7 4f       	sbci	r27, 0xF7	; 247
     d98:	16 96       	adiw	r26, 0x06	; 6
     d9a:	8d 91       	ld	r24, X+
     d9c:	9c 91       	ld	r25, X
     d9e:	17 97       	sbiw	r26, 0x07	; 7
     da0:	fa 01       	movw	r30, r20
     da2:	23 e0       	ldi	r18, 0x03	; 3
     da4:	ee 0f       	add	r30, r30
     da6:	ff 1f       	adc	r31, r31
     da8:	2a 95       	dec	r18
     daa:	e1 f7       	brne	.-8      	; 0xda4 <init_graph+0x188>
     dac:	44 0f       	add	r20, r20
     dae:	55 1f       	adc	r21, r21
     db0:	e4 0f       	add	r30, r20
     db2:	f5 1f       	adc	r31, r21
     db4:	e8 0f       	add	r30, r24
     db6:	f9 1f       	adc	r31, r25
     db8:	ee 0f       	add	r30, r30
     dba:	ff 1f       	adc	r31, r31
     dbc:	ee 53       	subi	r30, 0x3E	; 62
     dbe:	f7 4f       	sbci	r31, 0xF7	; 247
     dc0:	11 87       	std	Z+9, r17	; 0x09
     dc2:	00 87       	std	Z+8, r16	; 0x08
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	17 96       	adiw	r26, 0x07	; 7
     dc8:	9c 93       	st	X, r25
     dca:	8e 93       	st	-X, r24
     dcc:	16 97       	sbiw	r26, 0x06	; 6
		verticeList[i].n = i;
		verticeList[i].x = verticeXY[2*i];
		verticeList[i].y = verticeXY[2*i+1];
		verticeList[i].edgeCount = 0;
	}
	for (i = 0; i < 63; i++) { //Edge Initialization
     dce:	0f 5f       	subi	r16, 0xFF	; 255
     dd0:	1f 4f       	sbci	r17, 0xFF	; 255
     dd2:	66 5f       	subi	r22, 0xF6	; 246
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	84 e0       	ldi	r24, 0x04	; 4
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	e8 0e       	add	r14, r24
     ddc:	f9 1e       	adc	r15, r25
     dde:	0f 33       	cpi	r16, 0x3F	; 63
     de0:	11 05       	cpc	r17, r1
     de2:	09 f0       	breq	.+2      	; 0xde6 <init_graph+0x1ca>
     de4:	8a cf       	rjmp	.-236    	; 0xcfa <init_graph+0xde>
		edgeList[i].endB = edgeEnds[2*i+1]-1;
		edgeList[i].distance = edgeDist[i];
		verticeList[edgeList[i].endA].edgePoints[(verticeList[edgeList[i].endA].edgeCount)++] = i;
		verticeList[edgeList[i].endB].edgePoints[(verticeList[edgeList[i].endB].edgeCount)++] = i;
	}
}
     de6:	c4 54       	subi	r28, 0x44	; 68
     de8:	dd 4f       	sbci	r29, 0xFD	; 253
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
     e04:	bf 90       	pop	r11
     e06:	af 90       	pop	r10
     e08:	9f 90       	pop	r9
     e0a:	8f 90       	pop	r8
     e0c:	08 95       	ret

00000e0e <mainFun>:

void mainFun(int src,int dest,int compass) {
     e0e:	2f 92       	push	r2
     e10:	3f 92       	push	r3
     e12:	4f 92       	push	r4
     e14:	5f 92       	push	r5
     e16:	6f 92       	push	r6
     e18:	7f 92       	push	r7
     e1a:	8f 92       	push	r8
     e1c:	9f 92       	push	r9
     e1e:	af 92       	push	r10
     e20:	bf 92       	push	r11
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	c0 55       	subi	r28, 0x50	; 80
     e38:	d1 40       	sbci	r29, 0x01	; 1
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	c3 5b       	subi	r28, 0xB3	; 179
     e46:	de 4f       	sbci	r29, 0xFE	; 254
     e48:	99 83       	std	Y+1, r25	; 0x01
     e4a:	88 83       	st	Y, r24
     e4c:	cd 54       	subi	r28, 0x4D	; 77
     e4e:	d1 40       	sbci	r29, 0x01	; 1
     e50:	cb 01       	movw	r24, r22
     e52:	c1 5b       	subi	r28, 0xB1	; 177
     e54:	de 4f       	sbci	r29, 0xFE	; 254
     e56:	59 83       	std	Y+1, r21	; 0x01
     e58:	48 83       	st	Y, r20
     e5a:	cf 54       	subi	r28, 0x4F	; 79
     e5c:	d1 40       	sbci	r29, 0x01	; 1
	int i, j, x, y, z = -1, finalDest[6], finalDestCount, prevPts[49], dist[49], q[50], qLen;
	struct vertice tempV;
	finalDestCount = getFinalDest(dest,finalDest);
     e5e:	be 01       	movw	r22, r28
     e60:	6f 5f       	subi	r22, 0xFF	; 255
     e62:	7f 4f       	sbci	r23, 0xFF	; 255
     e64:	0e 94 ae 04 	call	0x95c	; 0x95c <getFinalDest>
     e68:	c7 5b       	subi	r28, 0xB7	; 183
     e6a:	de 4f       	sbci	r29, 0xFE	; 254
     e6c:	99 83       	std	Y+1, r25	; 0x01
     e6e:	88 83       	st	Y, r24
     e70:	c9 54       	subi	r28, 0x49	; 73
     e72:	d1 40       	sbci	r29, 0x01	; 1
     e74:	fe 01       	movw	r30, r28
     e76:	b1 96       	adiw	r30, 0x21	; 33
	for (i = 0; i < 49; i++) prevPts[i] = -1;
     e78:	2f ef       	ldi	r18, 0xFF	; 255
     e7a:	3f ef       	ldi	r19, 0xFF	; 255
     e7c:	ce 01       	movw	r24, r28
     e7e:	8d 57       	subi	r24, 0x7D	; 125
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	21 93       	st	Z+, r18
     e84:	31 93       	st	Z+, r19
     e86:	e8 17       	cp	r30, r24
     e88:	f9 07       	cpc	r31, r25
     e8a:	d9 f7       	brne	.-10     	; 0xe82 <mainFun+0x74>
     e8c:	df 01       	movw	r26, r30
	for (i = 0; i < 49; i++) dist[i] = 20000;
     e8e:	20 e2       	ldi	r18, 0x20	; 32
     e90:	3e e4       	ldi	r19, 0x4E	; 78
     e92:	af 01       	movw	r20, r30
     e94:	ce 01       	movw	r24, r28
     e96:	8b 51       	subi	r24, 0x1B	; 27
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	2d 93       	st	X+, r18
     e9c:	3d 93       	st	X+, r19
     e9e:	a8 17       	cp	r26, r24
     ea0:	b9 07       	cpc	r27, r25
     ea2:	d9 f7       	brne	.-10     	; 0xe9a <mainFun+0x8c>
	dist[src - 1] = 0;
     ea4:	c3 5b       	subi	r28, 0xB3	; 179
     ea6:	de 4f       	sbci	r29, 0xFE	; 254
     ea8:	88 81       	ld	r24, Y
     eaa:	99 81       	ldd	r25, Y+1	; 0x01
     eac:	cd 54       	subi	r28, 0x4D	; 77
     eae:	d1 40       	sbci	r29, 0x01	; 1
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	fc 01       	movw	r30, r24
     eb4:	ee 0f       	add	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	e4 0f       	add	r30, r20
     eba:	f5 1f       	adc	r31, r21
     ebc:	11 82       	std	Z+1, r1	; 0x01
     ebe:	10 82       	st	Z, r1
	qLen = 1; q[0] = src - 1;
     ec0:	8d 93       	st	X+, r24
     ec2:	9c 93       	st	X, r25
     ec4:	01 e0       	ldi	r16, 0x01	; 1
     ec6:	10 e0       	ldi	r17, 0x00	; 0
	while ( qLen>0 ) {
		for (i = 0; i < finalDestCount; i++)
			if (prevPts[finalDest[i]-1] != -1) {
				for (j = 0; j < qLen; j++) {
					if ( dist[q[j]] >= dist[finalDest[i]-1] ) {
     ec8:	b3 e8       	ldi	r27, 0x83	; 131
     eca:	2b 2e       	mov	r2, r27
     ecc:	31 2c       	mov	r3, r1
     ece:	2c 0e       	add	r2, r28
     ed0:	3d 1e       	adc	r3, r29
     ed2:	a5 ee       	ldi	r26, 0xE5	; 229
     ed4:	4a 2e       	mov	r4, r26
     ed6:	51 2c       	mov	r5, r1
     ed8:	4c 0e       	add	r4, r28
     eda:	5d 1e       	adc	r5, r29
     edc:	57 c1       	rjmp	.+686    	; 0x118c <mainFun+0x37e>
	for (i = 0; i < 49; i++) dist[i] = 20000;
	dist[src - 1] = 0;
	qLen = 1; q[0] = src - 1;
	while ( qLen>0 ) {
		for (i = 0; i < finalDestCount; i++)
			if (prevPts[finalDest[i]-1] != -1) {
     ede:	d6 01       	movw	r26, r12
     ee0:	2d 91       	ld	r18, X+
     ee2:	3c 91       	ld	r19, X
     ee4:	21 50       	subi	r18, 0x01	; 1
     ee6:	30 40       	sbci	r19, 0x00	; 0
     ee8:	22 0f       	add	r18, r18
     eea:	33 1f       	adc	r19, r19
     eec:	e1 e0       	ldi	r30, 0x01	; 1
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	ec 0f       	add	r30, r28
     ef2:	fd 1f       	adc	r31, r29
     ef4:	e2 0f       	add	r30, r18
     ef6:	f3 1f       	adc	r31, r19
     ef8:	80 a1       	ldd	r24, Z+32	; 0x20
     efa:	91 a1       	ldd	r25, Z+33	; 0x21
     efc:	8f 5f       	subi	r24, 0xFF	; 255
     efe:	9f 4f       	sbci	r25, 0xFF	; 255
     f00:	d1 f1       	breq	.+116    	; 0xf76 <mainFun+0x168>
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	50 e0       	ldi	r21, 0x00	; 0
				for (j = 0; j < qLen; j++) {
					if ( dist[q[j]] >= dist[finalDest[i]-1] ) {
     f06:	51 01       	movw	r10, r2
     f08:	a2 0e       	add	r10, r18
     f0a:	b3 1e       	adc	r11, r19
     f0c:	31 c0       	rjmp	.+98     	; 0xf70 <mainFun+0x162>
     f0e:	ba 01       	movw	r22, r20
     f10:	66 0f       	add	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	64 0d       	add	r22, r4
     f16:	75 1d       	adc	r23, r5
     f18:	db 01       	movw	r26, r22
     f1a:	ed 91       	ld	r30, X+
     f1c:	fc 91       	ld	r31, X
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	e2 0d       	add	r30, r2
     f24:	f3 1d       	adc	r31, r3
     f26:	20 81       	ld	r18, Z
     f28:	31 81       	ldd	r19, Z+1	; 0x01
     f2a:	f5 01       	movw	r30, r10
     f2c:	80 81       	ld	r24, Z
     f2e:	91 81       	ldd	r25, Z+1	; 0x01
     f30:	28 17       	cp	r18, r24
     f32:	39 07       	cpc	r19, r25
     f34:	14 f4       	brge	.+4      	; 0xf3a <mainFun+0x12c>
     f36:	c8 01       	movw	r24, r16
     f38:	18 c0       	rjmp	.+48     	; 0xf6a <mainFun+0x15c>
		verticeList[edgeList[i].endA].edgePoints[(verticeList[edgeList[i].endA].edgeCount)++] = i;
		verticeList[edgeList[i].endB].edgePoints[(verticeList[edgeList[i].endB].edgeCount)++] = i;
	}
}

void mainFun(int src,int dest,int compass) {
     f3a:	da 01       	movw	r26, r20
     f3c:	11 96       	adiw	r26, 0x01	; 1
     f3e:	aa 0f       	add	r26, r26
     f40:	bb 1f       	adc	r27, r27
     f42:	a4 0d       	add	r26, r4
     f44:	b5 1d       	adc	r27, r5
     f46:	fb 01       	movw	r30, r22
     f48:	9a 01       	movw	r18, r20
	return edgeList[tempE].endB;
}

void dequeue(int q[],int qLen,int n) {
	int i;
	for (i = n; i < qLen-1; i++) {
     f4a:	b8 01       	movw	r22, r16
     f4c:	61 50       	subi	r22, 0x01	; 1
     f4e:	70 40       	sbci	r23, 0x00	; 0
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <mainFun+0x150>
		q[i] = q[i+1];
     f52:	8d 91       	ld	r24, X+
     f54:	9d 91       	ld	r25, X+
     f56:	81 93       	st	Z+, r24
     f58:	91 93       	st	Z+, r25
	return edgeList[tempE].endB;
}

void dequeue(int q[],int qLen,int n) {
	int i;
	for (i = n; i < qLen-1; i++) {
     f5a:	2f 5f       	subi	r18, 0xFF	; 255
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	cb 01       	movw	r24, r22
     f60:	26 17       	cp	r18, r22
     f62:	37 07       	cpc	r19, r23
     f64:	b4 f3       	brlt	.-20     	; 0xf52 <mainFun+0x144>
	while ( qLen>0 ) {
		for (i = 0; i < finalDestCount; i++)
			if (prevPts[finalDest[i]-1] != -1) {
				for (j = 0; j < qLen; j++) {
					if ( dist[q[j]] >= dist[finalDest[i]-1] ) {
						dequeue(q,qLen,j); j--; qLen--;
     f66:	41 50       	subi	r20, 0x01	; 1
     f68:	50 40       	sbci	r21, 0x00	; 0
	dist[src - 1] = 0;
	qLen = 1; q[0] = src - 1;
	while ( qLen>0 ) {
		for (i = 0; i < finalDestCount; i++)
			if (prevPts[finalDest[i]-1] != -1) {
				for (j = 0; j < qLen; j++) {
     f6a:	4f 5f       	subi	r20, 0xFF	; 255
     f6c:	5f 4f       	sbci	r21, 0xFF	; 255
     f6e:	8c 01       	movw	r16, r24
     f70:	40 17       	cp	r20, r16
     f72:	51 07       	cpc	r21, r17
     f74:	64 f2       	brlt	.-104    	; 0xf0e <mainFun+0x100>
	for (i = 0; i < 49; i++) prevPts[i] = -1;
	for (i = 0; i < 49; i++) dist[i] = 20000;
	dist[src - 1] = 0;
	qLen = 1; q[0] = src - 1;
	while ( qLen>0 ) {
		for (i = 0; i < finalDestCount; i++)
     f76:	08 94       	sec
     f78:	e1 1c       	adc	r14, r1
     f7a:	f1 1c       	adc	r15, r1
     f7c:	22 e0       	ldi	r18, 0x02	; 2
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	c2 0e       	add	r12, r18
     f82:	d3 1e       	adc	r13, r19
     f84:	c7 5b       	subi	r28, 0xB7	; 183
     f86:	de 4f       	sbci	r29, 0xFE	; 254
     f88:	68 81       	ld	r22, Y
     f8a:	79 81       	ldd	r23, Y+1	; 0x01
     f8c:	c9 54       	subi	r28, 0x49	; 73
     f8e:	d1 40       	sbci	r29, 0x01	; 1
     f90:	e6 16       	cp	r14, r22
     f92:	f7 06       	cpc	r15, r23
     f94:	0c f4       	brge	.+2      	; 0xf98 <mainFun+0x18a>
     f96:	a3 cf       	rjmp	.-186    	; 0xede <mainFun+0xd0>
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	e0 c0       	rjmp	.+448    	; 0x115e <mainFun+0x350>
						dequeue(q,qLen,j); j--; qLen--;
					}
				}
			}
		for (i = 0; i < qLen; i++) {
			x = q[i];
     f9e:	fa 01       	movw	r30, r20
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	e4 0d       	add	r30, r4
     fa6:	f5 1d       	adc	r31, r5
     fa8:	a0 80       	ld	r10, Z
     faa:	b1 80       	ldd	r11, Z+1	; 0x01
		verticeList[edgeList[i].endA].edgePoints[(verticeList[edgeList[i].endA].edgeCount)++] = i;
		verticeList[edgeList[i].endB].edgePoints[(verticeList[edgeList[i].endB].edgeCount)++] = i;
	}
}

void mainFun(int src,int dest,int compass) {
     fac:	da 01       	movw	r26, r20
     fae:	11 96       	adiw	r26, 0x01	; 1
     fb0:	aa 0f       	add	r26, r26
     fb2:	bb 1f       	adc	r27, r27
     fb4:	a4 0d       	add	r26, r4
     fb6:	b5 1d       	adc	r27, r5
     fb8:	9a 01       	movw	r18, r20
	return edgeList[tempE].endB;
}

void dequeue(int q[],int qLen,int n) {
	int i;
	for (i = n; i < qLen-1; i++) {
     fba:	b8 01       	movw	r22, r16
     fbc:	61 50       	subi	r22, 0x01	; 1
     fbe:	70 40       	sbci	r23, 0x00	; 0
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <mainFun+0x1c0>
		q[i] = q[i+1];
     fc2:	8d 91       	ld	r24, X+
     fc4:	9d 91       	ld	r25, X+
     fc6:	81 93       	st	Z+, r24
     fc8:	91 93       	st	Z+, r25
	return edgeList[tempE].endB;
}

void dequeue(int q[],int qLen,int n) {
	int i;
	for (i = n; i < qLen-1; i++) {
     fca:	2f 5f       	subi	r18, 0xFF	; 255
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	26 17       	cp	r18, r22
     fd0:	37 07       	cpc	r19, r23
     fd2:	bc f3       	brlt	.-18     	; 0xfc2 <mainFun+0x1b4>
					}
				}
			}
		for (i = 0; i < qLen; i++) {
			x = q[i];
			dequeue(q,qLen,i); i--; qLen--;
     fd4:	7a 01       	movw	r14, r20
     fd6:	08 94       	sec
     fd8:	e1 08       	sbc	r14, r1
     fda:	f1 08       	sbc	r15, r1
			for (j = 0; j < verticeList[x].edgeCount; j++) {
     fdc:	a4 e1       	ldi	r26, 0x14	; 20
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	aa 9e       	mul	r10, r26
     fe2:	c0 01       	movw	r24, r0
     fe4:	ab 9e       	mul	r10, r27
     fe6:	90 0d       	add	r25, r0
     fe8:	ba 9e       	mul	r11, r26
     fea:	90 0d       	add	r25, r0
     fec:	11 24       	eor	r1, r1
     fee:	fc 01       	movw	r30, r24
     ff0:	ee 53       	subi	r30, 0x3E	; 62
     ff2:	f7 4f       	sbci	r31, 0xF7	; 247
     ff4:	26 81       	ldd	r18, Z+6	; 0x06
     ff6:	37 81       	ldd	r19, Z+7	; 0x07
     ff8:	c5 5b       	subi	r28, 0xB5	; 181
     ffa:	de 4f       	sbci	r29, 0xFE	; 254
     ffc:	39 83       	std	Y+1, r19	; 0x01
     ffe:	28 83       	st	Y, r18
    1000:	cb 54       	subi	r28, 0x4B	; 75
    1002:	d1 40       	sbci	r29, 0x01	; 1
    1004:	ea ec       	ldi	r30, 0xCA	; 202
    1006:	ce 2e       	mov	r12, r30
    1008:	e8 e0       	ldi	r30, 0x08	; 8
    100a:	de 2e       	mov	r13, r30
    100c:	c8 0e       	add	r12, r24
    100e:	d9 1e       	adc	r13, r25
    1010:	8b 01       	movw	r16, r22
    1012:	66 24       	eor	r6, r6
    1014:	77 24       	eor	r7, r7
				if (edgeList[verticeList[x].edgePoints[j]].obstacle == 1) continue;
				y = getOtherSide(verticeList[x].edgePoints[j],x);
				if (dist[y] > dist[x] + edgeList[verticeList[x].edgePoints[j]].distance) {
    1016:	45 01       	movw	r8, r10
    1018:	88 0c       	add	r8, r8
    101a:	99 1c       	adc	r9, r9
    101c:	82 0c       	add	r8, r2
    101e:	93 1c       	adc	r9, r3
    1020:	91 c0       	rjmp	.+290    	; 0x1144 <mainFun+0x336>
			}
		for (i = 0; i < qLen; i++) {
			x = q[i];
			dequeue(q,qLen,i); i--; qLen--;
			for (j = 0; j < verticeList[x].edgeCount; j++) {
				if (edgeList[verticeList[x].edgePoints[j]].obstacle == 1) continue;
    1022:	d6 01       	movw	r26, r12
    1024:	2c 91       	ld	r18, X
    1026:	11 96       	adiw	r26, 0x01	; 1
    1028:	3c 91       	ld	r19, X
    102a:	c9 01       	movw	r24, r18
    102c:	fc 01       	movw	r30, r24
    102e:	43 e0       	ldi	r20, 0x03	; 3
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	4a 95       	dec	r20
    1036:	e1 f7       	brne	.-8      	; 0x1030 <mainFun+0x222>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	e8 0f       	add	r30, r24
    103e:	f9 1f       	adc	r31, r25
    1040:	e3 5c       	subi	r30, 0xC3	; 195
    1042:	f9 4f       	sbci	r31, 0xF9	; 249
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	09 f4       	brne	.+2      	; 0x104e <mainFun+0x240>
    104c:	74 c0       	rjmp	.+232    	; 0x1136 <mainFun+0x328>
	}
	return 0;
}

int getOtherSide(int tempE, int tempG) {
	if (edgeList[tempE].endA != tempG) return edgeList[tempE].endA;
    104e:	c9 01       	movw	r24, r18
    1050:	fc 01       	movw	r30, r24
    1052:	a3 e0       	ldi	r26, 0x03	; 3
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	aa 95       	dec	r26
    105a:	e1 f7       	brne	.-8      	; 0x1054 <mainFun+0x246>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	e8 0f       	add	r30, r24
    1062:	f9 1f       	adc	r31, r25
    1064:	e3 5c       	subi	r30, 0xC3	; 195
    1066:	f9 4f       	sbci	r31, 0xF9	; 249
    1068:	64 81       	ldd	r22, Z+4	; 0x04
    106a:	75 81       	ldd	r23, Z+5	; 0x05
    106c:	6a 15       	cp	r22, r10
    106e:	7b 05       	cpc	r23, r11
    1070:	79 f4       	brne	.+30     	; 0x1090 <mainFun+0x282>
	return edgeList[tempE].endB;
    1072:	c9 01       	movw	r24, r18
    1074:	fc 01       	movw	r30, r24
    1076:	63 e0       	ldi	r22, 0x03	; 3
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	6a 95       	dec	r22
    107e:	e1 f7       	brne	.-8      	; 0x1078 <mainFun+0x26a>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	e8 0f       	add	r30, r24
    1086:	f9 1f       	adc	r31, r25
    1088:	e3 5c       	subi	r30, 0xC3	; 195
    108a:	f9 4f       	sbci	r31, 0xF9	; 249
    108c:	66 81       	ldd	r22, Z+6	; 0x06
    108e:	77 81       	ldd	r23, Z+7	; 0x07
			x = q[i];
			dequeue(q,qLen,i); i--; qLen--;
			for (j = 0; j < verticeList[x].edgeCount; j++) {
				if (edgeList[verticeList[x].edgePoints[j]].obstacle == 1) continue;
				y = getOtherSide(verticeList[x].edgePoints[j],x);
				if (dist[y] > dist[x] + edgeList[verticeList[x].edgePoints[j]].distance) {
    1090:	c9 01       	movw	r24, r18
    1092:	f9 01       	movw	r30, r18
    1094:	43 e0       	ldi	r20, 0x03	; 3
    1096:	ee 0f       	add	r30, r30
    1098:	ff 1f       	adc	r31, r31
    109a:	4a 95       	dec	r20
    109c:	e1 f7       	brne	.-8      	; 0x1096 <mainFun+0x288>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	e8 0f       	add	r30, r24
    10a4:	f9 1f       	adc	r31, r25
    10a6:	e3 5c       	subi	r30, 0xC3	; 195
    10a8:	f9 4f       	sbci	r31, 0xF9	; 249
    10aa:	d4 01       	movw	r26, r8
    10ac:	4d 91       	ld	r20, X+
    10ae:	5c 91       	ld	r21, X
    10b0:	80 85       	ldd	r24, Z+8	; 0x08
    10b2:	91 85       	ldd	r25, Z+9	; 0x09
    10b4:	48 0f       	add	r20, r24
    10b6:	59 1f       	adc	r21, r25
    10b8:	fb 01       	movw	r30, r22
    10ba:	ee 0f       	add	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	e2 0d       	add	r30, r2
    10c0:	f3 1d       	adc	r31, r3
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	48 17       	cp	r20, r24
    10c8:	59 07       	cpc	r21, r25
    10ca:	ac f5       	brge	.+106    	; 0x1136 <mainFun+0x328>
					dist[y] = dist[x] + edgeList[verticeList[x].edgePoints[j]].distance;
					prevPts[y] = x;
					enqueue(q,qLen,i+1,y); qLen++; i++;
    10cc:	08 94       	sec
    10ce:	e1 1c       	adc	r14, r1
    10d0:	f1 1c       	adc	r15, r1
    10d2:	98 01       	movw	r18, r16
    10d4:	f8 01       	movw	r30, r16
    10d6:	31 97       	sbiw	r30, 0x01	; 1
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	e4 0d       	add	r30, r4
    10de:	f5 1d       	adc	r31, r5
    10e0:	d8 01       	movw	r26, r16
    10e2:	aa 0f       	add	r26, r26
    10e4:	bb 1f       	adc	r27, r27
    10e6:	a4 0d       	add	r26, r4
    10e8:	b5 1d       	adc	r27, r5
    10ea:	07 c0       	rjmp	.+14     	; 0x10fa <mainFun+0x2ec>
}

void enqueue(int q[],int qLen,int n,int x) {
	int i;
	for (i = qLen-1; i >= n; i--) {
		q[i+1] = q[i];
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	11 96       	adiw	r26, 0x01	; 1
    10f2:	9c 93       	st	X, r25
    10f4:	8e 93       	st	-X, r24
    10f6:	32 97       	sbiw	r30, 0x02	; 2
    10f8:	12 97       	sbiw	r26, 0x02	; 2
    10fa:	21 50       	subi	r18, 0x01	; 1
    10fc:	30 40       	sbci	r19, 0x00	; 0
	}
}

void enqueue(int q[],int qLen,int n,int x) {
	int i;
	for (i = qLen-1; i >= n; i--) {
    10fe:	2e 15       	cp	r18, r14
    1100:	3f 05       	cpc	r19, r15
    1102:	a4 f7       	brge	.-24     	; 0x10ec <mainFun+0x2de>
			dequeue(q,qLen,i); i--; qLen--;
			for (j = 0; j < verticeList[x].edgeCount; j++) {
				if (edgeList[verticeList[x].edgePoints[j]].obstacle == 1) continue;
				y = getOtherSide(verticeList[x].edgePoints[j],x);
				if (dist[y] > dist[x] + edgeList[verticeList[x].edgePoints[j]].distance) {
					dist[y] = dist[x] + edgeList[verticeList[x].edgePoints[j]].distance;
    1104:	fb 01       	movw	r30, r22
    1106:	ee 0f       	add	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	d1 01       	movw	r26, r2
    110c:	ae 0f       	add	r26, r30
    110e:	bf 1f       	adc	r27, r31
    1110:	4d 93       	st	X+, r20
    1112:	5c 93       	st	X, r21
					prevPts[y] = x;
    1114:	21 e0       	ldi	r18, 0x01	; 1
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	2c 0f       	add	r18, r28
    111a:	3d 1f       	adc	r19, r29
    111c:	e2 0f       	add	r30, r18
    111e:	f3 1f       	adc	r31, r19
    1120:	b1 a2       	std	Z+33, r11	; 0x21
    1122:	a0 a2       	std	Z+32, r10	; 0x20
void enqueue(int q[],int qLen,int n,int x) {
	int i;
	for (i = qLen-1; i >= n; i--) {
		q[i+1] = q[i];
	}
	q[n] = x;
    1124:	f7 01       	movw	r30, r14
    1126:	ee 0f       	add	r30, r30
    1128:	ff 1f       	adc	r31, r31
    112a:	e4 0d       	add	r30, r4
    112c:	f5 1d       	adc	r31, r5
    112e:	71 83       	std	Z+1, r23	; 0x01
    1130:	60 83       	st	Z, r22
				if (edgeList[verticeList[x].edgePoints[j]].obstacle == 1) continue;
				y = getOtherSide(verticeList[x].edgePoints[j],x);
				if (dist[y] > dist[x] + edgeList[verticeList[x].edgePoints[j]].distance) {
					dist[y] = dist[x] + edgeList[verticeList[x].edgePoints[j]].distance;
					prevPts[y] = x;
					enqueue(q,qLen,i+1,y); qLen++; i++;
    1132:	0f 5f       	subi	r16, 0xFF	; 255
    1134:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
		for (i = 0; i < qLen; i++) {
			x = q[i];
			dequeue(q,qLen,i); i--; qLen--;
			for (j = 0; j < verticeList[x].edgeCount; j++) {
    1136:	08 94       	sec
    1138:	61 1c       	adc	r6, r1
    113a:	71 1c       	adc	r7, r1
    113c:	62 e0       	ldi	r22, 0x02	; 2
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	c6 0e       	add	r12, r22
    1142:	d7 1e       	adc	r13, r23
    1144:	c5 5b       	subi	r28, 0xB5	; 181
    1146:	de 4f       	sbci	r29, 0xFE	; 254
    1148:	88 81       	ld	r24, Y
    114a:	99 81       	ldd	r25, Y+1	; 0x01
    114c:	cb 54       	subi	r28, 0x4B	; 75
    114e:	d1 40       	sbci	r29, 0x01	; 1
    1150:	68 16       	cp	r6, r24
    1152:	79 06       	cpc	r7, r25
    1154:	0c f4       	brge	.+2      	; 0x1158 <mainFun+0x34a>
    1156:	65 cf       	rjmp	.-310    	; 0x1022 <mainFun+0x214>
					if ( dist[q[j]] >= dist[finalDest[i]-1] ) {
						dequeue(q,qLen,j); j--; qLen--;
					}
				}
			}
		for (i = 0; i < qLen; i++) {
    1158:	a7 01       	movw	r20, r14
    115a:	4f 5f       	subi	r20, 0xFF	; 255
    115c:	5f 4f       	sbci	r21, 0xFF	; 255
    115e:	40 17       	cp	r20, r16
    1160:	51 07       	cpc	r21, r17
    1162:	0c f4       	brge	.+2      	; 0x1166 <mainFun+0x358>
    1164:	1c cf       	rjmp	.-456    	; 0xf9e <mainFun+0x190>
	finalDestCount = getFinalDest(dest,finalDest);
	for (i = 0; i < 49; i++) prevPts[i] = -1;
	for (i = 0; i < 49; i++) dist[i] = 20000;
	dist[src - 1] = 0;
	qLen = 1; q[0] = src - 1;
	while ( qLen>0 ) {
    1166:	10 16       	cp	r1, r16
    1168:	11 06       	cpc	r1, r17
    116a:	84 f0       	brlt	.+32     	; 0x118c <mainFun+0x37e>
    116c:	8e 01       	movw	r16, r28
    116e:	0d 5f       	subi	r16, 0xFD	; 253
    1170:	1f 4f       	sbci	r17, 0xFF	; 255
    1172:	41 e0       	ldi	r20, 0x01	; 1
    1174:	50 e0       	ldi	r21, 0x00	; 0
    1176:	ee 24       	eor	r14, r14
    1178:	ff 24       	eor	r15, r15
    117a:	be 01       	movw	r22, r28
    117c:	6f 5f       	subi	r22, 0xFF	; 255
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
				}
			}
		}
	}
	for (x = 0, i = 1; i < finalDestCount; i++) {
		if (dist[finalDest[i]-1] < dist[finalDest[x]-1])
    1180:	93 e8       	ldi	r25, 0x83	; 131
    1182:	c9 2e       	mov	r12, r25
    1184:	d1 2c       	mov	r13, r1
    1186:	cc 0e       	add	r12, r28
    1188:	dd 1e       	adc	r13, r29
    118a:	26 c0       	rjmp	.+76     	; 0x11d8 <mainFun+0x3ca>
	finalDestCount = getFinalDest(dest,finalDest);
	for (i = 0; i < 49; i++) prevPts[i] = -1;
	for (i = 0; i < 49; i++) dist[i] = 20000;
	dist[src - 1] = 0;
	qLen = 1; q[0] = src - 1;
	while ( qLen>0 ) {
    118c:	6e 01       	movw	r12, r28
    118e:	08 94       	sec
    1190:	c1 1c       	adc	r12, r1
    1192:	d1 1c       	adc	r13, r1
    1194:	ee 24       	eor	r14, r14
    1196:	ff 24       	eor	r15, r15
    1198:	f5 ce       	rjmp	.-534    	; 0xf84 <mainFun+0x176>
				}
			}
		}
	}
	for (x = 0, i = 1; i < finalDestCount; i++) {
		if (dist[finalDest[i]-1] < dist[finalDest[x]-1])
    119a:	f8 01       	movw	r30, r16
    119c:	a0 81       	ld	r26, Z
    119e:	b1 81       	ldd	r27, Z+1	; 0x01
    11a0:	11 97       	sbiw	r26, 0x01	; 1
    11a2:	aa 0f       	add	r26, r26
    11a4:	bb 1f       	adc	r27, r27
    11a6:	ac 0d       	add	r26, r12
    11a8:	bd 1d       	adc	r27, r13
    11aa:	26 0f       	add	r18, r22
    11ac:	37 1f       	adc	r19, r23
    11ae:	f9 01       	movw	r30, r18
    11b0:	80 81       	ld	r24, Z
    11b2:	91 81       	ldd	r25, Z+1	; 0x01
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	8c 0d       	add	r24, r12
    11bc:	9d 1d       	adc	r25, r13
    11be:	2d 91       	ld	r18, X+
    11c0:	3c 91       	ld	r19, X
    11c2:	dc 01       	movw	r26, r24
    11c4:	8d 91       	ld	r24, X+
    11c6:	9c 91       	ld	r25, X
    11c8:	28 17       	cp	r18, r24
    11ca:	39 07       	cpc	r19, r25
    11cc:	0c f4       	brge	.+2      	; 0x11d0 <mainFun+0x3c2>
    11ce:	7a 01       	movw	r14, r20
					enqueue(q,qLen,i+1,y); qLen++; i++;
				}
			}
		}
	}
	for (x = 0, i = 1; i < finalDestCount; i++) {
    11d0:	4f 5f       	subi	r20, 0xFF	; 255
    11d2:	5f 4f       	sbci	r21, 0xFF	; 255
    11d4:	0e 5f       	subi	r16, 0xFE	; 254
    11d6:	1f 4f       	sbci	r17, 0xFF	; 255
    11d8:	97 01       	movw	r18, r14
    11da:	22 0f       	add	r18, r18
    11dc:	33 1f       	adc	r19, r19
    11de:	c7 5b       	subi	r28, 0xB7	; 183
    11e0:	de 4f       	sbci	r29, 0xFE	; 254
    11e2:	e8 81       	ld	r30, Y
    11e4:	f9 81       	ldd	r31, Y+1	; 0x01
    11e6:	c9 54       	subi	r28, 0x49	; 73
    11e8:	d1 40       	sbci	r29, 0x01	; 1
    11ea:	4e 17       	cp	r20, r30
    11ec:	5f 07       	cpc	r21, r31
    11ee:	ac f2       	brlt	.-86     	; 0x119a <mainFun+0x38c>
		if (dist[finalDest[i]-1] < dist[finalDest[x]-1])
			x = i;
	}
	z = finalDest[x] - 1;
    11f0:	62 0f       	add	r22, r18
    11f2:	73 1f       	adc	r23, r19
    11f4:	db 01       	movw	r26, r22
    11f6:	4d 91       	ld	r20, X+
    11f8:	5c 91       	ld	r21, X
    11fa:	41 50       	subi	r20, 0x01	; 1
    11fc:	50 40       	sbci	r21, 0x00	; 0
	pathLen = 0;
    11fe:	10 92 c1 08 	sts	0x08C1, r1
    1202:	10 92 c0 08 	sts	0x08C0, r1
	while (prevPts[z] != -1) {
    1206:	3e 01       	movw	r6, r28
    1208:	08 94       	sec
    120a:	61 1c       	adc	r6, r1
    120c:	71 1c       	adc	r7, r1
		path[pathLen++] = z+1;
		tempV = verticeList[z];
    120e:	74 e1       	ldi	r23, 0x14	; 20
    1210:	87 2e       	mov	r8, r23
    1212:	91 2c       	mov	r9, r1
    1214:	6d e0       	ldi	r22, 0x0D	; 13
    1216:	a6 2e       	mov	r10, r22
    1218:	b1 2c       	mov	r11, r1
    121a:	ac 0e       	add	r10, r28
    121c:	bd 1e       	adc	r11, r29
    121e:	35 e1       	ldi	r19, 0x15	; 21
    1220:	c3 2e       	mov	r12, r19
    1222:	d1 2c       	mov	r13, r1
    1224:	cc 0e       	add	r12, r28
    1226:	dd 1e       	adc	r13, r29
    1228:	ec c0       	rjmp	.+472    	; 0x1402 <mainFun+0x5f4>
			x = i;
	}
	z = finalDest[x] - 1;
	pathLen = 0;
	while (prevPts[z] != -1) {
		path[pathLen++] = z+1;
    122a:	80 91 c0 08 	lds	r24, 0x08C0
    122e:	90 91 c1 08 	lds	r25, 0x08C1
    1232:	4f 5f       	subi	r20, 0xFF	; 255
    1234:	5f 4f       	sbci	r21, 0xFF	; 255
    1236:	fc 01       	movw	r30, r24
    1238:	ee 0f       	add	r30, r30
    123a:	ff 1f       	adc	r31, r31
    123c:	e7 51       	subi	r30, 0x17	; 23
    123e:	fa 4f       	sbci	r31, 0xFA	; 250
    1240:	51 83       	std	Z+1, r21	; 0x01
    1242:	40 83       	st	Z, r20
    1244:	41 50       	subi	r20, 0x01	; 1
    1246:	50 40       	sbci	r21, 0x00	; 0
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	90 93 c1 08 	sts	0x08C1, r25
    124e:	80 93 c0 08 	sts	0x08C0, r24
		tempV = verticeList[z];
    1252:	48 9d       	mul	r20, r8
    1254:	f0 01       	movw	r30, r0
    1256:	49 9d       	mul	r20, r9
    1258:	f0 0d       	add	r31, r0
    125a:	58 9d       	mul	r21, r8
    125c:	f0 0d       	add	r31, r0
    125e:	11 24       	eor	r1, r1
    1260:	d5 01       	movw	r26, r10
    1262:	ee 53       	subi	r30, 0x3E	; 62
    1264:	f7 4f       	sbci	r31, 0xF7	; 247
    1266:	84 e1       	ldi	r24, 0x14	; 20
    1268:	01 90       	ld	r0, Z+
    126a:	0d 92       	st	X+, r0
    126c:	81 50       	subi	r24, 0x01	; 1
    126e:	e1 f7       	brne	.-8      	; 0x1268 <mainFun+0x45a>
    1270:	6b 89       	ldd	r22, Y+19	; 0x13
    1272:	7c 89       	ldd	r23, Y+20	; 0x14
    1274:	d6 01       	movw	r26, r12
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	1e c0       	rjmp	.+60     	; 0x12b8 <mainFun+0x4aa>
		for (i = 0; i < tempV.edgeCount; i++) {
			x = tempV.edgePoints[i];
    127c:	ed 90       	ld	r14, X+
    127e:	fc 90       	ld	r15, X
    1280:	11 97       	sbiw	r26, 0x01	; 1
	}
	return 0;
}

int getOtherSide(int tempE, int tempG) {
	if (edgeList[tempE].endA != tempG) return edgeList[tempE].endA;
    1282:	f7 01       	movw	r30, r14
    1284:	ee 0f       	add	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	c7 01       	movw	r24, r14
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	e8 0f       	add	r30, r24
    1298:	f9 1f       	adc	r31, r25
    129a:	e3 5c       	subi	r30, 0xC3	; 195
    129c:	f9 4f       	sbci	r31, 0xF9	; 249
    129e:	84 81       	ldd	r24, Z+4	; 0x04
    12a0:	95 81       	ldd	r25, Z+5	; 0x05
    12a2:	84 17       	cp	r24, r20
    12a4:	95 07       	cpc	r25, r21
    12a6:	11 f4       	brne	.+4      	; 0x12ac <mainFun+0x49e>
	return edgeList[tempE].endB;
    12a8:	86 81       	ldd	r24, Z+6	; 0x06
    12aa:	97 81       	ldd	r25, Z+7	; 0x07
    12ac:	12 96       	adiw	r26, 0x02	; 2
	while (prevPts[z] != -1) {
		path[pathLen++] = z+1;
		tempV = verticeList[z];
		for (i = 0; i < tempV.edgeCount; i++) {
			x = tempV.edgePoints[i];
			if (getOtherSide(x,z) == prevPts[z]) break;
    12ae:	80 17       	cp	r24, r16
    12b0:	91 07       	cpc	r25, r17
    12b2:	29 f0       	breq	.+10     	; 0x12be <mainFun+0x4b0>
	z = finalDest[x] - 1;
	pathLen = 0;
	while (prevPts[z] != -1) {
		path[pathLen++] = z+1;
		tempV = verticeList[z];
		for (i = 0; i < tempV.edgeCount; i++) {
    12b4:	2f 5f       	subi	r18, 0xFF	; 255
    12b6:	3f 4f       	sbci	r19, 0xFF	; 255
    12b8:	26 17       	cp	r18, r22
    12ba:	37 07       	cpc	r19, r23
    12bc:	fc f2       	brlt	.-66     	; 0x127c <mainFun+0x46e>
			x = tempV.edgePoints[i];
			if (getOtherSide(x,z) == prevPts[z]) break;
		}
		path[pathLen++] = edgeList[x].distance;
    12be:	20 91 c0 08 	lds	r18, 0x08C0
    12c2:	30 91 c1 08 	lds	r19, 0x08C1
    12c6:	d7 01       	movw	r26, r14
    12c8:	aa 0f       	add	r26, r26
    12ca:	bb 1f       	adc	r27, r27
    12cc:	c7 01       	movw	r24, r14
    12ce:	73 e0       	ldi	r23, 0x03	; 3
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	7a 95       	dec	r23
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <mainFun+0x4c2>
    12d8:	a8 0f       	add	r26, r24
    12da:	b9 1f       	adc	r27, r25
    12dc:	a3 5c       	subi	r26, 0xC3	; 195
    12de:	b9 4f       	sbci	r27, 0xF9	; 249
    12e0:	18 96       	adiw	r26, 0x08	; 8
    12e2:	8d 91       	ld	r24, X+
    12e4:	9c 91       	ld	r25, X
    12e6:	19 97       	sbiw	r26, 0x09	; 9
    12e8:	f9 01       	movw	r30, r18
    12ea:	ee 0f       	add	r30, r30
    12ec:	ff 1f       	adc	r31, r31
    12ee:	e7 51       	subi	r30, 0x17	; 23
    12f0:	fa 4f       	sbci	r31, 0xFA	; 250
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24
    12f6:	2f 5f       	subi	r18, 0xFF	; 255
    12f8:	3f 4f       	sbci	r19, 0xFF	; 255
    12fa:	30 93 c1 08 	sts	0x08C1, r19
    12fe:	20 93 c0 08 	sts	0x08C0, r18
		if (z == edgeList[x].endA) path[pathLen++] = edgeList[x].angle + 180;
    1302:	14 96       	adiw	r26, 0x04	; 4
    1304:	8d 91       	ld	r24, X+
    1306:	9c 91       	ld	r25, X
    1308:	15 97       	sbiw	r26, 0x05	; 5
    130a:	48 17       	cp	r20, r24
    130c:	59 07       	cpc	r21, r25
    130e:	c1 f4       	brne	.+48     	; 0x1340 <mainFun+0x532>
    1310:	20 91 c0 08 	lds	r18, 0x08C0
    1314:	30 91 c1 08 	lds	r19, 0x08C1
    1318:	12 96       	adiw	r26, 0x02	; 2
    131a:	8d 91       	ld	r24, X+
    131c:	9c 91       	ld	r25, X
    131e:	13 97       	sbiw	r26, 0x03	; 3
    1320:	8c 54       	subi	r24, 0x4C	; 76
    1322:	9f 4f       	sbci	r25, 0xFF	; 255
    1324:	f9 01       	movw	r30, r18
    1326:	ee 0f       	add	r30, r30
    1328:	ff 1f       	adc	r31, r31
    132a:	e7 51       	subi	r30, 0x17	; 23
    132c:	fa 4f       	sbci	r31, 0xFA	; 250
    132e:	91 83       	std	Z+1, r25	; 0x01
    1330:	80 83       	st	Z, r24
    1332:	2f 5f       	subi	r18, 0xFF	; 255
    1334:	3f 4f       	sbci	r19, 0xFF	; 255
    1336:	30 93 c1 08 	sts	0x08C1, r19
    133a:	20 93 c0 08 	sts	0x08C0, r18
    133e:	14 c0       	rjmp	.+40     	; 0x1368 <mainFun+0x55a>
		else path[pathLen++] = edgeList[x].angle;
    1340:	80 91 c0 08 	lds	r24, 0x08C0
    1344:	90 91 c1 08 	lds	r25, 0x08C1
    1348:	12 96       	adiw	r26, 0x02	; 2
    134a:	2d 91       	ld	r18, X+
    134c:	3c 91       	ld	r19, X
    134e:	13 97       	sbiw	r26, 0x03	; 3
    1350:	fc 01       	movw	r30, r24
    1352:	ee 0f       	add	r30, r30
    1354:	ff 1f       	adc	r31, r31
    1356:	e7 51       	subi	r30, 0x17	; 23
    1358:	fa 4f       	sbci	r31, 0xFA	; 250
    135a:	31 83       	std	Z+1, r19	; 0x01
    135c:	20 83       	st	Z, r18
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	90 93 c1 08 	sts	0x08C1, r25
    1364:	80 93 c0 08 	sts	0x08C0, r24
		if (path[pathLen-1] > 180) path[pathLen-1] -= 360;
    1368:	e0 91 c0 08 	lds	r30, 0x08C0
    136c:	f0 91 c1 08 	lds	r31, 0x08C1
    1370:	ee 0f       	add	r30, r30
    1372:	ff 1f       	adc	r31, r31
    1374:	e9 51       	subi	r30, 0x19	; 25
    1376:	fa 4f       	sbci	r31, 0xFA	; 250
    1378:	80 81       	ld	r24, Z
    137a:	91 81       	ldd	r25, Z+1	; 0x01
    137c:	85 3b       	cpi	r24, 0xB5	; 181
    137e:	91 05       	cpc	r25, r1
    1380:	6c f0       	brlt	.+26     	; 0x139c <mainFun+0x58e>
    1382:	e0 91 c0 08 	lds	r30, 0x08C0
    1386:	f0 91 c1 08 	lds	r31, 0x08C1
    138a:	ee 0f       	add	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	e9 51       	subi	r30, 0x19	; 25
    1390:	fa 4f       	sbci	r31, 0xFA	; 250
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	88 56       	subi	r24, 0x68	; 104
    1398:	91 40       	sbci	r25, 0x01	; 1
    139a:	19 c0       	rjmp	.+50     	; 0x13ce <mainFun+0x5c0>
		else if (path[pathLen-1] <= -180) path[pathLen-1] +=360;
    139c:	e0 91 c0 08 	lds	r30, 0x08C0
    13a0:	f0 91 c1 08 	lds	r31, 0x08C1
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	e9 51       	subi	r30, 0x19	; 25
    13aa:	fa 4f       	sbci	r31, 0xFA	; 250
    13ac:	80 81       	ld	r24, Z
    13ae:	91 81       	ldd	r25, Z+1	; 0x01
    13b0:	8d 54       	subi	r24, 0x4D	; 77
    13b2:	9f 4f       	sbci	r25, 0xFF	; 255
    13b4:	74 f4       	brge	.+28     	; 0x13d2 <mainFun+0x5c4>
    13b6:	e0 91 c0 08 	lds	r30, 0x08C0
    13ba:	f0 91 c1 08 	lds	r31, 0x08C1
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	e9 51       	subi	r30, 0x19	; 25
    13c4:	fa 4f       	sbci	r31, 0xFA	; 250
    13c6:	80 81       	ld	r24, Z
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	88 59       	subi	r24, 0x98	; 152
    13cc:	9e 4f       	sbci	r25, 0xFE	; 254
    13ce:	91 83       	std	Z+1, r25	; 0x01
    13d0:	80 83       	st	Z, r24
		path[pathLen-1] = -path[pathLen-1];
    13d2:	e0 91 c0 08 	lds	r30, 0x08C0
    13d6:	f0 91 c1 08 	lds	r31, 0x08C1
    13da:	a0 91 c0 08 	lds	r26, 0x08C0
    13de:	b0 91 c1 08 	lds	r27, 0x08C1
    13e2:	aa 0f       	add	r26, r26
    13e4:	bb 1f       	adc	r27, r27
    13e6:	a9 51       	subi	r26, 0x19	; 25
    13e8:	ba 4f       	sbci	r27, 0xFA	; 250
    13ea:	8d 91       	ld	r24, X+
    13ec:	9c 91       	ld	r25, X
    13ee:	90 95       	com	r25
    13f0:	81 95       	neg	r24
    13f2:	9f 4f       	sbci	r25, 0xFF	; 255
    13f4:	ee 0f       	add	r30, r30
    13f6:	ff 1f       	adc	r31, r31
    13f8:	e9 51       	subi	r30, 0x19	; 25
    13fa:	fa 4f       	sbci	r31, 0xFA	; 250
    13fc:	91 83       	std	Z+1, r25	; 0x01
    13fe:	80 83       	st	Z, r24
    1400:	a8 01       	movw	r20, r16
		if (dist[finalDest[i]-1] < dist[finalDest[x]-1])
			x = i;
	}
	z = finalDest[x] - 1;
	pathLen = 0;
	while (prevPts[z] != -1) {
    1402:	fa 01       	movw	r30, r20
    1404:	ee 0f       	add	r30, r30
    1406:	ff 1f       	adc	r31, r31
    1408:	e6 0d       	add	r30, r6
    140a:	f7 1d       	adc	r31, r7
    140c:	00 a1       	ldd	r16, Z+32	; 0x20
    140e:	11 a1       	ldd	r17, Z+33	; 0x21
    1410:	ef ef       	ldi	r30, 0xFF	; 255
    1412:	0f 3f       	cpi	r16, 0xFF	; 255
    1414:	1e 07       	cpc	r17, r30
    1416:	09 f0       	breq	.+2      	; 0x141a <mainFun+0x60c>
    1418:	08 cf       	rjmp	.-496    	; 0x122a <mainFun+0x41c>
		if (path[pathLen-1] > 180) path[pathLen-1] -= 360;
		else if (path[pathLen-1] <= -180) path[pathLen-1] +=360;
		path[pathLen-1] = -path[pathLen-1];
		z = prevPts[z];
	}
	path[pathLen++] = src;
    141a:	80 91 c0 08 	lds	r24, 0x08C0
    141e:	90 91 c1 08 	lds	r25, 0x08C1
    1422:	fc 01       	movw	r30, r24
    1424:	ee 0f       	add	r30, r30
    1426:	ff 1f       	adc	r31, r31
    1428:	e7 51       	subi	r30, 0x17	; 23
    142a:	fa 4f       	sbci	r31, 0xFA	; 250
    142c:	c3 5b       	subi	r28, 0xB3	; 179
    142e:	de 4f       	sbci	r29, 0xFE	; 254
    1430:	28 81       	ld	r18, Y
    1432:	39 81       	ldd	r19, Y+1	; 0x01
    1434:	cd 54       	subi	r28, 0x4D	; 77
    1436:	d1 40       	sbci	r29, 0x01	; 1
    1438:	31 83       	std	Z+1, r19	; 0x01
    143a:	20 83       	st	Z, r18
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	90 93 c1 08 	sts	0x08C1, r25
    1442:	80 93 c0 08 	sts	0x08C0, r24
    1446:	00 e0       	ldi	r16, 0x00	; 0
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	27 c0       	rjmp	.+78     	; 0x149a <mainFun+0x68c>
	for (i = 0; i < pathLen/2; i++) {
		x = path[i];
    144c:	d8 01       	movw	r26, r16
    144e:	aa 0f       	add	r26, r26
    1450:	bb 1f       	adc	r27, r27
    1452:	a7 51       	subi	r26, 0x17	; 23
    1454:	ba 4f       	sbci	r27, 0xFA	; 250
    1456:	2d 91       	ld	r18, X+
    1458:	3c 91       	ld	r19, X
    145a:	11 97       	sbiw	r26, 0x01	; 1
		path[i] = path[pathLen-i-1];
    145c:	e0 91 c0 08 	lds	r30, 0x08C0
    1460:	f0 91 c1 08 	lds	r31, 0x08C1
    1464:	31 97       	sbiw	r30, 0x01	; 1
    1466:	e0 1b       	sub	r30, r16
    1468:	f1 0b       	sbc	r31, r17
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	e7 51       	subi	r30, 0x17	; 23
    1470:	fa 4f       	sbci	r31, 0xFA	; 250
    1472:	80 81       	ld	r24, Z
    1474:	91 81       	ldd	r25, Z+1	; 0x01
    1476:	11 96       	adiw	r26, 0x01	; 1
    1478:	9c 93       	st	X, r25
    147a:	8e 93       	st	-X, r24
		path[pathLen-i-1] = x;
    147c:	e0 91 c0 08 	lds	r30, 0x08C0
    1480:	f0 91 c1 08 	lds	r31, 0x08C1
    1484:	31 97       	sbiw	r30, 0x01	; 1
    1486:	e0 1b       	sub	r30, r16
    1488:	f1 0b       	sbc	r31, r17
    148a:	ee 0f       	add	r30, r30
    148c:	ff 1f       	adc	r31, r31
    148e:	e7 51       	subi	r30, 0x17	; 23
    1490:	fa 4f       	sbci	r31, 0xFA	; 250
    1492:	31 83       	std	Z+1, r19	; 0x01
    1494:	20 83       	st	Z, r18
		else if (path[pathLen-1] <= -180) path[pathLen-1] +=360;
		path[pathLen-1] = -path[pathLen-1];
		z = prevPts[z];
	}
	path[pathLen++] = src;
	for (i = 0; i < pathLen/2; i++) {
    1496:	0f 5f       	subi	r16, 0xFF	; 255
    1498:	1f 4f       	sbci	r17, 0xFF	; 255
    149a:	80 91 c0 08 	lds	r24, 0x08C0
    149e:	90 91 c1 08 	lds	r25, 0x08C1
    14a2:	62 e0       	ldi	r22, 0x02	; 2
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__divmodhi4>
    14aa:	06 17       	cp	r16, r22
    14ac:	17 07       	cpc	r17, r23
    14ae:	74 f2       	brlt	.-100    	; 0x144c <mainFun+0x63e>
    14b0:	21 e0       	ldi	r18, 0x01	; 1
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	30 c0       	rjmp	.+96     	; 0x1516 <mainFun+0x708>
		x = path[i];
		path[i] = path[pathLen-i-1];
		path[pathLen-i-1] = x;
	}
	for (i = 1; i < pathLen; i+=3) {
		x = path[i];
    14b6:	f9 01       	movw	r30, r18
    14b8:	ee 0f       	add	r30, r30
    14ba:	ff 1f       	adc	r31, r31
    14bc:	e7 51       	subi	r30, 0x17	; 23
    14be:	fa 4f       	sbci	r31, 0xFA	; 250
    14c0:	40 81       	ld	r20, Z
    14c2:	51 81       	ldd	r21, Z+1	; 0x01
		path[i] -= compass;
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	c1 5b       	subi	r28, 0xB1	; 177
    14ca:	de 4f       	sbci	r29, 0xFE	; 254
    14cc:	68 81       	ld	r22, Y
    14ce:	79 81       	ldd	r23, Y+1	; 0x01
    14d0:	cf 54       	subi	r28, 0x4F	; 79
    14d2:	d1 40       	sbci	r29, 0x01	; 1
    14d4:	86 1b       	sub	r24, r22
    14d6:	97 0b       	sbc	r25, r23
    14d8:	91 83       	std	Z+1, r25	; 0x01
    14da:	80 83       	st	Z, r24
		if (path[i] >= 180) path[i] -= 360;
    14dc:	80 81       	ld	r24, Z
    14de:	91 81       	ldd	r25, Z+1	; 0x01
    14e0:	84 3b       	cpi	r24, 0xB4	; 180
    14e2:	91 05       	cpc	r25, r1
    14e4:	2c f0       	brlt	.+10     	; 0x14f0 <mainFun+0x6e2>
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	88 56       	subi	r24, 0x68	; 104
    14ec:	91 40       	sbci	r25, 0x01	; 1
    14ee:	09 c0       	rjmp	.+18     	; 0x1502 <mainFun+0x6f4>
		else if (path[i] <= -180) path[i] += 360;
    14f0:	80 81       	ld	r24, Z
    14f2:	91 81       	ldd	r25, Z+1	; 0x01
    14f4:	8d 54       	subi	r24, 0x4D	; 77
    14f6:	9f 4f       	sbci	r25, 0xFF	; 255
    14f8:	34 f4       	brge	.+12     	; 0x1506 <mainFun+0x6f8>
    14fa:	80 81       	ld	r24, Z
    14fc:	91 81       	ldd	r25, Z+1	; 0x01
    14fe:	88 59       	subi	r24, 0x98	; 152
    1500:	9e 4f       	sbci	r25, 0xFE	; 254
    1502:	91 83       	std	Z+1, r25	; 0x01
    1504:	80 83       	st	Z, r24
	for (i = 0; i < pathLen/2; i++) {
		x = path[i];
		path[i] = path[pathLen-i-1];
		path[pathLen-i-1] = x;
	}
	for (i = 1; i < pathLen; i+=3) {
    1506:	2d 5f       	subi	r18, 0xFD	; 253
    1508:	3f 4f       	sbci	r19, 0xFF	; 255
    150a:	c1 5b       	subi	r28, 0xB1	; 177
    150c:	de 4f       	sbci	r29, 0xFE	; 254
    150e:	59 83       	std	Y+1, r21	; 0x01
    1510:	48 83       	st	Y, r20
    1512:	cf 54       	subi	r28, 0x4F	; 79
    1514:	d1 40       	sbci	r29, 0x01	; 1
    1516:	80 91 c0 08 	lds	r24, 0x08C0
    151a:	90 91 c1 08 	lds	r25, 0x08C1
    151e:	28 17       	cp	r18, r24
    1520:	39 07       	cpc	r19, r25
    1522:	4c f2       	brlt	.-110    	; 0x14b6 <mainFun+0x6a8>
		path[i] -= compass;
		if (path[i] >= 180) path[i] -= 360;
		else if (path[i] <= -180) path[i] += 360;
		compass = x;
	}
}
    1524:	c0 5b       	subi	r28, 0xB0	; 176
    1526:	de 4f       	sbci	r29, 0xFE	; 254
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	df 90       	pop	r13
    1540:	cf 90       	pop	r12
    1542:	bf 90       	pop	r11
    1544:	af 90       	pop	r10
    1546:	9f 90       	pop	r9
    1548:	8f 90       	pop	r8
    154a:	7f 90       	pop	r7
    154c:	6f 90       	pop	r6
    154e:	5f 90       	pop	r5
    1550:	4f 90       	pop	r4
    1552:	3f 90       	pop	r3
    1554:	2f 90       	pop	r2
    1556:	08 95       	ret

00001558 <printLCD1>:
	lcd_print(1,13,djFlag,3);
	//lcd_print (2,13,distance_Sharp,3);
	return djFlag;
}

void printLCD1(int a,int b,int c) {
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	9c 01       	movw	r18, r24
    1562:	8b 01       	movw	r16, r22
    1564:	ea 01       	movw	r28, r20
	lcd_print(1,1,a,2);
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	a9 01       	movw	r20, r18
    156c:	22 e0       	ldi	r18, 0x02	; 2
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	lcd_print(1,4,b,2);
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	64 e0       	ldi	r22, 0x04	; 4
    1578:	a8 01       	movw	r20, r16
    157a:	22 e0       	ldi	r18, 0x02	; 2
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	if (c>=0) lcd_print(1,7,c,3);
    1582:	d7 fd       	sbrc	r29, 7
    1584:	04 c0       	rjmp	.+8      	; 0x158e <printLCD1+0x36>
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	67 e0       	ldi	r22, 0x07	; 7
    158a:	ae 01       	movw	r20, r28
    158c:	06 c0       	rjmp	.+12     	; 0x159a <printLCD1+0x42>
	else lcd_print(1,7,-c,3);
    158e:	44 27       	eor	r20, r20
    1590:	55 27       	eor	r21, r21
    1592:	4c 1b       	sub	r20, r28
    1594:	5d 0b       	sbc	r21, r29
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	67 e0       	ldi	r22, 0x07	; 7
    159a:	23 e0       	ldi	r18, 0x03	; 3
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
}
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	08 95       	ret

000015ac <printLCD2>:

void printLCD2(int a,int b,int c) {
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	9c 01       	movw	r18, r24
    15b6:	eb 01       	movw	r28, r22
    15b8:	8a 01       	movw	r16, r20
	lcd_print(2,1,a,3);
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	61 e0       	ldi	r22, 0x01	; 1
    15be:	a9 01       	movw	r20, r18
    15c0:	23 e0       	ldi	r18, 0x03	; 3
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	if (b>=0) lcd_print(2,5,b,3);
    15c8:	d7 fd       	sbrc	r29, 7
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <printLCD2+0x28>
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	65 e0       	ldi	r22, 0x05	; 5
    15d0:	ae 01       	movw	r20, r28
    15d2:	06 c0       	rjmp	.+12     	; 0x15e0 <printLCD2+0x34>
	else lcd_print(2,5,-b,3);
    15d4:	44 27       	eor	r20, r20
    15d6:	55 27       	eor	r21, r21
    15d8:	4c 1b       	sub	r20, r28
    15da:	5d 0b       	sbc	r21, r29
    15dc:	82 e0       	ldi	r24, 0x02	; 2
    15de:	65 e0       	ldi	r22, 0x05	; 5
    15e0:	23 e0       	ldi	r18, 0x03	; 3
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	if (c>=0) lcd_print(2,9,c,3);
    15e8:	17 fd       	sbrc	r17, 7
    15ea:	04 c0       	rjmp	.+8      	; 0x15f4 <printLCD2+0x48>
    15ec:	82 e0       	ldi	r24, 0x02	; 2
    15ee:	69 e0       	ldi	r22, 0x09	; 9
    15f0:	a8 01       	movw	r20, r16
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <printLCD2+0x54>
	else lcd_print(2,9,-c,3);
    15f4:	44 27       	eor	r20, r20
    15f6:	55 27       	eor	r21, r21
    15f8:	40 1b       	sub	r20, r16
    15fa:	51 0b       	sbc	r21, r17
    15fc:	82 e0       	ldi	r24, 0x02	; 2
    15fe:	69 e0       	ldi	r22, 0x09	; 9
    1600:	23 e0       	ldi	r18, 0x03	; 3
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
}
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	08 95       	ret

00001612 <beep>:
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
}
void buzzer_on(void)
{
	
	PORTC= 0x08;   // pin 3 to high 0000 1000
    1612:	88 e0       	ldi	r24, 0x08	; 8
    1614:	88 b9       	out	0x08, r24	; 8
    1616:	88 e8       	ldi	r24, 0x88	; 136
    1618:	93 e1       	ldi	r25, 0x13	; 19
    161a:	20 e7       	ldi	r18, 0x70	; 112
    161c:	31 e0       	ldi	r19, 0x01	; 1
    161e:	f9 01       	movw	r30, r18
    1620:	31 97       	sbiw	r30, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <beep+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1624:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1626:	d9 f7       	brne	.-10     	; 0x161e <beep+0xc>
	PORTC=PORTC & 0xF7;

}
void buzzer_off(void)
{
	PORTC= 0x00;
    1628:	18 b8       	out	0x08, r1	; 8
    162a:	88 e8       	ldi	r24, 0x88	; 136
    162c:	93 e1       	ldi	r25, 0x13	; 19
    162e:	20 e7       	ldi	r18, 0x70	; 112
    1630:	31 e0       	ldi	r19, 0x01	; 1
    1632:	f9 01       	movw	r30, r18
    1634:	31 97       	sbiw	r30, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <beep+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1638:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163a:	d9 f7       	brne	.-10     	; 0x1632 <beep+0x20>
{
		buzzer_on();
		_delay_ms(500);
		buzzer_off();
		_delay_ms(500);
}
    163c:	08 95       	ret

0000163e <Sharp_dist>:
}
unsigned int Sharp_dist(unsigned char adc_reading)
{
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	a0 e0       	ldi	r26, 0x00	; 0
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	bc 01       	movw	r22, r24
    1646:	cd 01       	movw	r24, r26
    1648:	0e 94 1f 13 	call	0x263e	; 0x263e <__floatunsisf>
    164c:	2f ee       	ldi	r18, 0xEF	; 239
    164e:	39 ec       	ldi	r19, 0xC9	; 201
    1650:	43 e9       	ldi	r20, 0x93	; 147
    1652:	5f e3       	ldi	r21, 0x3F	; 63
    1654:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <pow>
    1658:	9b 01       	movw	r18, r22
    165a:	ac 01       	movw	r20, r24
	distanceInt = (int)distance;
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	80 e8       	ldi	r24, 0x80	; 128
    1662:	9f e3       	ldi	r25, 0x3F	; 63
    1664:	0e 94 91 11 	call	0x2322	; 0x2322 <__divsf3>
    1668:	2a e9       	ldi	r18, 0x9A	; 154
    166a:	39 ef       	ldi	r19, 0xF9	; 249
    166c:	4e e2       	ldi	r20, 0x2E	; 46
    166e:	55 e4       	ldi	r21, 0x45	; 69
    1670:	0e 94 97 10 	call	0x212e	; 0x212e <__mulsf3>
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e2       	ldi	r20, 0x20	; 32
    167a:	51 e4       	ldi	r21, 0x41	; 65
    167c:	0e 94 97 10 	call	0x212e	; 0x212e <__mulsf3>
    1680:	0e 94 cb 12 	call	0x2596	; 0x2596 <__fixsfsi>
    1684:	88 27       	eor	r24, r24
    1686:	77 fd       	sbrc	r23, 7
    1688:	80 95       	com	r24
    168a:	98 2f       	mov	r25, r24
    168c:	0e 94 6d 12 	call	0x24da	; 0x24da <__floatsisf>
    1690:	0e 94 cb 12 	call	0x2596	; 0x2596 <__fixsfsi>
    1694:	9b 01       	movw	r18, r22
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	61 32       	cpi	r22, 0x21	; 33
    169a:	78 07       	cpc	r23, r24
    169c:	10 f0       	brcs	.+4      	; 0x16a2 <Sharp_dist+0x64>
    169e:	20 e2       	ldi	r18, 0x20	; 32
    16a0:	33 e0       	ldi	r19, 0x03	; 3
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
}
    16a2:	c9 01       	movw	r24, r18
    16a4:	08 95       	ret

000016a6 <printNsetDJ>:
#include "header.h"
#include "graph.h"

int printNsetDJ(void)
{
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
	int djFlag=0,Sharp;
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    16aa:	83 e0       	ldi	r24, 0x03	; 3
    16ac:	0e 94 63 04 	call	0x8c6	; 0x8c6 <ADC_Conversion>
    16b0:	80 93 d8 05 	sts	0x05D8, r24
	Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    16b4:	82 e0       	ldi	r24, 0x02	; 2
    16b6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <ADC_Conversion>
    16ba:	80 93 d9 05 	sts	0x05D9, r24
	Right_white_line = ADC_Conversion(1); //Getting data of Right WL Sensor
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <ADC_Conversion>
    16c4:	80 93 da 05 	sts	0x05DA, r24
	Sharp=ADC_Conversion(11);
    16c8:	8b e0       	ldi	r24, 0x0B	; 11
    16ca:	0e 94 63 04 	call	0x8c6	; 0x8c6 <ADC_Conversion>
	djFlag = 0;
	distance_Sharp=Sharp_dist(Sharp); 
    16ce:	0e 94 1f 0b 	call	0x163e	; 0x163e <Sharp_dist>
    16d2:	90 93 e8 05 	sts	0x05E8, r25
    16d6:	80 93 e7 05 	sts	0x05E7, r24
	if (Left_white_line>THRESHOLD) djFlag = 100;
    16da:	80 91 d8 05 	lds	r24, 0x05D8
    16de:	85 31       	cpi	r24, 0x15	; 21
    16e0:	18 f0       	brcs	.+6      	; 0x16e8 <printNsetDJ+0x42>
    16e2:	c4 e6       	ldi	r28, 0x64	; 100
    16e4:	d0 e0       	ldi	r29, 0x00	; 0
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <printNsetDJ+0x46>
    16e8:	c0 e0       	ldi	r28, 0x00	; 0
    16ea:	d0 e0       	ldi	r29, 0x00	; 0
	if (Center_white_line>THRESHOLD) djFlag += 10;
    16ec:	80 91 d9 05 	lds	r24, 0x05D9
    16f0:	85 31       	cpi	r24, 0x15	; 21
    16f2:	08 f0       	brcs	.+2      	; 0x16f6 <printNsetDJ+0x50>
    16f4:	2a 96       	adiw	r28, 0x0a	; 10
	if (Right_white_line>THRESHOLD) djFlag +=1;
    16f6:	80 91 da 05 	lds	r24, 0x05DA
    16fa:	85 31       	cpi	r24, 0x15	; 21
    16fc:	08 f0       	brcs	.+2      	; 0x1700 <printNsetDJ+0x5a>
    16fe:	21 96       	adiw	r28, 0x01	; 1
	lcd_print(1,13,djFlag,3);
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	6d e0       	ldi	r22, 0x0D	; 13
    1704:	ae 01       	movw	r20, r28
    1706:	23 e0       	ldi	r18, 0x03	; 3
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
	//lcd_print (2,13,distance_Sharp,3);
	return djFlag;
}
    170e:	ce 01       	movw	r24, r28
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <main>:
		_delay_ms(500);
		buzzer_off();
		_delay_ms(500);
}
int main(void)
{
    1716:	2f 92       	push	r2
    1718:	3f 92       	push	r3
    171a:	4f 92       	push	r4
    171c:	5f 92       	push	r5
    171e:	6f 92       	push	r6
    1720:	7f 92       	push	r7
    1722:	8f 92       	push	r8
    1724:	9f 92       	push	r9
    1726:	af 92       	push	r10
    1728:	bf 92       	push	r11
    172a:	cf 92       	push	r12
    172c:	df 92       	push	r13
    172e:	ef 92       	push	r14
    1730:	ff 92       	push	r15
    1732:	0f 93       	push	r16
    1734:	1f 93       	push	r17
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	64 97       	sbiw	r28, 0x14	; 20
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
	int djFlag,compass = 0, rotA, arr[10] = {1,7,29,26,18,24,13,30,16,20},ii,last = 1, shFlag = 0, i, reqd;
    174a:	de 01       	movw	r26, r28
    174c:	11 96       	adiw	r26, 0x01	; 1
    174e:	e0 e0       	ldi	r30, 0x00	; 0
    1750:	f2 e0       	ldi	r31, 0x02	; 2
    1752:	84 e1       	ldi	r24, 0x14	; 20
    1754:	01 90       	ld	r0, Z+
    1756:	0d 92       	st	X+, r0
    1758:	81 50       	subi	r24, 0x01	; 1
    175a:	e1 f7       	brne	.-8      	; 0x1754 <main+0x3e>
	init_devices();
    175c:	0e 94 18 04 	call	0x830	; 0x830 <init_devices>
	init_graph();
    1760:	0e 94 0e 06 	call	0xc1c	; 0xc1c <init_graph>
	lcd_set_4bit();
    1764:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
	lcd_init();
    1768:	0e 94 29 01 	call	0x252	; 0x252 <lcd_init>
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
}
void buzzer_on(void)
{
	
	PORTC= 0x08;   // pin 3 to high 0000 1000
    176c:	88 e0       	ldi	r24, 0x08	; 8
    176e:	88 b9       	out	0x08, r24	; 8
    1770:	88 e8       	ldi	r24, 0x88	; 136
    1772:	93 e1       	ldi	r25, 0x13	; 19
    1774:	20 e7       	ldi	r18, 0x70	; 112
    1776:	31 e0       	ldi	r19, 0x01	; 1
    1778:	f9 01       	movw	r30, r18
    177a:	31 97       	sbiw	r30, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <main+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1780:	d9 f7       	brne	.-10     	; 0x1778 <main+0x62>
	PORTC=PORTC & 0xF7;

}
void buzzer_off(void)
{
	PORTC= 0x00;
    1782:	18 b8       	out	0x08, r1	; 8
    1784:	88 e8       	ldi	r24, 0x88	; 136
    1786:	93 e1       	ldi	r25, 0x13	; 19
    1788:	20 e7       	ldi	r18, 0x70	; 112
    178a:	31 e0       	ldi	r19, 0x01	; 1
    178c:	f9 01       	movw	r30, r18
    178e:	31 97       	sbiw	r30, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <main+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1792:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1794:	d9 f7       	brne	.-10     	; 0x178c <main+0x76>
    1796:	88 24       	eor	r8, r8
    1798:	99 24       	eor	r9, r9
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	68 2e       	mov	r6, r24
    179e:	71 2c       	mov	r7, r1
    17a0:	01 e0       	ldi	r16, 0x01	; 1
    17a2:	20 2e       	mov	r2, r16
    17a4:	31 2c       	mov	r3, r1
    17a6:	ee 24       	eor	r14, r14
    17a8:	ff 24       	eor	r15, r15
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	//lcd_print(2,1,left,3);
	//lcd_print(2,5,right,3);
	OCR5AL = (unsigned char) left;
    17aa:	18 ec       	ldi	r17, 0xC8	; 200
    17ac:	51 2e       	mov	r5, r17
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
}
void buzzer_on(void)
{
	
	PORTC= 0x08;   // pin 3 to high 0000 1000
    17ae:	b8 e0       	ldi	r27, 0x08	; 8
    17b0:	4b 2e       	mov	r4, r27
	beep();//Beep
	for (ii = 1; ii < 10; ii++) {
		mainFun(last,arr[ii],compass);
    17b2:	f3 01       	movw	r30, r6
    17b4:	ee 0f       	add	r30, r30
    17b6:	ff 1f       	adc	r31, r31
    17b8:	21 e0       	ldi	r18, 0x01	; 1
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	2c 0f       	add	r18, r28
    17be:	3d 1f       	adc	r19, r29
    17c0:	e2 0f       	add	r30, r18
    17c2:	f3 1f       	adc	r31, r19
    17c4:	00 81       	ld	r16, Z
    17c6:	11 81       	ldd	r17, Z+1	; 0x01
    17c8:	c1 01       	movw	r24, r2
    17ca:	b8 01       	movw	r22, r16
    17cc:	a4 01       	movw	r20, r8
    17ce:	0e 94 07 07 	call	0xe0e	; 0xe0e <mainFun>
		printLCD1(last,arr[ii],compass);
    17d2:	c1 01       	movw	r24, r2
    17d4:	b8 01       	movw	r22, r16
    17d6:	a4 01       	movw	r20, r8
    17d8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <printLCD1>
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	//lcd_print(2,1,left,3);
	//lcd_print(2,5,right,3);
	OCR5AL = (unsigned char) left;
    17dc:	50 92 28 01 	sts	0x0128, r5
	OCR5BL = (unsigned char) right;
    17e0:	50 92 2a 01 	sts	0x012A, r5
    17e4:	cc 24       	eor	r12, r12
    17e6:	dd 24       	eor	r13, r13
    17e8:	64 c2       	rjmp	.+1224   	; 0x1cb2 <main+0x59c>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    17ea:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    17ec:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    17ee:	82 b9       	out	0x02, r24	; 2
    17f0:	88 e9       	ldi	r24, 0x98	; 152
    17f2:	9a e3       	ldi	r25, 0x3A	; 58
    17f4:	e0 e7       	ldi	r30, 0x70	; 112
    17f6:	f1 e0       	ldi	r31, 0x01	; 1
    17f8:	31 97       	sbiw	r30, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <main+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fe:	d1 f7       	brne	.-12     	; 0x17f4 <main+0xde>
		velocity(MAX_VEL,MAX_VEL);    // Set the speed to max velocity
		for (i = 0; i < pathLen - 1; i+=3) {
			stop();
			_delay_ms(1500);
			printLCD2(path[i],path[i+1],compass);
    1800:	f6 01       	movw	r30, r12
    1802:	ee 0f       	add	r30, r30
    1804:	ff 1f       	adc	r31, r31
    1806:	e7 51       	subi	r30, 0x17	; 23
    1808:	fa 4f       	sbci	r31, 0xFA	; 250
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
		_delay_ms(500);
		buzzer_off();
		_delay_ms(500);
}
int main(void)
{
    180e:	76 01       	movw	r14, r12
    1810:	08 94       	sec
    1812:	e1 1c       	adc	r14, r1
    1814:	f1 1c       	adc	r15, r1
		printLCD1(last,arr[ii],compass);
		velocity(MAX_VEL,MAX_VEL);    // Set the speed to max velocity
		for (i = 0; i < pathLen - 1; i+=3) {
			stop();
			_delay_ms(1500);
			printLCD2(path[i],path[i+1],compass);
    1816:	87 01       	movw	r16, r14
    1818:	00 0f       	add	r16, r16
    181a:	11 1f       	adc	r17, r17
    181c:	07 51       	subi	r16, 0x17	; 23
    181e:	1a 4f       	sbci	r17, 0xFA	; 250
    1820:	f8 01       	movw	r30, r16
    1822:	60 81       	ld	r22, Z
    1824:	71 81       	ldd	r23, Z+1	; 0x01
    1826:	a4 01       	movw	r20, r8
    1828:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <printLCD2>

			//You're at node, rotate an angle


			lcd_print(2,13,1,1);
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	6d e0       	ldi	r22, 0x0D	; 13
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	50 e0       	ldi	r21, 0x00	; 0
    1834:	21 e0       	ldi	r18, 0x01	; 1
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    183c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    183e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1840:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1842:	82 b9       	out	0x02, r24	; 2
			reqd = 8;
			shFlag = 0; 
			forward();
			//forward_mm(40);
			if (path[i+1] == 0) forward_mm(40);
    1844:	f8 01       	movw	r30, r16
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	89 2b       	or	r24, r25
    184c:	19 f4       	brne	.+6      	; 0x1854 <main+0x13e>
    184e:	88 e2       	ldi	r24, 0x28	; 40
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	07 c0       	rjmp	.+14     	; 0x1862 <main+0x14c>
			else if (path[i+1] <= 20) forward_mm(20);
    1854:	f8 01       	movw	r30, r16
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	45 97       	sbiw	r24, 0x15	; 21
    185c:	2c f4       	brge	.+10     	; 0x1868 <main+0x152>
    185e:	84 e1       	ldi	r24, 0x14	; 20
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 94 a9 03 	call	0x752	; 0x752 <forward_mm>
    1866:	59 c0       	rjmp	.+178    	; 0x191a <main+0x204>
			else {
				ShaftCountLeft = ShaftCountRight = 0;
    1868:	10 92 df 05 	sts	0x05DF, r1
    186c:	10 92 e0 05 	sts	0x05E0, r1
    1870:	10 92 e1 05 	sts	0x05E1, r1
    1874:	10 92 e2 05 	sts	0x05E2, r1
    1878:	80 91 df 05 	lds	r24, 0x05DF
    187c:	90 91 e0 05 	lds	r25, 0x05E0
    1880:	a0 91 e1 05 	lds	r26, 0x05E1
    1884:	b0 91 e2 05 	lds	r27, 0x05E2
    1888:	80 93 db 05 	sts	0x05DB, r24
    188c:	90 93 dc 05 	sts	0x05DC, r25
    1890:	a0 93 dd 05 	sts	0x05DD, r26
    1894:	b0 93 de 05 	sts	0x05DE, r27
				while (1) {
					if ( (ShaftCountLeft > reqd) | (ShaftCountRight > reqd) )
    1898:	80 91 db 05 	lds	r24, 0x05DB
    189c:	90 91 dc 05 	lds	r25, 0x05DC
    18a0:	a0 91 dd 05 	lds	r26, 0x05DD
    18a4:	b0 91 de 05 	lds	r27, 0x05DE
    18a8:	20 91 df 05 	lds	r18, 0x05DF
    18ac:	30 91 e0 05 	lds	r19, 0x05E0
    18b0:	40 91 e1 05 	lds	r20, 0x05E1
    18b4:	50 91 e2 05 	lds	r21, 0x05E2
    18b8:	09 97       	sbiw	r24, 0x09	; 9
    18ba:	a1 05       	cpc	r26, r1
    18bc:	b1 05       	cpc	r27, r1
    18be:	68 f5       	brcc	.+90     	; 0x191a <main+0x204>
    18c0:	29 30       	cpi	r18, 0x09	; 9
    18c2:	31 05       	cpc	r19, r1
    18c4:	41 05       	cpc	r20, r1
    18c6:	51 05       	cpc	r21, r1
    18c8:	40 f5       	brcc	.+80     	; 0x191a <main+0x204>
						break;
					djFlag = printNsetDJ();
    18ca:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <printNsetDJ>
					switch (djFlag) {
    18ce:	8b 30       	cpi	r24, 0x0B	; 11
    18d0:	91 05       	cpc	r25, r1
    18d2:	b1 f0       	breq	.+44     	; 0x1900 <main+0x1ea>
    18d4:	8c 30       	cpi	r24, 0x0C	; 12
    18d6:	91 05       	cpc	r25, r1
    18d8:	4c f4       	brge	.+18     	; 0x18ec <main+0x1d6>
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	91 05       	cpc	r25, r1
    18de:	81 f0       	breq	.+32     	; 0x1900 <main+0x1ea>
    18e0:	8a 30       	cpi	r24, 0x0A	; 10
    18e2:	91 05       	cpc	r25, r1
    18e4:	a9 f0       	breq	.+42     	; 0x1910 <main+0x1fa>
    18e6:	89 2b       	or	r24, r25
    18e8:	99 f0       	breq	.+38     	; 0x1910 <main+0x1fa>
    18ea:	d6 cf       	rjmp	.-84     	; 0x1898 <main+0x182>
    18ec:	8e 36       	cpi	r24, 0x6E	; 110
    18ee:	91 05       	cpc	r25, r1
    18f0:	61 f0       	breq	.+24     	; 0x190a <main+0x1f4>
    18f2:	8f 36       	cpi	r24, 0x6F	; 111
    18f4:	91 05       	cpc	r25, r1
    18f6:	61 f0       	breq	.+24     	; 0x1910 <main+0x1fa>
    18f8:	84 36       	cpi	r24, 0x64	; 100
    18fa:	91 05       	cpc	r25, r1
    18fc:	69 f6       	brne	.-102    	; 0x1898 <main+0x182>
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <main+0x1f4>
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	//lcd_print(2,1,left,3);
	//lcd_print(2,5,right,3);
	OCR5AL = (unsigned char) left;
    1900:	50 92 28 01 	sts	0x0128, r5
	OCR5BL = (unsigned char) right;
    1904:	10 92 2a 01 	sts	0x012A, r1
    1908:	c7 cf       	rjmp	.-114    	; 0x1898 <main+0x182>
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	//lcd_print(2,1,left,3);
	//lcd_print(2,5,right,3);
	OCR5AL = (unsigned char) left;
    190a:	10 92 28 01 	sts	0x0128, r1
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <main+0x1fe>
	OCR5BL = (unsigned char) right;
    1910:	50 92 28 01 	sts	0x0128, r5
    1914:	50 92 2a 01 	sts	0x012A, r5
    1918:	bf cf       	rjmp	.-130    	; 0x1898 <main+0x182>
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	//lcd_print(2,1,left,3);
	//lcd_print(2,5,right,3);
	OCR5AL = (unsigned char) left;
    191a:	50 92 28 01 	sts	0x0128, r5
	OCR5BL = (unsigned char) right;
    191e:	50 92 2a 01 	sts	0x012A, r5
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1922:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1924:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1926:	82 b9       	out	0x02, r24	; 2
				}
			}
			velocity(MAX_VEL,MAX_VEL);
			stop();
			//Angle depends on battery charge & light conditions
			if (path[i+1] <= 90 && path[i+1] >= -90) rotA = path[i+1]*2/5;
    1928:	f7 01       	movw	r30, r14
    192a:	ee 0f       	add	r30, r30
    192c:	ff 1f       	adc	r31, r31
    192e:	e7 51       	subi	r30, 0x17	; 23
    1930:	fa 4f       	sbci	r31, 0xFA	; 250
    1932:	80 81       	ld	r24, Z
    1934:	91 81       	ldd	r25, Z+1	; 0x01
    1936:	8b 35       	cpi	r24, 0x5B	; 91
    1938:	91 05       	cpc	r25, r1
    193a:	64 f4       	brge	.+24     	; 0x1954 <main+0x23e>
    193c:	80 81       	ld	r24, Z
    193e:	91 81       	ldd	r25, Z+1	; 0x01
    1940:	86 5a       	subi	r24, 0xA6	; 166
    1942:	9f 4f       	sbci	r25, 0xFF	; 255
    1944:	3c f0       	brlt	.+14     	; 0x1954 <main+0x23e>
    1946:	80 81       	ld	r24, Z
    1948:	91 81       	ldd	r25, Z+1	; 0x01
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	65 e0       	ldi	r22, 0x05	; 5
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	0b c0       	rjmp	.+22     	; 0x196a <main+0x254>
			else rotA = path[i+1]*2/3;
    1954:	f7 01       	movw	r30, r14
    1956:	ee 0f       	add	r30, r30
    1958:	ff 1f       	adc	r31, r31
    195a:	e7 51       	subi	r30, 0x17	; 23
    195c:	fa 4f       	sbci	r31, 0xFA	; 250
    195e:	80 81       	ld	r24, Z
    1960:	91 81       	ldd	r25, Z+1	; 0x01
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	63 e0       	ldi	r22, 0x03	; 3
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__divmodhi4>
			//_delay_ms(500);
			if (path[i+1]>20) right_degrees(rotA);
    196e:	f7 01       	movw	r30, r14
    1970:	ee 0f       	add	r30, r30
    1972:	ff 1f       	adc	r31, r31
    1974:	e7 51       	subi	r30, 0x17	; 23
    1976:	fa 4f       	sbci	r31, 0xFA	; 250
    1978:	80 81       	ld	r24, Z
    197a:	91 81       	ldd	r25, Z+1	; 0x01
    197c:	45 97       	sbiw	r24, 0x15	; 21
    197e:	24 f0       	brlt	.+8      	; 0x1988 <main+0x272>
    1980:	cb 01       	movw	r24, r22
    1982:	0e 94 be 03 	call	0x77c	; 0x77c <right_degrees>
    1986:	0b c0       	rjmp	.+22     	; 0x199e <main+0x288>
			else if (path[i+1]<-20) left_degrees(-rotA);
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	8c 5e       	subi	r24, 0xEC	; 236
    198e:	9f 4f       	sbci	r25, 0xFF	; 255
    1990:	34 f4       	brge	.+12     	; 0x199e <main+0x288>
    1992:	88 27       	eor	r24, r24
    1994:	99 27       	eor	r25, r25
    1996:	86 1b       	sub	r24, r22
    1998:	97 0b       	sbc	r25, r23
    199a:	0e 94 b7 03 	call	0x76e	; 0x76e <left_degrees>
			//_delay_ms(1000);
			do {
				djFlag = printNsetDJ();
				if (path[i+1]>20) right_degrees(5);
    199e:	87 01       	movw	r16, r14
    19a0:	00 0f       	add	r16, r16
    19a2:	11 1f       	adc	r17, r17
    19a4:	07 51       	subi	r16, 0x17	; 23
    19a6:	1a 4f       	sbci	r17, 0xFA	; 250
			//_delay_ms(500);
			if (path[i+1]>20) right_degrees(rotA);
			else if (path[i+1]<-20) left_degrees(-rotA);
			//_delay_ms(1000);
			do {
				djFlag = printNsetDJ();
    19a8:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <printNsetDJ>
    19ac:	5c 01       	movw	r10, r24
				if (path[i+1]>20) right_degrees(5);
    19ae:	f8 01       	movw	r30, r16
    19b0:	80 81       	ld	r24, Z
    19b2:	91 81       	ldd	r25, Z+1	; 0x01
    19b4:	45 97       	sbiw	r24, 0x15	; 21
    19b6:	2c f0       	brlt	.+10     	; 0x19c2 <main+0x2ac>
    19b8:	85 e0       	ldi	r24, 0x05	; 5
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 be 03 	call	0x77c	; 0x77c <right_degrees>
    19c0:	0a c0       	rjmp	.+20     	; 0x19d6 <main+0x2c0>
				else if (path[i+1]<-20) left_degrees(5);
    19c2:	f8 01       	movw	r30, r16
    19c4:	80 81       	ld	r24, Z
    19c6:	91 81       	ldd	r25, Z+1	; 0x01
    19c8:	8c 5e       	subi	r24, 0xEC	; 236
    19ca:	9f 4f       	sbci	r25, 0xFF	; 255
    19cc:	84 f4       	brge	.+32     	; 0x19ee <main+0x2d8>
    19ce:	85 e0       	ldi	r24, 0x05	; 5
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 b7 03 	call	0x76e	; 0x76e <left_degrees>
				else break;
			} while ( ((djFlag/10)%10) !=1 );
    19d6:	c5 01       	movw	r24, r10
    19d8:	6a e0       	ldi	r22, 0x0A	; 10
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__divmodhi4>
    19e0:	cb 01       	movw	r24, r22
    19e2:	6a e0       	ldi	r22, 0x0A	; 10
    19e4:	70 e0       	ldi	r23, 0x00	; 0
    19e6:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__divmodhi4>
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	e9 f6       	brne	.-70     	; 0x19a8 <main+0x292>
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	//lcd_print(2,1,left,3);
	//lcd_print(2,5,right,3);
	OCR5AL = (unsigned char) left;
    19ee:	50 92 28 01 	sts	0x0128, r5
	OCR5BL = (unsigned char) right;
    19f2:	50 92 2a 01 	sts	0x012A, r5
			velocity(MAX_VEL,MAX_VEL);

			//Update compass

			lcd_print(2,13,2,1);
    19f6:	82 e0       	ldi	r24, 0x02	; 2
    19f8:	6d e0       	ldi	r22, 0x0D	; 13
    19fa:	42 e0       	ldi	r20, 0x02	; 2
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	21 e0       	ldi	r18, 0x01	; 1
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
			compass += path[i+1];
    1a06:	f7 01       	movw	r30, r14
    1a08:	ee 0f       	add	r30, r30
    1a0a:	ff 1f       	adc	r31, r31
    1a0c:	e7 51       	subi	r30, 0x17	; 23
    1a0e:	fa 4f       	sbci	r31, 0xFA	; 250
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	88 0e       	add	r8, r24
    1a16:	99 1e       	adc	r9, r25
			if (compass > 180) compass -= 360;
    1a18:	25 eb       	ldi	r18, 0xB5	; 181
    1a1a:	82 16       	cp	r8, r18
    1a1c:	91 04       	cpc	r9, r1
    1a1e:	2c f0       	brlt	.+10     	; 0x1a2a <main+0x314>
    1a20:	88 e9       	ldi	r24, 0x98	; 152
    1a22:	9e ef       	ldi	r25, 0xFE	; 254
    1a24:	88 0e       	add	r8, r24
    1a26:	99 1e       	adc	r9, r25
    1a28:	09 c0       	rjmp	.+18     	; 0x1a3c <main+0x326>
			if (compass < -180) compass += 360;
    1a2a:	9c e4       	ldi	r25, 0x4C	; 76
    1a2c:	89 16       	cp	r8, r25
    1a2e:	9f ef       	ldi	r25, 0xFF	; 255
    1a30:	99 06       	cpc	r9, r25
    1a32:	24 f4       	brge	.+8      	; 0x1a3c <main+0x326>
    1a34:	e8 e6       	ldi	r30, 0x68	; 104
    1a36:	f1 e0       	ldi	r31, 0x01	; 1
    1a38:	8e 0e       	add	r8, r30
    1a3a:	9f 1e       	adc	r9, r31
			printLCD2(path[i],path[i+1],compass);
    1a3c:	f6 01       	movw	r30, r12
    1a3e:	ee 0f       	add	r30, r30
    1a40:	ff 1f       	adc	r31, r31
    1a42:	e7 51       	subi	r30, 0x17	; 23
    1a44:	fa 4f       	sbci	r31, 0xFA	; 250
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	f7 01       	movw	r30, r14
    1a4c:	ee 0f       	add	r30, r30
    1a4e:	ff 1f       	adc	r31, r31
    1a50:	e7 51       	subi	r30, 0x17	; 23
    1a52:	fa 4f       	sbci	r31, 0xFA	; 250
    1a54:	60 81       	ld	r22, Z
    1a56:	71 81       	ldd	r23, Z+1	; 0x01
    1a58:	a4 01       	movw	r20, r8
    1a5a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <printLCD2>

			//Check for obstacle

			lcd_print(2,13,3,1);
    1a5e:	82 e0       	ldi	r24, 0x02	; 2
    1a60:	6d e0       	ldi	r22, 0x0D	; 13
    1a62:	43 e0       	ldi	r20, 0x03	; 3
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	21 e0       	ldi	r18, 0x01	; 1
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
			//printLCD2(distance_Sharp,path[i+2],0);
			if (distance_Sharp < path[i+2]*8 ) {
    1a6e:	f6 01       	movw	r30, r12
    1a70:	ee 0f       	add	r30, r30
    1a72:	ff 1f       	adc	r31, r31
    1a74:	e3 51       	subi	r30, 0x13	; 19
    1a76:	fa 4f       	sbci	r31, 0xFA	; 250
    1a78:	80 81       	ld	r24, Z
    1a7a:	91 81       	ldd	r25, Z+1	; 0x01
    1a7c:	73 e0       	ldi	r23, 0x03	; 3
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	7a 95       	dec	r23
    1a84:	e1 f7       	brne	.-8      	; 0x1a7e <main+0x368>
    1a86:	20 91 e7 05 	lds	r18, 0x05E7
    1a8a:	30 91 e8 05 	lds	r19, 0x05E8
    1a8e:	28 17       	cp	r18, r24
    1a90:	39 07       	cpc	r19, r25
    1a92:	0c f0       	brlt	.+2      	; 0x1a96 <main+0x380>
    1a94:	61 c0       	rjmp	.+194    	; 0x1b58 <main+0x442>
    1a96:	a4 01       	movw	r20, r8
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1a98:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1a9a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1a9c:	82 b9       	out	0x02, r24	; 2
    1a9e:	80 e1       	ldi	r24, 0x10	; 16
    1aa0:	97 e2       	ldi	r25, 0x27	; 39
    1aa2:	e0 e7       	ldi	r30, 0x70	; 112
    1aa4:	f1 e0       	ldi	r31, 0x01	; 1
    1aa6:	31 97       	sbiw	r30, 0x01	; 1
    1aa8:	f1 f7       	brne	.-4      	; 0x1aa6 <main+0x390>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aac:	d1 f7       	brne	.-12     	; 0x1aa2 <main+0x38c>
				stop();
				_delay_ms(1000);
				printLCD2(path[i],path[i+1],compass);
    1aae:	86 01       	movw	r16, r12
    1ab0:	00 0f       	add	r16, r16
    1ab2:	11 1f       	adc	r17, r17
    1ab4:	07 51       	subi	r16, 0x17	; 23
    1ab6:	1a 4f       	sbci	r17, 0xFA	; 250
    1ab8:	f8 01       	movw	r30, r16
    1aba:	80 81       	ld	r24, Z
    1abc:	91 81       	ldd	r25, Z+1	; 0x01
    1abe:	ee 0c       	add	r14, r14
    1ac0:	ff 1c       	adc	r15, r15
    1ac2:	29 ee       	ldi	r18, 0xE9	; 233
    1ac4:	35 e0       	ldi	r19, 0x05	; 5
    1ac6:	e2 0e       	add	r14, r18
    1ac8:	f3 1e       	adc	r15, r19
    1aca:	f7 01       	movw	r30, r14
    1acc:	60 81       	ld	r22, Z
    1ace:	71 81       	ldd	r23, Z+1	; 0x01
    1ad0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <printLCD2>
				addObstacle(path[i],path[i+3]);
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	00 81       	ld	r16, Z
    1ad8:	11 81       	ldd	r17, Z+1	; 0x01
    1ada:	f6 01       	movw	r30, r12
    1adc:	ee 0f       	add	r30, r30
    1ade:	ff 1f       	adc	r31, r31
    1ae0:	e1 51       	subi	r30, 0x11	; 17
    1ae2:	fa 4f       	sbci	r31, 0xFA	; 250
    1ae4:	01 90       	ld	r0, Z+
    1ae6:	f0 81       	ld	r31, Z
    1ae8:	e0 2d       	mov	r30, r0
	q[n] = x;
}

void addObstacle(int a, int b) {
	int i;
	a--; b--;
    1aea:	01 50       	subi	r16, 0x01	; 1
    1aec:	10 40       	sbci	r17, 0x00	; 0
    1aee:	31 97       	sbiw	r30, 0x01	; 1
    1af0:	ad e3       	ldi	r26, 0x3D	; 61
    1af2:	b6 e0       	ldi	r27, 0x06	; 6
	for (i = 0; i < 63; i++) {
		if ((edgeList[i].endA==a && edgeList[i].endB==b) || (edgeList[i].endA==b && edgeList[i].endB==a))
    1af4:	14 96       	adiw	r26, 0x04	; 4
    1af6:	2d 91       	ld	r18, X+
    1af8:	3c 91       	ld	r19, X
    1afa:	15 97       	sbiw	r26, 0x05	; 5
    1afc:	20 17       	cp	r18, r16
    1afe:	31 07       	cpc	r19, r17
    1b00:	39 f4       	brne	.+14     	; 0x1b10 <main+0x3fa>
    1b02:	16 96       	adiw	r26, 0x06	; 6
    1b04:	8d 91       	ld	r24, X+
    1b06:	9c 91       	ld	r25, X
    1b08:	17 97       	sbiw	r26, 0x07	; 7
    1b0a:	8e 17       	cp	r24, r30
    1b0c:	9f 07       	cpc	r25, r31
    1b0e:	51 f0       	breq	.+20     	; 0x1b24 <main+0x40e>
    1b10:	2e 17       	cp	r18, r30
    1b12:	3f 07       	cpc	r19, r31
    1b14:	61 f4       	brne	.+24     	; 0x1b2e <main+0x418>
    1b16:	16 96       	adiw	r26, 0x06	; 6
    1b18:	8d 91       	ld	r24, X+
    1b1a:	9c 91       	ld	r25, X
    1b1c:	17 97       	sbiw	r26, 0x07	; 7
    1b1e:	80 17       	cp	r24, r16
    1b20:	91 07       	cpc	r25, r17
    1b22:	29 f4       	brne	.+10     	; 0x1b2e <main+0x418>
			edgeList[i].obstacle = 1;
    1b24:	21 e0       	ldi	r18, 0x01	; 1
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	11 96       	adiw	r26, 0x01	; 1
    1b2a:	3c 93       	st	X, r19
    1b2c:	2e 93       	st	-X, r18
    1b2e:	1a 96       	adiw	r26, 0x0a	; 10
}

void addObstacle(int a, int b) {
	int i;
	a--; b--;
	for (i = 0; i < 63; i++) {
    1b30:	38 e0       	ldi	r19, 0x08	; 8
    1b32:	a3 3b       	cpi	r26, 0xB3	; 179
    1b34:	b3 07       	cpc	r27, r19
    1b36:	f1 f6       	brne	.-68     	; 0x1af4 <main+0x3de>
				last = path[i];
    1b38:	cc 0c       	add	r12, r12
    1b3a:	dd 1c       	adc	r13, r13
    1b3c:	89 ee       	ldi	r24, 0xE9	; 233
    1b3e:	95 e0       	ldi	r25, 0x05	; 5
    1b40:	c8 0e       	add	r12, r24
    1b42:	d9 1e       	adc	r13, r25
    1b44:	f6 01       	movw	r30, r12
    1b46:	20 80       	ld	r2, Z
    1b48:	31 80       	ldd	r3, Z+1	; 0x01
				ii--;
    1b4a:	08 94       	sec
    1b4c:	61 08       	sbc	r6, r1
    1b4e:	71 08       	sbc	r7, r1
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	e8 2e       	mov	r14, r24
    1b54:	f1 2c       	mov	r15, r1
    1b56:	f2 c0       	rjmp	.+484    	; 0x1d3c <main+0x626>
				break;
			}

			//Get out of the node
			
			lcd_print(2,13,4,1);
    1b58:	82 e0       	ldi	r24, 0x02	; 2
    1b5a:	6d e0       	ldi	r22, 0x0D	; 13
    1b5c:	44 e0       	ldi	r20, 0x04	; 4
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	21 e0       	ldi	r18, 0x01	; 1
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
			distanceShaft = 0;
    1b68:	10 92 e3 05 	sts	0x05E3, r1
    1b6c:	10 92 e4 05 	sts	0x05E4, r1
    1b70:	10 92 e5 05 	sts	0x05E5, r1
    1b74:	10 92 e6 05 	sts	0x05E6, r1
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1b78:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1b7a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1b7c:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1b7e:	82 b9       	out	0x02, r24	; 2
			forward();
			reqd = 12;
			ShaftCountLeft = ShaftCountRight = 0;
    1b80:	10 92 df 05 	sts	0x05DF, r1
    1b84:	10 92 e0 05 	sts	0x05E0, r1
    1b88:	10 92 e1 05 	sts	0x05E1, r1
    1b8c:	10 92 e2 05 	sts	0x05E2, r1
    1b90:	80 91 df 05 	lds	r24, 0x05DF
    1b94:	90 91 e0 05 	lds	r25, 0x05E0
    1b98:	a0 91 e1 05 	lds	r26, 0x05E1
    1b9c:	b0 91 e2 05 	lds	r27, 0x05E2
    1ba0:	80 93 db 05 	sts	0x05DB, r24
    1ba4:	90 93 dc 05 	sts	0x05DC, r25
    1ba8:	a0 93 dd 05 	sts	0x05DD, r26
    1bac:	b0 93 de 05 	sts	0x05DE, r27
			while (1) {
				if ( (ShaftCountLeft > reqd) | (ShaftCountRight > reqd) )
    1bb0:	80 91 db 05 	lds	r24, 0x05DB
    1bb4:	90 91 dc 05 	lds	r25, 0x05DC
    1bb8:	a0 91 dd 05 	lds	r26, 0x05DD
    1bbc:	b0 91 de 05 	lds	r27, 0x05DE
    1bc0:	20 91 df 05 	lds	r18, 0x05DF
    1bc4:	30 91 e0 05 	lds	r19, 0x05E0
    1bc8:	40 91 e1 05 	lds	r20, 0x05E1
    1bcc:	50 91 e2 05 	lds	r21, 0x05E2
    1bd0:	0d 97       	sbiw	r24, 0x0d	; 13
    1bd2:	a1 05       	cpc	r26, r1
    1bd4:	b1 05       	cpc	r27, r1
    1bd6:	68 f5       	brcc	.+90     	; 0x1c32 <main+0x51c>
    1bd8:	2d 30       	cpi	r18, 0x0D	; 13
    1bda:	31 05       	cpc	r19, r1
    1bdc:	41 05       	cpc	r20, r1
    1bde:	51 05       	cpc	r21, r1
    1be0:	40 f5       	brcc	.+80     	; 0x1c32 <main+0x51c>
					break;
				djFlag = printNsetDJ();
    1be2:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <printNsetDJ>
				switch (djFlag) {
    1be6:	8b 30       	cpi	r24, 0x0B	; 11
    1be8:	91 05       	cpc	r25, r1
    1bea:	b1 f0       	breq	.+44     	; 0x1c18 <main+0x502>
    1bec:	8c 30       	cpi	r24, 0x0C	; 12
    1bee:	91 05       	cpc	r25, r1
    1bf0:	4c f4       	brge	.+18     	; 0x1c04 <main+0x4ee>
    1bf2:	81 30       	cpi	r24, 0x01	; 1
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	81 f0       	breq	.+32     	; 0x1c18 <main+0x502>
    1bf8:	8a 30       	cpi	r24, 0x0A	; 10
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	a9 f0       	breq	.+42     	; 0x1c28 <main+0x512>
    1bfe:	89 2b       	or	r24, r25
    1c00:	99 f0       	breq	.+38     	; 0x1c28 <main+0x512>
    1c02:	d6 cf       	rjmp	.-84     	; 0x1bb0 <main+0x49a>
    1c04:	8e 36       	cpi	r24, 0x6E	; 110
    1c06:	91 05       	cpc	r25, r1
    1c08:	61 f0       	breq	.+24     	; 0x1c22 <main+0x50c>
    1c0a:	8f 36       	cpi	r24, 0x6F	; 111
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	61 f0       	breq	.+24     	; 0x1c28 <main+0x512>
    1c10:	84 36       	cpi	r24, 0x64	; 100
    1c12:	91 05       	cpc	r25, r1
    1c14:	69 f6       	brne	.-102    	; 0x1bb0 <main+0x49a>
    1c16:	05 c0       	rjmp	.+10     	; 0x1c22 <main+0x50c>
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	//lcd_print(2,1,left,3);
	//lcd_print(2,5,right,3);
	OCR5AL = (unsigned char) left;
    1c18:	50 92 28 01 	sts	0x0128, r5
	OCR5BL = (unsigned char) right;
    1c1c:	10 92 2a 01 	sts	0x012A, r1
    1c20:	c7 cf       	rjmp	.-114    	; 0x1bb0 <main+0x49a>
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	//lcd_print(2,1,left,3);
	//lcd_print(2,5,right,3);
	OCR5AL = (unsigned char) left;
    1c22:	10 92 28 01 	sts	0x0128, r1
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <main+0x516>
	OCR5BL = (unsigned char) right;
    1c28:	50 92 28 01 	sts	0x0128, r5
    1c2c:	50 92 2a 01 	sts	0x012A, r5
    1c30:	bf cf       	rjmp	.-130    	; 0x1bb0 <main+0x49a>
				}
			}

			//Follow the line, if you reach a node, break

			lcd_print(2,13,5,1);
    1c32:	82 e0       	ldi	r24, 0x02	; 2
    1c34:	6d e0       	ldi	r22, 0x0D	; 13
    1c36:	45 e0       	ldi	r20, 0x05	; 5
    1c38:	50 e0       	ldi	r21, 0x00	; 0
    1c3a:	21 e0       	ldi	r18, 0x01	; 1
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_print>
			while (1) {
				djFlag = printNsetDJ();
    1c42:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <printNsetDJ>
				if (djFlag == 11 || djFlag == 110 || djFlag==111) break;
    1c46:	8b 30       	cpi	r24, 0x0B	; 11
    1c48:	91 05       	cpc	r25, r1
    1c4a:	49 f1       	breq	.+82     	; 0x1c9e <main+0x588>
    1c4c:	8e 36       	cpi	r24, 0x6E	; 110
    1c4e:	91 05       	cpc	r25, r1
    1c50:	31 f1       	breq	.+76     	; 0x1c9e <main+0x588>
    1c52:	8f 36       	cpi	r24, 0x6F	; 111
    1c54:	91 05       	cpc	r25, r1
    1c56:	19 f1       	breq	.+70     	; 0x1c9e <main+0x588>
				switch(djFlag) {
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	69 f0       	breq	.+26     	; 0x1c78 <main+0x562>
    1c5e:	82 30       	cpi	r24, 0x02	; 2
    1c60:	91 05       	cpc	r25, r1
    1c62:	1c f4       	brge	.+6      	; 0x1c6a <main+0x554>
    1c64:	89 2b       	or	r24, r25
    1c66:	69 f0       	breq	.+26     	; 0x1c82 <main+0x56c>
    1c68:	ec cf       	rjmp	.-40     	; 0x1c42 <main+0x52c>
    1c6a:	8a 30       	cpi	r24, 0x0A	; 10
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	49 f0       	breq	.+18     	; 0x1c82 <main+0x56c>
    1c70:	84 36       	cpi	r24, 0x64	; 100
    1c72:	91 05       	cpc	r25, r1
    1c74:	31 f7       	brne	.-52     	; 0x1c42 <main+0x52c>
    1c76:	0e c0       	rjmp	.+28     	; 0x1c94 <main+0x57e>
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	//lcd_print(2,1,left,3);
	//lcd_print(2,5,right,3);
	OCR5AL = (unsigned char) left;
    1c78:	50 92 28 01 	sts	0x0128, r5
	OCR5BL = (unsigned char) right;
    1c7c:	10 92 2a 01 	sts	0x012A, r1
    1c80:	e0 cf       	rjmp	.-64     	; 0x1c42 <main+0x52c>
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	//lcd_print(2,1,left,3);
	//lcd_print(2,5,right,3);
	OCR5AL = (unsigned char) left;
    1c82:	50 92 28 01 	sts	0x0128, r5
	OCR5BL = (unsigned char) right;
    1c86:	50 92 2a 01 	sts	0x012A, r5
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1c8a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1c8c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1c8e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1c90:	82 b9       	out	0x02, r24	; 2
    1c92:	d7 cf       	rjmp	.-82     	; 0x1c42 <main+0x52c>
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	//lcd_print(2,1,left,3);
	//lcd_print(2,5,right,3);
	OCR5AL = (unsigned char) left;
    1c94:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char) right;
    1c98:	50 92 2a 01 	sts	0x012A, r5
    1c9c:	d2 cf       	rjmp	.-92     	; 0x1c42 <main+0x52c>
}
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
	//lcd_print(2,1,left,3);
	//lcd_print(2,5,right,3);
	OCR5AL = (unsigned char) left;
    1c9e:	50 92 28 01 	sts	0x0128, r5
	OCR5BL = (unsigned char) right;
    1ca2:	50 92 2a 01 	sts	0x012A, r5
	beep();//Beep
	for (ii = 1; ii < 10; ii++) {
		mainFun(last,arr[ii],compass);
		printLCD1(last,arr[ii],compass);
		velocity(MAX_VEL,MAX_VEL);    // Set the speed to max velocity
		for (i = 0; i < pathLen - 1; i+=3) {
    1ca6:	23 e0       	ldi	r18, 0x03	; 3
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	c2 0e       	add	r12, r18
    1cac:	d3 1e       	adc	r13, r19
    1cae:	ee 24       	eor	r14, r14
    1cb0:	ff 24       	eor	r15, r15
    1cb2:	80 91 c0 08 	lds	r24, 0x08C0
    1cb6:	90 91 c1 08 	lds	r25, 0x08C1
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	c8 16       	cp	r12, r24
    1cbe:	d9 06       	cpc	r13, r25
    1cc0:	0c f4       	brge	.+2      	; 0x1cc4 <main+0x5ae>
    1cc2:	93 cd       	rjmp	.-1242   	; 0x17ea <main+0xd4>
    1cc4:	97 01       	movw	r18, r14
				}
			}
			velocity(MAX_VEL,MAX_VEL);
			if (shFlag == 1) break;
		}
		if (shFlag == 1) continue;
    1cc6:	41 e0       	ldi	r20, 0x01	; 1
    1cc8:	e4 16       	cp	r14, r20
    1cca:	f1 04       	cpc	r15, r1
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <main+0x5ba>
    1cce:	36 c0       	rjmp	.+108    	; 0x1d3c <main+0x626>
		last = path[i];
    1cd0:	cc 0c       	add	r12, r12
    1cd2:	dd 1c       	adc	r13, r13
    1cd4:	89 ee       	ldi	r24, 0xE9	; 233
    1cd6:	95 e0       	ldi	r25, 0x05	; 5
    1cd8:	c8 0e       	add	r12, r24
    1cda:	d9 1e       	adc	r13, r25
    1cdc:	f6 01       	movw	r30, r12
    1cde:	20 80       	ld	r2, Z
    1ce0:	31 80       	ldd	r3, Z+1	; 0x01
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1ce2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1ce4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1ce6:	82 b9       	out	0x02, r24	; 2
		stop();
		//500 milli seconds beep
		if (ii != 9) beep();
    1ce8:	f9 e0       	ldi	r31, 0x09	; 9
    1cea:	6f 16       	cp	r6, r31
    1cec:	71 04       	cpc	r7, r1
    1cee:	99 f0       	breq	.+38     	; 0x1d16 <main+0x600>
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
}
void buzzer_on(void)
{
	
	PORTC= 0x08;   // pin 3 to high 0000 1000
    1cf0:	48 b8       	out	0x08, r4	; 8
    1cf2:	88 e8       	ldi	r24, 0x88	; 136
    1cf4:	93 e1       	ldi	r25, 0x13	; 19
    1cf6:	e0 e7       	ldi	r30, 0x70	; 112
    1cf8:	f1 e0       	ldi	r31, 0x01	; 1
    1cfa:	31 97       	sbiw	r30, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <main+0x5e4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d00:	d1 f7       	brne	.-12     	; 0x1cf6 <main+0x5e0>
	PORTC=PORTC & 0xF7;

}
void buzzer_off(void)
{
	PORTC= 0x00;
    1d02:	18 b8       	out	0x08, r1	; 8
    1d04:	88 e8       	ldi	r24, 0x88	; 136
    1d06:	93 e1       	ldi	r25, 0x13	; 19
    1d08:	e0 e7       	ldi	r30, 0x70	; 112
    1d0a:	f1 e0       	ldi	r31, 0x01	; 1
    1d0c:	31 97       	sbiw	r30, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <main+0x5f6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d10:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d12:	d1 f7       	brne	.-12     	; 0x1d08 <main+0x5f2>
    1d14:	12 c0       	rjmp	.+36     	; 0x1d3a <main+0x624>
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
}
void buzzer_on(void)
{
	
	PORTC= 0x08;   // pin 3 to high 0000 1000
    1d16:	48 b8       	out	0x08, r4	; 8
    1d18:	80 e6       	ldi	r24, 0x60	; 96
    1d1a:	9a ee       	ldi	r25, 0xEA	; 234
    1d1c:	e0 e7       	ldi	r30, 0x70	; 112
    1d1e:	f1 e0       	ldi	r31, 0x01	; 1
    1d20:	31 97       	sbiw	r30, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <main+0x60a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d26:	d1 f7       	brne	.-12     	; 0x1d1c <main+0x606>
	PORTC=PORTC & 0xF7;

}
void buzzer_off(void)
{
	PORTC= 0x00;
    1d28:	18 b8       	out	0x08, r1	; 8
    1d2a:	80 e6       	ldi	r24, 0x60	; 96
    1d2c:	9a ee       	ldi	r25, 0xEA	; 234
    1d2e:	e0 e7       	ldi	r30, 0x70	; 112
    1d30:	f1 e0       	ldi	r31, 0x01	; 1
    1d32:	31 97       	sbiw	r30, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <main+0x61c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d38:	d1 f7       	brne	.-12     	; 0x1d2e <main+0x618>
    1d3a:	79 01       	movw	r14, r18
	init_devices();
	init_graph();
	lcd_set_4bit();
	lcd_init();
	beep();//Beep
	for (ii = 1; ii < 10; ii++) {
    1d3c:	08 94       	sec
    1d3e:	61 1c       	adc	r6, r1
    1d40:	71 1c       	adc	r7, r1
    1d42:	2a e0       	ldi	r18, 0x0A	; 10
    1d44:	62 16       	cp	r6, r18
    1d46:	71 04       	cpc	r7, r1
    1d48:	0c f4       	brge	.+2      	; 0x1d4c <main+0x636>
    1d4a:	33 cd       	rjmp	.-1434   	; 0x17b2 <main+0x9c>
			_delay_ms(6000);
			buzzer_off();
			_delay_ms(6000);
		}
	}
}
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	64 96       	adiw	r28, 0x14	; 20
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	ff 90       	pop	r15
    1d66:	ef 90       	pop	r14
    1d68:	df 90       	pop	r13
    1d6a:	cf 90       	pop	r12
    1d6c:	bf 90       	pop	r11
    1d6e:	af 90       	pop	r10
    1d70:	9f 90       	pop	r9
    1d72:	8f 90       	pop	r8
    1d74:	7f 90       	pop	r7
    1d76:	6f 90       	pop	r6
    1d78:	5f 90       	pop	r5
    1d7a:	4f 90       	pop	r4
    1d7c:	3f 90       	pop	r3
    1d7e:	2f 90       	pop	r2
    1d80:	08 95       	ret

00001d82 <__fixunssfsi>:
    1d82:	ef 92       	push	r14
    1d84:	ff 92       	push	r15
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	7b 01       	movw	r14, r22
    1d8c:	8c 01       	movw	r16, r24
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	5f e4       	ldi	r21, 0x4F	; 79
    1d96:	0e 94 3d 12 	call	0x247a	; 0x247a <__gesf2>
    1d9a:	88 23       	and	r24, r24
    1d9c:	8c f0       	brlt	.+34     	; 0x1dc0 <__fixunssfsi+0x3e>
    1d9e:	c8 01       	movw	r24, r16
    1da0:	b7 01       	movw	r22, r14
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	5f e4       	ldi	r21, 0x4F	; 79
    1daa:	0e 94 39 10 	call	0x2072	; 0x2072 <__subsf3>
    1dae:	0e 94 cb 12 	call	0x2596	; 0x2596 <__fixsfsi>
    1db2:	9b 01       	movw	r18, r22
    1db4:	ac 01       	movw	r20, r24
    1db6:	20 50       	subi	r18, 0x00	; 0
    1db8:	30 40       	sbci	r19, 0x00	; 0
    1dba:	40 40       	sbci	r20, 0x00	; 0
    1dbc:	50 48       	sbci	r21, 0x80	; 128
    1dbe:	06 c0       	rjmp	.+12     	; 0x1dcc <__fixunssfsi+0x4a>
    1dc0:	c8 01       	movw	r24, r16
    1dc2:	b7 01       	movw	r22, r14
    1dc4:	0e 94 cb 12 	call	0x2596	; 0x2596 <__fixsfsi>
    1dc8:	9b 01       	movw	r18, r22
    1dca:	ac 01       	movw	r20, r24
    1dcc:	b9 01       	movw	r22, r18
    1dce:	ca 01       	movw	r24, r20
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	ff 90       	pop	r15
    1dd6:	ef 90       	pop	r14
    1dd8:	08 95       	ret

00001dda <_fpadd_parts>:
    1dda:	a0 e0       	ldi	r26, 0x00	; 0
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e3 ef       	ldi	r30, 0xF3	; 243
    1de0:	fe e0       	ldi	r31, 0x0E	; 14
    1de2:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__prologue_saves__>
    1de6:	dc 01       	movw	r26, r24
    1de8:	2b 01       	movw	r4, r22
    1dea:	fa 01       	movw	r30, r20
    1dec:	9c 91       	ld	r25, X
    1dee:	92 30       	cpi	r25, 0x02	; 2
    1df0:	08 f4       	brcc	.+2      	; 0x1df4 <_fpadd_parts+0x1a>
    1df2:	39 c1       	rjmp	.+626    	; 0x2066 <_fpadd_parts+0x28c>
    1df4:	eb 01       	movw	r28, r22
    1df6:	88 81       	ld	r24, Y
    1df8:	82 30       	cpi	r24, 0x02	; 2
    1dfa:	08 f4       	brcc	.+2      	; 0x1dfe <_fpadd_parts+0x24>
    1dfc:	33 c1       	rjmp	.+614    	; 0x2064 <_fpadd_parts+0x28a>
    1dfe:	94 30       	cpi	r25, 0x04	; 4
    1e00:	69 f4       	brne	.+26     	; 0x1e1c <_fpadd_parts+0x42>
    1e02:	84 30       	cpi	r24, 0x04	; 4
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <_fpadd_parts+0x2e>
    1e06:	2f c1       	rjmp	.+606    	; 0x2066 <_fpadd_parts+0x28c>
    1e08:	11 96       	adiw	r26, 0x01	; 1
    1e0a:	9c 91       	ld	r25, X
    1e0c:	11 97       	sbiw	r26, 0x01	; 1
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	98 17       	cp	r25, r24
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <_fpadd_parts+0x3c>
    1e14:	28 c1       	rjmp	.+592    	; 0x2066 <_fpadd_parts+0x28c>
    1e16:	a0 ed       	ldi	r26, 0xD0	; 208
    1e18:	b4 e0       	ldi	r27, 0x04	; 4
    1e1a:	25 c1       	rjmp	.+586    	; 0x2066 <_fpadd_parts+0x28c>
    1e1c:	84 30       	cpi	r24, 0x04	; 4
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <_fpadd_parts+0x48>
    1e20:	21 c1       	rjmp	.+578    	; 0x2064 <_fpadd_parts+0x28a>
    1e22:	82 30       	cpi	r24, 0x02	; 2
    1e24:	a9 f4       	brne	.+42     	; 0x1e50 <_fpadd_parts+0x76>
    1e26:	92 30       	cpi	r25, 0x02	; 2
    1e28:	09 f0       	breq	.+2      	; 0x1e2c <_fpadd_parts+0x52>
    1e2a:	1d c1       	rjmp	.+570    	; 0x2066 <_fpadd_parts+0x28c>
    1e2c:	9a 01       	movw	r18, r20
    1e2e:	ad 01       	movw	r20, r26
    1e30:	88 e0       	ldi	r24, 0x08	; 8
    1e32:	ea 01       	movw	r28, r20
    1e34:	09 90       	ld	r0, Y+
    1e36:	ae 01       	movw	r20, r28
    1e38:	e9 01       	movw	r28, r18
    1e3a:	09 92       	st	Y+, r0
    1e3c:	9e 01       	movw	r18, r28
    1e3e:	81 50       	subi	r24, 0x01	; 1
    1e40:	c1 f7       	brne	.-16     	; 0x1e32 <_fpadd_parts+0x58>
    1e42:	e2 01       	movw	r28, r4
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	11 96       	adiw	r26, 0x01	; 1
    1e48:	9c 91       	ld	r25, X
    1e4a:	89 23       	and	r24, r25
    1e4c:	81 83       	std	Z+1, r24	; 0x01
    1e4e:	08 c1       	rjmp	.+528    	; 0x2060 <_fpadd_parts+0x286>
    1e50:	92 30       	cpi	r25, 0x02	; 2
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <_fpadd_parts+0x7c>
    1e54:	07 c1       	rjmp	.+526    	; 0x2064 <_fpadd_parts+0x28a>
    1e56:	12 96       	adiw	r26, 0x02	; 2
    1e58:	2d 90       	ld	r2, X+
    1e5a:	3c 90       	ld	r3, X
    1e5c:	13 97       	sbiw	r26, 0x03	; 3
    1e5e:	eb 01       	movw	r28, r22
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	9b 81       	ldd	r25, Y+3	; 0x03
    1e64:	14 96       	adiw	r26, 0x04	; 4
    1e66:	ad 90       	ld	r10, X+
    1e68:	bd 90       	ld	r11, X+
    1e6a:	cd 90       	ld	r12, X+
    1e6c:	dc 90       	ld	r13, X
    1e6e:	17 97       	sbiw	r26, 0x07	; 7
    1e70:	ec 80       	ldd	r14, Y+4	; 0x04
    1e72:	fd 80       	ldd	r15, Y+5	; 0x05
    1e74:	0e 81       	ldd	r16, Y+6	; 0x06
    1e76:	1f 81       	ldd	r17, Y+7	; 0x07
    1e78:	91 01       	movw	r18, r2
    1e7a:	28 1b       	sub	r18, r24
    1e7c:	39 0b       	sbc	r19, r25
    1e7e:	b9 01       	movw	r22, r18
    1e80:	37 ff       	sbrs	r19, 7
    1e82:	04 c0       	rjmp	.+8      	; 0x1e8c <_fpadd_parts+0xb2>
    1e84:	66 27       	eor	r22, r22
    1e86:	77 27       	eor	r23, r23
    1e88:	62 1b       	sub	r22, r18
    1e8a:	73 0b       	sbc	r23, r19
    1e8c:	60 32       	cpi	r22, 0x20	; 32
    1e8e:	71 05       	cpc	r23, r1
    1e90:	0c f0       	brlt	.+2      	; 0x1e94 <_fpadd_parts+0xba>
    1e92:	61 c0       	rjmp	.+194    	; 0x1f56 <_fpadd_parts+0x17c>
    1e94:	12 16       	cp	r1, r18
    1e96:	13 06       	cpc	r1, r19
    1e98:	6c f5       	brge	.+90     	; 0x1ef4 <_fpadd_parts+0x11a>
    1e9a:	37 01       	movw	r6, r14
    1e9c:	48 01       	movw	r8, r16
    1e9e:	06 2e       	mov	r0, r22
    1ea0:	04 c0       	rjmp	.+8      	; 0x1eaa <_fpadd_parts+0xd0>
    1ea2:	96 94       	lsr	r9
    1ea4:	87 94       	ror	r8
    1ea6:	77 94       	ror	r7
    1ea8:	67 94       	ror	r6
    1eaa:	0a 94       	dec	r0
    1eac:	d2 f7       	brpl	.-12     	; 0x1ea2 <_fpadd_parts+0xc8>
    1eae:	21 e0       	ldi	r18, 0x01	; 1
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	04 c0       	rjmp	.+8      	; 0x1ec0 <_fpadd_parts+0xe6>
    1eb8:	22 0f       	add	r18, r18
    1eba:	33 1f       	adc	r19, r19
    1ebc:	44 1f       	adc	r20, r20
    1ebe:	55 1f       	adc	r21, r21
    1ec0:	6a 95       	dec	r22
    1ec2:	d2 f7       	brpl	.-12     	; 0x1eb8 <_fpadd_parts+0xde>
    1ec4:	21 50       	subi	r18, 0x01	; 1
    1ec6:	30 40       	sbci	r19, 0x00	; 0
    1ec8:	40 40       	sbci	r20, 0x00	; 0
    1eca:	50 40       	sbci	r21, 0x00	; 0
    1ecc:	2e 21       	and	r18, r14
    1ece:	3f 21       	and	r19, r15
    1ed0:	40 23       	and	r20, r16
    1ed2:	51 23       	and	r21, r17
    1ed4:	21 15       	cp	r18, r1
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	41 05       	cpc	r20, r1
    1eda:	51 05       	cpc	r21, r1
    1edc:	21 f0       	breq	.+8      	; 0x1ee6 <_fpadd_parts+0x10c>
    1ede:	21 e0       	ldi	r18, 0x01	; 1
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	50 e0       	ldi	r21, 0x00	; 0
    1ee6:	79 01       	movw	r14, r18
    1ee8:	8a 01       	movw	r16, r20
    1eea:	e6 28       	or	r14, r6
    1eec:	f7 28       	or	r15, r7
    1eee:	08 29       	or	r16, r8
    1ef0:	19 29       	or	r17, r9
    1ef2:	3c c0       	rjmp	.+120    	; 0x1f6c <_fpadd_parts+0x192>
    1ef4:	23 2b       	or	r18, r19
    1ef6:	d1 f1       	breq	.+116    	; 0x1f6c <_fpadd_parts+0x192>
    1ef8:	26 0e       	add	r2, r22
    1efa:	37 1e       	adc	r3, r23
    1efc:	35 01       	movw	r6, r10
    1efe:	46 01       	movw	r8, r12
    1f00:	06 2e       	mov	r0, r22
    1f02:	04 c0       	rjmp	.+8      	; 0x1f0c <_fpadd_parts+0x132>
    1f04:	96 94       	lsr	r9
    1f06:	87 94       	ror	r8
    1f08:	77 94       	ror	r7
    1f0a:	67 94       	ror	r6
    1f0c:	0a 94       	dec	r0
    1f0e:	d2 f7       	brpl	.-12     	; 0x1f04 <_fpadd_parts+0x12a>
    1f10:	21 e0       	ldi	r18, 0x01	; 1
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	50 e0       	ldi	r21, 0x00	; 0
    1f18:	04 c0       	rjmp	.+8      	; 0x1f22 <_fpadd_parts+0x148>
    1f1a:	22 0f       	add	r18, r18
    1f1c:	33 1f       	adc	r19, r19
    1f1e:	44 1f       	adc	r20, r20
    1f20:	55 1f       	adc	r21, r21
    1f22:	6a 95       	dec	r22
    1f24:	d2 f7       	brpl	.-12     	; 0x1f1a <_fpadd_parts+0x140>
    1f26:	21 50       	subi	r18, 0x01	; 1
    1f28:	30 40       	sbci	r19, 0x00	; 0
    1f2a:	40 40       	sbci	r20, 0x00	; 0
    1f2c:	50 40       	sbci	r21, 0x00	; 0
    1f2e:	2a 21       	and	r18, r10
    1f30:	3b 21       	and	r19, r11
    1f32:	4c 21       	and	r20, r12
    1f34:	5d 21       	and	r21, r13
    1f36:	21 15       	cp	r18, r1
    1f38:	31 05       	cpc	r19, r1
    1f3a:	41 05       	cpc	r20, r1
    1f3c:	51 05       	cpc	r21, r1
    1f3e:	21 f0       	breq	.+8      	; 0x1f48 <_fpadd_parts+0x16e>
    1f40:	21 e0       	ldi	r18, 0x01	; 1
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	50 e0       	ldi	r21, 0x00	; 0
    1f48:	59 01       	movw	r10, r18
    1f4a:	6a 01       	movw	r12, r20
    1f4c:	a6 28       	or	r10, r6
    1f4e:	b7 28       	or	r11, r7
    1f50:	c8 28       	or	r12, r8
    1f52:	d9 28       	or	r13, r9
    1f54:	0b c0       	rjmp	.+22     	; 0x1f6c <_fpadd_parts+0x192>
    1f56:	82 15       	cp	r24, r2
    1f58:	93 05       	cpc	r25, r3
    1f5a:	2c f0       	brlt	.+10     	; 0x1f66 <_fpadd_parts+0x18c>
    1f5c:	1c 01       	movw	r2, r24
    1f5e:	aa 24       	eor	r10, r10
    1f60:	bb 24       	eor	r11, r11
    1f62:	65 01       	movw	r12, r10
    1f64:	03 c0       	rjmp	.+6      	; 0x1f6c <_fpadd_parts+0x192>
    1f66:	ee 24       	eor	r14, r14
    1f68:	ff 24       	eor	r15, r15
    1f6a:	87 01       	movw	r16, r14
    1f6c:	11 96       	adiw	r26, 0x01	; 1
    1f6e:	9c 91       	ld	r25, X
    1f70:	d2 01       	movw	r26, r4
    1f72:	11 96       	adiw	r26, 0x01	; 1
    1f74:	8c 91       	ld	r24, X
    1f76:	98 17       	cp	r25, r24
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <_fpadd_parts+0x1a2>
    1f7a:	45 c0       	rjmp	.+138    	; 0x2006 <_fpadd_parts+0x22c>
    1f7c:	99 23       	and	r25, r25
    1f7e:	39 f0       	breq	.+14     	; 0x1f8e <_fpadd_parts+0x1b4>
    1f80:	a8 01       	movw	r20, r16
    1f82:	97 01       	movw	r18, r14
    1f84:	2a 19       	sub	r18, r10
    1f86:	3b 09       	sbc	r19, r11
    1f88:	4c 09       	sbc	r20, r12
    1f8a:	5d 09       	sbc	r21, r13
    1f8c:	06 c0       	rjmp	.+12     	; 0x1f9a <_fpadd_parts+0x1c0>
    1f8e:	a6 01       	movw	r20, r12
    1f90:	95 01       	movw	r18, r10
    1f92:	2e 19       	sub	r18, r14
    1f94:	3f 09       	sbc	r19, r15
    1f96:	40 0b       	sbc	r20, r16
    1f98:	51 0b       	sbc	r21, r17
    1f9a:	57 fd       	sbrc	r21, 7
    1f9c:	08 c0       	rjmp	.+16     	; 0x1fae <_fpadd_parts+0x1d4>
    1f9e:	11 82       	std	Z+1, r1	; 0x01
    1fa0:	33 82       	std	Z+3, r3	; 0x03
    1fa2:	22 82       	std	Z+2, r2	; 0x02
    1fa4:	24 83       	std	Z+4, r18	; 0x04
    1fa6:	35 83       	std	Z+5, r19	; 0x05
    1fa8:	46 83       	std	Z+6, r20	; 0x06
    1faa:	57 83       	std	Z+7, r21	; 0x07
    1fac:	1d c0       	rjmp	.+58     	; 0x1fe8 <_fpadd_parts+0x20e>
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	81 83       	std	Z+1, r24	; 0x01
    1fb2:	33 82       	std	Z+3, r3	; 0x03
    1fb4:	22 82       	std	Z+2, r2	; 0x02
    1fb6:	88 27       	eor	r24, r24
    1fb8:	99 27       	eor	r25, r25
    1fba:	dc 01       	movw	r26, r24
    1fbc:	82 1b       	sub	r24, r18
    1fbe:	93 0b       	sbc	r25, r19
    1fc0:	a4 0b       	sbc	r26, r20
    1fc2:	b5 0b       	sbc	r27, r21
    1fc4:	84 83       	std	Z+4, r24	; 0x04
    1fc6:	95 83       	std	Z+5, r25	; 0x05
    1fc8:	a6 83       	std	Z+6, r26	; 0x06
    1fca:	b7 83       	std	Z+7, r27	; 0x07
    1fcc:	0d c0       	rjmp	.+26     	; 0x1fe8 <_fpadd_parts+0x20e>
    1fce:	22 0f       	add	r18, r18
    1fd0:	33 1f       	adc	r19, r19
    1fd2:	44 1f       	adc	r20, r20
    1fd4:	55 1f       	adc	r21, r21
    1fd6:	24 83       	std	Z+4, r18	; 0x04
    1fd8:	35 83       	std	Z+5, r19	; 0x05
    1fda:	46 83       	std	Z+6, r20	; 0x06
    1fdc:	57 83       	std	Z+7, r21	; 0x07
    1fde:	82 81       	ldd	r24, Z+2	; 0x02
    1fe0:	93 81       	ldd	r25, Z+3	; 0x03
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	93 83       	std	Z+3, r25	; 0x03
    1fe6:	82 83       	std	Z+2, r24	; 0x02
    1fe8:	24 81       	ldd	r18, Z+4	; 0x04
    1fea:	35 81       	ldd	r19, Z+5	; 0x05
    1fec:	46 81       	ldd	r20, Z+6	; 0x06
    1fee:	57 81       	ldd	r21, Z+7	; 0x07
    1ff0:	da 01       	movw	r26, r20
    1ff2:	c9 01       	movw	r24, r18
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	a1 09       	sbc	r26, r1
    1ff8:	b1 09       	sbc	r27, r1
    1ffa:	8f 5f       	subi	r24, 0xFF	; 255
    1ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffe:	af 4f       	sbci	r26, 0xFF	; 255
    2000:	bf 43       	sbci	r27, 0x3F	; 63
    2002:	28 f3       	brcs	.-54     	; 0x1fce <_fpadd_parts+0x1f4>
    2004:	0b c0       	rjmp	.+22     	; 0x201c <_fpadd_parts+0x242>
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	33 82       	std	Z+3, r3	; 0x03
    200a:	22 82       	std	Z+2, r2	; 0x02
    200c:	ea 0c       	add	r14, r10
    200e:	fb 1c       	adc	r15, r11
    2010:	0c 1d       	adc	r16, r12
    2012:	1d 1d       	adc	r17, r13
    2014:	e4 82       	std	Z+4, r14	; 0x04
    2016:	f5 82       	std	Z+5, r15	; 0x05
    2018:	06 83       	std	Z+6, r16	; 0x06
    201a:	17 83       	std	Z+7, r17	; 0x07
    201c:	83 e0       	ldi	r24, 0x03	; 3
    201e:	80 83       	st	Z, r24
    2020:	24 81       	ldd	r18, Z+4	; 0x04
    2022:	35 81       	ldd	r19, Z+5	; 0x05
    2024:	46 81       	ldd	r20, Z+6	; 0x06
    2026:	57 81       	ldd	r21, Z+7	; 0x07
    2028:	57 ff       	sbrs	r21, 7
    202a:	1a c0       	rjmp	.+52     	; 0x2060 <_fpadd_parts+0x286>
    202c:	c9 01       	movw	r24, r18
    202e:	aa 27       	eor	r26, r26
    2030:	97 fd       	sbrc	r25, 7
    2032:	a0 95       	com	r26
    2034:	ba 2f       	mov	r27, r26
    2036:	81 70       	andi	r24, 0x01	; 1
    2038:	90 70       	andi	r25, 0x00	; 0
    203a:	a0 70       	andi	r26, 0x00	; 0
    203c:	b0 70       	andi	r27, 0x00	; 0
    203e:	56 95       	lsr	r21
    2040:	47 95       	ror	r20
    2042:	37 95       	ror	r19
    2044:	27 95       	ror	r18
    2046:	82 2b       	or	r24, r18
    2048:	93 2b       	or	r25, r19
    204a:	a4 2b       	or	r26, r20
    204c:	b5 2b       	or	r27, r21
    204e:	84 83       	std	Z+4, r24	; 0x04
    2050:	95 83       	std	Z+5, r25	; 0x05
    2052:	a6 83       	std	Z+6, r26	; 0x06
    2054:	b7 83       	std	Z+7, r27	; 0x07
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	93 81       	ldd	r25, Z+3	; 0x03
    205a:	01 96       	adiw	r24, 0x01	; 1
    205c:	93 83       	std	Z+3, r25	; 0x03
    205e:	82 83       	std	Z+2, r24	; 0x02
    2060:	df 01       	movw	r26, r30
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <_fpadd_parts+0x28c>
    2064:	d2 01       	movw	r26, r4
    2066:	cd 01       	movw	r24, r26
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	e2 e1       	ldi	r30, 0x12	; 18
    206e:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__epilogue_restores__>

00002072 <__subsf3>:
    2072:	a0 e2       	ldi	r26, 0x20	; 32
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	ef e3       	ldi	r30, 0x3F	; 63
    2078:	f0 e1       	ldi	r31, 0x10	; 16
    207a:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__prologue_saves__+0x18>
    207e:	69 83       	std	Y+1, r22	; 0x01
    2080:	7a 83       	std	Y+2, r23	; 0x02
    2082:	8b 83       	std	Y+3, r24	; 0x03
    2084:	9c 83       	std	Y+4, r25	; 0x04
    2086:	2d 83       	std	Y+5, r18	; 0x05
    2088:	3e 83       	std	Y+6, r19	; 0x06
    208a:	4f 83       	std	Y+7, r20	; 0x07
    208c:	58 87       	std	Y+8, r21	; 0x08
    208e:	e9 e0       	ldi	r30, 0x09	; 9
    2090:	ee 2e       	mov	r14, r30
    2092:	f1 2c       	mov	r15, r1
    2094:	ec 0e       	add	r14, r28
    2096:	fd 1e       	adc	r15, r29
    2098:	ce 01       	movw	r24, r28
    209a:	01 96       	adiw	r24, 0x01	; 1
    209c:	b7 01       	movw	r22, r14
    209e:	0e 94 bc 14 	call	0x2978	; 0x2978 <__unpack_f>
    20a2:	8e 01       	movw	r16, r28
    20a4:	0f 5e       	subi	r16, 0xEF	; 239
    20a6:	1f 4f       	sbci	r17, 0xFF	; 255
    20a8:	ce 01       	movw	r24, r28
    20aa:	05 96       	adiw	r24, 0x05	; 5
    20ac:	b8 01       	movw	r22, r16
    20ae:	0e 94 bc 14 	call	0x2978	; 0x2978 <__unpack_f>
    20b2:	8a 89       	ldd	r24, Y+18	; 0x12
    20b4:	91 e0       	ldi	r25, 0x01	; 1
    20b6:	89 27       	eor	r24, r25
    20b8:	8a 8b       	std	Y+18, r24	; 0x12
    20ba:	c7 01       	movw	r24, r14
    20bc:	b8 01       	movw	r22, r16
    20be:	ae 01       	movw	r20, r28
    20c0:	47 5e       	subi	r20, 0xE7	; 231
    20c2:	5f 4f       	sbci	r21, 0xFF	; 255
    20c4:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <_fpadd_parts>
    20c8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__pack_f>
    20cc:	a0 96       	adiw	r28, 0x20	; 32
    20ce:	e6 e0       	ldi	r30, 0x06	; 6
    20d0:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__epilogue_restores__+0x18>

000020d4 <__addsf3>:
    20d4:	a0 e2       	ldi	r26, 0x20	; 32
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e0 e7       	ldi	r30, 0x70	; 112
    20da:	f0 e1       	ldi	r31, 0x10	; 16
    20dc:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__prologue_saves__+0x18>
    20e0:	69 83       	std	Y+1, r22	; 0x01
    20e2:	7a 83       	std	Y+2, r23	; 0x02
    20e4:	8b 83       	std	Y+3, r24	; 0x03
    20e6:	9c 83       	std	Y+4, r25	; 0x04
    20e8:	2d 83       	std	Y+5, r18	; 0x05
    20ea:	3e 83       	std	Y+6, r19	; 0x06
    20ec:	4f 83       	std	Y+7, r20	; 0x07
    20ee:	58 87       	std	Y+8, r21	; 0x08
    20f0:	f9 e0       	ldi	r31, 0x09	; 9
    20f2:	ef 2e       	mov	r14, r31
    20f4:	f1 2c       	mov	r15, r1
    20f6:	ec 0e       	add	r14, r28
    20f8:	fd 1e       	adc	r15, r29
    20fa:	ce 01       	movw	r24, r28
    20fc:	01 96       	adiw	r24, 0x01	; 1
    20fe:	b7 01       	movw	r22, r14
    2100:	0e 94 bc 14 	call	0x2978	; 0x2978 <__unpack_f>
    2104:	8e 01       	movw	r16, r28
    2106:	0f 5e       	subi	r16, 0xEF	; 239
    2108:	1f 4f       	sbci	r17, 0xFF	; 255
    210a:	ce 01       	movw	r24, r28
    210c:	05 96       	adiw	r24, 0x05	; 5
    210e:	b8 01       	movw	r22, r16
    2110:	0e 94 bc 14 	call	0x2978	; 0x2978 <__unpack_f>
    2114:	c7 01       	movw	r24, r14
    2116:	b8 01       	movw	r22, r16
    2118:	ae 01       	movw	r20, r28
    211a:	47 5e       	subi	r20, 0xE7	; 231
    211c:	5f 4f       	sbci	r21, 0xFF	; 255
    211e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <_fpadd_parts>
    2122:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__pack_f>
    2126:	a0 96       	adiw	r28, 0x20	; 32
    2128:	e6 e0       	ldi	r30, 0x06	; 6
    212a:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__epilogue_restores__+0x18>

0000212e <__mulsf3>:
    212e:	a0 e2       	ldi	r26, 0x20	; 32
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	ed e9       	ldi	r30, 0x9D	; 157
    2134:	f0 e1       	ldi	r31, 0x10	; 16
    2136:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__prologue_saves__>
    213a:	69 83       	std	Y+1, r22	; 0x01
    213c:	7a 83       	std	Y+2, r23	; 0x02
    213e:	8b 83       	std	Y+3, r24	; 0x03
    2140:	9c 83       	std	Y+4, r25	; 0x04
    2142:	2d 83       	std	Y+5, r18	; 0x05
    2144:	3e 83       	std	Y+6, r19	; 0x06
    2146:	4f 83       	std	Y+7, r20	; 0x07
    2148:	58 87       	std	Y+8, r21	; 0x08
    214a:	ce 01       	movw	r24, r28
    214c:	01 96       	adiw	r24, 0x01	; 1
    214e:	be 01       	movw	r22, r28
    2150:	67 5f       	subi	r22, 0xF7	; 247
    2152:	7f 4f       	sbci	r23, 0xFF	; 255
    2154:	0e 94 bc 14 	call	0x2978	; 0x2978 <__unpack_f>
    2158:	ce 01       	movw	r24, r28
    215a:	05 96       	adiw	r24, 0x05	; 5
    215c:	be 01       	movw	r22, r28
    215e:	6f 5e       	subi	r22, 0xEF	; 239
    2160:	7f 4f       	sbci	r23, 0xFF	; 255
    2162:	0e 94 bc 14 	call	0x2978	; 0x2978 <__unpack_f>
    2166:	99 85       	ldd	r25, Y+9	; 0x09
    2168:	92 30       	cpi	r25, 0x02	; 2
    216a:	88 f0       	brcs	.+34     	; 0x218e <__mulsf3+0x60>
    216c:	89 89       	ldd	r24, Y+17	; 0x11
    216e:	82 30       	cpi	r24, 0x02	; 2
    2170:	c8 f0       	brcs	.+50     	; 0x21a4 <__mulsf3+0x76>
    2172:	94 30       	cpi	r25, 0x04	; 4
    2174:	19 f4       	brne	.+6      	; 0x217c <__mulsf3+0x4e>
    2176:	82 30       	cpi	r24, 0x02	; 2
    2178:	51 f4       	brne	.+20     	; 0x218e <__mulsf3+0x60>
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <__mulsf3+0x56>
    217c:	84 30       	cpi	r24, 0x04	; 4
    217e:	29 f4       	brne	.+10     	; 0x218a <__mulsf3+0x5c>
    2180:	92 30       	cpi	r25, 0x02	; 2
    2182:	81 f4       	brne	.+32     	; 0x21a4 <__mulsf3+0x76>
    2184:	80 ed       	ldi	r24, 0xD0	; 208
    2186:	94 e0       	ldi	r25, 0x04	; 4
    2188:	c6 c0       	rjmp	.+396    	; 0x2316 <__stack+0x117>
    218a:	92 30       	cpi	r25, 0x02	; 2
    218c:	49 f4       	brne	.+18     	; 0x21a0 <__mulsf3+0x72>
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	9a 85       	ldd	r25, Y+10	; 0x0a
    2192:	8a 89       	ldd	r24, Y+18	; 0x12
    2194:	98 13       	cpse	r25, r24
    2196:	21 e0       	ldi	r18, 0x01	; 1
    2198:	2a 87       	std	Y+10, r18	; 0x0a
    219a:	ce 01       	movw	r24, r28
    219c:	09 96       	adiw	r24, 0x09	; 9
    219e:	bb c0       	rjmp	.+374    	; 0x2316 <__stack+0x117>
    21a0:	82 30       	cpi	r24, 0x02	; 2
    21a2:	49 f4       	brne	.+18     	; 0x21b6 <__mulsf3+0x88>
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a8:	8a 89       	ldd	r24, Y+18	; 0x12
    21aa:	98 13       	cpse	r25, r24
    21ac:	21 e0       	ldi	r18, 0x01	; 1
    21ae:	2a 8b       	std	Y+18, r18	; 0x12
    21b0:	ce 01       	movw	r24, r28
    21b2:	41 96       	adiw	r24, 0x11	; 17
    21b4:	b0 c0       	rjmp	.+352    	; 0x2316 <__stack+0x117>
    21b6:	2d 84       	ldd	r2, Y+13	; 0x0d
    21b8:	3e 84       	ldd	r3, Y+14	; 0x0e
    21ba:	4f 84       	ldd	r4, Y+15	; 0x0f
    21bc:	58 88       	ldd	r5, Y+16	; 0x10
    21be:	6d 88       	ldd	r6, Y+21	; 0x15
    21c0:	7e 88       	ldd	r7, Y+22	; 0x16
    21c2:	8f 88       	ldd	r8, Y+23	; 0x17
    21c4:	98 8c       	ldd	r9, Y+24	; 0x18
    21c6:	ee 24       	eor	r14, r14
    21c8:	ff 24       	eor	r15, r15
    21ca:	87 01       	movw	r16, r14
    21cc:	aa 24       	eor	r10, r10
    21ce:	bb 24       	eor	r11, r11
    21d0:	65 01       	movw	r12, r10
    21d2:	40 e0       	ldi	r20, 0x00	; 0
    21d4:	50 e0       	ldi	r21, 0x00	; 0
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	70 e0       	ldi	r23, 0x00	; 0
    21da:	e0 e0       	ldi	r30, 0x00	; 0
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	c1 01       	movw	r24, r2
    21e0:	81 70       	andi	r24, 0x01	; 1
    21e2:	90 70       	andi	r25, 0x00	; 0
    21e4:	89 2b       	or	r24, r25
    21e6:	e9 f0       	breq	.+58     	; 0x2222 <__stack+0x23>
    21e8:	e6 0c       	add	r14, r6
    21ea:	f7 1c       	adc	r15, r7
    21ec:	08 1d       	adc	r16, r8
    21ee:	19 1d       	adc	r17, r9
    21f0:	9a 01       	movw	r18, r20
    21f2:	ab 01       	movw	r20, r22
    21f4:	2a 0d       	add	r18, r10
    21f6:	3b 1d       	adc	r19, r11
    21f8:	4c 1d       	adc	r20, r12
    21fa:	5d 1d       	adc	r21, r13
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	a0 e0       	ldi	r26, 0x00	; 0
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e6 14       	cp	r14, r6
    2206:	f7 04       	cpc	r15, r7
    2208:	08 05       	cpc	r16, r8
    220a:	19 05       	cpc	r17, r9
    220c:	20 f4       	brcc	.+8      	; 0x2216 <__stack+0x17>
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	a0 e0       	ldi	r26, 0x00	; 0
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	ba 01       	movw	r22, r20
    2218:	a9 01       	movw	r20, r18
    221a:	48 0f       	add	r20, r24
    221c:	59 1f       	adc	r21, r25
    221e:	6a 1f       	adc	r22, r26
    2220:	7b 1f       	adc	r23, r27
    2222:	aa 0c       	add	r10, r10
    2224:	bb 1c       	adc	r11, r11
    2226:	cc 1c       	adc	r12, r12
    2228:	dd 1c       	adc	r13, r13
    222a:	97 fe       	sbrs	r9, 7
    222c:	08 c0       	rjmp	.+16     	; 0x223e <__stack+0x3f>
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	a0 e0       	ldi	r26, 0x00	; 0
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	a8 2a       	or	r10, r24
    2238:	b9 2a       	or	r11, r25
    223a:	ca 2a       	or	r12, r26
    223c:	db 2a       	or	r13, r27
    223e:	31 96       	adiw	r30, 0x01	; 1
    2240:	e0 32       	cpi	r30, 0x20	; 32
    2242:	f1 05       	cpc	r31, r1
    2244:	49 f0       	breq	.+18     	; 0x2258 <__stack+0x59>
    2246:	66 0c       	add	r6, r6
    2248:	77 1c       	adc	r7, r7
    224a:	88 1c       	adc	r8, r8
    224c:	99 1c       	adc	r9, r9
    224e:	56 94       	lsr	r5
    2250:	47 94       	ror	r4
    2252:	37 94       	ror	r3
    2254:	27 94       	ror	r2
    2256:	c3 cf       	rjmp	.-122    	; 0x21de <__mulsf3+0xb0>
    2258:	fa 85       	ldd	r31, Y+10	; 0x0a
    225a:	ea 89       	ldd	r30, Y+18	; 0x12
    225c:	2b 89       	ldd	r18, Y+19	; 0x13
    225e:	3c 89       	ldd	r19, Y+20	; 0x14
    2260:	8b 85       	ldd	r24, Y+11	; 0x0b
    2262:	9c 85       	ldd	r25, Y+12	; 0x0c
    2264:	28 0f       	add	r18, r24
    2266:	39 1f       	adc	r19, r25
    2268:	2e 5f       	subi	r18, 0xFE	; 254
    226a:	3f 4f       	sbci	r19, 0xFF	; 255
    226c:	17 c0       	rjmp	.+46     	; 0x229c <__stack+0x9d>
    226e:	ca 01       	movw	r24, r20
    2270:	81 70       	andi	r24, 0x01	; 1
    2272:	90 70       	andi	r25, 0x00	; 0
    2274:	89 2b       	or	r24, r25
    2276:	61 f0       	breq	.+24     	; 0x2290 <__stack+0x91>
    2278:	16 95       	lsr	r17
    227a:	07 95       	ror	r16
    227c:	f7 94       	ror	r15
    227e:	e7 94       	ror	r14
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a0 e0       	ldi	r26, 0x00	; 0
    2286:	b0 e8       	ldi	r27, 0x80	; 128
    2288:	e8 2a       	or	r14, r24
    228a:	f9 2a       	or	r15, r25
    228c:	0a 2b       	or	r16, r26
    228e:	1b 2b       	or	r17, r27
    2290:	76 95       	lsr	r23
    2292:	67 95       	ror	r22
    2294:	57 95       	ror	r21
    2296:	47 95       	ror	r20
    2298:	2f 5f       	subi	r18, 0xFF	; 255
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	77 fd       	sbrc	r23, 7
    229e:	e7 cf       	rjmp	.-50     	; 0x226e <__stack+0x6f>
    22a0:	0c c0       	rjmp	.+24     	; 0x22ba <__stack+0xbb>
    22a2:	44 0f       	add	r20, r20
    22a4:	55 1f       	adc	r21, r21
    22a6:	66 1f       	adc	r22, r22
    22a8:	77 1f       	adc	r23, r23
    22aa:	17 fd       	sbrc	r17, 7
    22ac:	41 60       	ori	r20, 0x01	; 1
    22ae:	ee 0c       	add	r14, r14
    22b0:	ff 1c       	adc	r15, r15
    22b2:	00 1f       	adc	r16, r16
    22b4:	11 1f       	adc	r17, r17
    22b6:	21 50       	subi	r18, 0x01	; 1
    22b8:	30 40       	sbci	r19, 0x00	; 0
    22ba:	40 30       	cpi	r20, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	59 07       	cpc	r21, r25
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	69 07       	cpc	r22, r25
    22c4:	90 e4       	ldi	r25, 0x40	; 64
    22c6:	79 07       	cpc	r23, r25
    22c8:	60 f3       	brcs	.-40     	; 0x22a2 <__stack+0xa3>
    22ca:	2b 8f       	std	Y+27, r18	; 0x1b
    22cc:	3c 8f       	std	Y+28, r19	; 0x1c
    22ce:	db 01       	movw	r26, r22
    22d0:	ca 01       	movw	r24, r20
    22d2:	8f 77       	andi	r24, 0x7F	; 127
    22d4:	90 70       	andi	r25, 0x00	; 0
    22d6:	a0 70       	andi	r26, 0x00	; 0
    22d8:	b0 70       	andi	r27, 0x00	; 0
    22da:	80 34       	cpi	r24, 0x40	; 64
    22dc:	91 05       	cpc	r25, r1
    22de:	a1 05       	cpc	r26, r1
    22e0:	b1 05       	cpc	r27, r1
    22e2:	61 f4       	brne	.+24     	; 0x22fc <__stack+0xfd>
    22e4:	47 fd       	sbrc	r20, 7
    22e6:	0a c0       	rjmp	.+20     	; 0x22fc <__stack+0xfd>
    22e8:	e1 14       	cp	r14, r1
    22ea:	f1 04       	cpc	r15, r1
    22ec:	01 05       	cpc	r16, r1
    22ee:	11 05       	cpc	r17, r1
    22f0:	29 f0       	breq	.+10     	; 0x22fc <__stack+0xfd>
    22f2:	40 5c       	subi	r20, 0xC0	; 192
    22f4:	5f 4f       	sbci	r21, 0xFF	; 255
    22f6:	6f 4f       	sbci	r22, 0xFF	; 255
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	40 78       	andi	r20, 0x80	; 128
    22fc:	1a 8e       	std	Y+26, r1	; 0x1a
    22fe:	fe 17       	cp	r31, r30
    2300:	11 f0       	breq	.+4      	; 0x2306 <__stack+0x107>
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	8a 8f       	std	Y+26, r24	; 0x1a
    2306:	4d 8f       	std	Y+29, r20	; 0x1d
    2308:	5e 8f       	std	Y+30, r21	; 0x1e
    230a:	6f 8f       	std	Y+31, r22	; 0x1f
    230c:	78 a3       	std	Y+32, r23	; 0x20
    230e:	83 e0       	ldi	r24, 0x03	; 3
    2310:	89 8f       	std	Y+25, r24	; 0x19
    2312:	ce 01       	movw	r24, r28
    2314:	49 96       	adiw	r24, 0x19	; 25
    2316:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__pack_f>
    231a:	a0 96       	adiw	r28, 0x20	; 32
    231c:	e2 e1       	ldi	r30, 0x12	; 18
    231e:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__epilogue_restores__>

00002322 <__divsf3>:
    2322:	a8 e1       	ldi	r26, 0x18	; 24
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e7 e9       	ldi	r30, 0x97	; 151
    2328:	f1 e1       	ldi	r31, 0x11	; 17
    232a:	0c 94 bc 15 	jmp	0x2b78	; 0x2b78 <__prologue_saves__+0x10>
    232e:	69 83       	std	Y+1, r22	; 0x01
    2330:	7a 83       	std	Y+2, r23	; 0x02
    2332:	8b 83       	std	Y+3, r24	; 0x03
    2334:	9c 83       	std	Y+4, r25	; 0x04
    2336:	2d 83       	std	Y+5, r18	; 0x05
    2338:	3e 83       	std	Y+6, r19	; 0x06
    233a:	4f 83       	std	Y+7, r20	; 0x07
    233c:	58 87       	std	Y+8, r21	; 0x08
    233e:	b9 e0       	ldi	r27, 0x09	; 9
    2340:	eb 2e       	mov	r14, r27
    2342:	f1 2c       	mov	r15, r1
    2344:	ec 0e       	add	r14, r28
    2346:	fd 1e       	adc	r15, r29
    2348:	ce 01       	movw	r24, r28
    234a:	01 96       	adiw	r24, 0x01	; 1
    234c:	b7 01       	movw	r22, r14
    234e:	0e 94 bc 14 	call	0x2978	; 0x2978 <__unpack_f>
    2352:	8e 01       	movw	r16, r28
    2354:	0f 5e       	subi	r16, 0xEF	; 239
    2356:	1f 4f       	sbci	r17, 0xFF	; 255
    2358:	ce 01       	movw	r24, r28
    235a:	05 96       	adiw	r24, 0x05	; 5
    235c:	b8 01       	movw	r22, r16
    235e:	0e 94 bc 14 	call	0x2978	; 0x2978 <__unpack_f>
    2362:	29 85       	ldd	r18, Y+9	; 0x09
    2364:	22 30       	cpi	r18, 0x02	; 2
    2366:	08 f4       	brcc	.+2      	; 0x236a <__divsf3+0x48>
    2368:	7e c0       	rjmp	.+252    	; 0x2466 <__divsf3+0x144>
    236a:	39 89       	ldd	r19, Y+17	; 0x11
    236c:	32 30       	cpi	r19, 0x02	; 2
    236e:	10 f4       	brcc	.+4      	; 0x2374 <__divsf3+0x52>
    2370:	b8 01       	movw	r22, r16
    2372:	7c c0       	rjmp	.+248    	; 0x246c <__divsf3+0x14a>
    2374:	8a 85       	ldd	r24, Y+10	; 0x0a
    2376:	9a 89       	ldd	r25, Y+18	; 0x12
    2378:	89 27       	eor	r24, r25
    237a:	8a 87       	std	Y+10, r24	; 0x0a
    237c:	24 30       	cpi	r18, 0x04	; 4
    237e:	11 f0       	breq	.+4      	; 0x2384 <__divsf3+0x62>
    2380:	22 30       	cpi	r18, 0x02	; 2
    2382:	31 f4       	brne	.+12     	; 0x2390 <__divsf3+0x6e>
    2384:	23 17       	cp	r18, r19
    2386:	09 f0       	breq	.+2      	; 0x238a <__divsf3+0x68>
    2388:	6e c0       	rjmp	.+220    	; 0x2466 <__divsf3+0x144>
    238a:	60 ed       	ldi	r22, 0xD0	; 208
    238c:	74 e0       	ldi	r23, 0x04	; 4
    238e:	6e c0       	rjmp	.+220    	; 0x246c <__divsf3+0x14a>
    2390:	34 30       	cpi	r19, 0x04	; 4
    2392:	39 f4       	brne	.+14     	; 0x23a2 <__divsf3+0x80>
    2394:	1d 86       	std	Y+13, r1	; 0x0d
    2396:	1e 86       	std	Y+14, r1	; 0x0e
    2398:	1f 86       	std	Y+15, r1	; 0x0f
    239a:	18 8a       	std	Y+16, r1	; 0x10
    239c:	1c 86       	std	Y+12, r1	; 0x0c
    239e:	1b 86       	std	Y+11, r1	; 0x0b
    23a0:	04 c0       	rjmp	.+8      	; 0x23aa <__divsf3+0x88>
    23a2:	32 30       	cpi	r19, 0x02	; 2
    23a4:	21 f4       	brne	.+8      	; 0x23ae <__divsf3+0x8c>
    23a6:	84 e0       	ldi	r24, 0x04	; 4
    23a8:	89 87       	std	Y+9, r24	; 0x09
    23aa:	b7 01       	movw	r22, r14
    23ac:	5f c0       	rjmp	.+190    	; 0x246c <__divsf3+0x14a>
    23ae:	2b 85       	ldd	r18, Y+11	; 0x0b
    23b0:	3c 85       	ldd	r19, Y+12	; 0x0c
    23b2:	8b 89       	ldd	r24, Y+19	; 0x13
    23b4:	9c 89       	ldd	r25, Y+20	; 0x14
    23b6:	28 1b       	sub	r18, r24
    23b8:	39 0b       	sbc	r19, r25
    23ba:	3c 87       	std	Y+12, r19	; 0x0c
    23bc:	2b 87       	std	Y+11, r18	; 0x0b
    23be:	ed 84       	ldd	r14, Y+13	; 0x0d
    23c0:	fe 84       	ldd	r15, Y+14	; 0x0e
    23c2:	0f 85       	ldd	r16, Y+15	; 0x0f
    23c4:	18 89       	ldd	r17, Y+16	; 0x10
    23c6:	ad 88       	ldd	r10, Y+21	; 0x15
    23c8:	be 88       	ldd	r11, Y+22	; 0x16
    23ca:	cf 88       	ldd	r12, Y+23	; 0x17
    23cc:	d8 8c       	ldd	r13, Y+24	; 0x18
    23ce:	ea 14       	cp	r14, r10
    23d0:	fb 04       	cpc	r15, r11
    23d2:	0c 05       	cpc	r16, r12
    23d4:	1d 05       	cpc	r17, r13
    23d6:	40 f4       	brcc	.+16     	; 0x23e8 <__divsf3+0xc6>
    23d8:	ee 0c       	add	r14, r14
    23da:	ff 1c       	adc	r15, r15
    23dc:	00 1f       	adc	r16, r16
    23de:	11 1f       	adc	r17, r17
    23e0:	21 50       	subi	r18, 0x01	; 1
    23e2:	30 40       	sbci	r19, 0x00	; 0
    23e4:	3c 87       	std	Y+12, r19	; 0x0c
    23e6:	2b 87       	std	Y+11, r18	; 0x0b
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e0       	ldi	r20, 0x00	; 0
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	a0 e0       	ldi	r26, 0x00	; 0
    23f6:	b0 e4       	ldi	r27, 0x40	; 64
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	70 e0       	ldi	r23, 0x00	; 0
    23fc:	ea 14       	cp	r14, r10
    23fe:	fb 04       	cpc	r15, r11
    2400:	0c 05       	cpc	r16, r12
    2402:	1d 05       	cpc	r17, r13
    2404:	40 f0       	brcs	.+16     	; 0x2416 <__divsf3+0xf4>
    2406:	28 2b       	or	r18, r24
    2408:	39 2b       	or	r19, r25
    240a:	4a 2b       	or	r20, r26
    240c:	5b 2b       	or	r21, r27
    240e:	ea 18       	sub	r14, r10
    2410:	fb 08       	sbc	r15, r11
    2412:	0c 09       	sbc	r16, r12
    2414:	1d 09       	sbc	r17, r13
    2416:	b6 95       	lsr	r27
    2418:	a7 95       	ror	r26
    241a:	97 95       	ror	r25
    241c:	87 95       	ror	r24
    241e:	ee 0c       	add	r14, r14
    2420:	ff 1c       	adc	r15, r15
    2422:	00 1f       	adc	r16, r16
    2424:	11 1f       	adc	r17, r17
    2426:	6f 5f       	subi	r22, 0xFF	; 255
    2428:	7f 4f       	sbci	r23, 0xFF	; 255
    242a:	6f 31       	cpi	r22, 0x1F	; 31
    242c:	71 05       	cpc	r23, r1
    242e:	31 f7       	brne	.-52     	; 0x23fc <__divsf3+0xda>
    2430:	da 01       	movw	r26, r20
    2432:	c9 01       	movw	r24, r18
    2434:	8f 77       	andi	r24, 0x7F	; 127
    2436:	90 70       	andi	r25, 0x00	; 0
    2438:	a0 70       	andi	r26, 0x00	; 0
    243a:	b0 70       	andi	r27, 0x00	; 0
    243c:	80 34       	cpi	r24, 0x40	; 64
    243e:	91 05       	cpc	r25, r1
    2440:	a1 05       	cpc	r26, r1
    2442:	b1 05       	cpc	r27, r1
    2444:	61 f4       	brne	.+24     	; 0x245e <__divsf3+0x13c>
    2446:	27 fd       	sbrc	r18, 7
    2448:	0a c0       	rjmp	.+20     	; 0x245e <__divsf3+0x13c>
    244a:	e1 14       	cp	r14, r1
    244c:	f1 04       	cpc	r15, r1
    244e:	01 05       	cpc	r16, r1
    2450:	11 05       	cpc	r17, r1
    2452:	29 f0       	breq	.+10     	; 0x245e <__divsf3+0x13c>
    2454:	20 5c       	subi	r18, 0xC0	; 192
    2456:	3f 4f       	sbci	r19, 0xFF	; 255
    2458:	4f 4f       	sbci	r20, 0xFF	; 255
    245a:	5f 4f       	sbci	r21, 0xFF	; 255
    245c:	20 78       	andi	r18, 0x80	; 128
    245e:	2d 87       	std	Y+13, r18	; 0x0d
    2460:	3e 87       	std	Y+14, r19	; 0x0e
    2462:	4f 87       	std	Y+15, r20	; 0x0f
    2464:	58 8b       	std	Y+16, r21	; 0x10
    2466:	be 01       	movw	r22, r28
    2468:	67 5f       	subi	r22, 0xF7	; 247
    246a:	7f 4f       	sbci	r23, 0xFF	; 255
    246c:	cb 01       	movw	r24, r22
    246e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__pack_f>
    2472:	68 96       	adiw	r28, 0x18	; 24
    2474:	ea e0       	ldi	r30, 0x0A	; 10
    2476:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <__epilogue_restores__+0x10>

0000247a <__gesf2>:
    247a:	a8 e1       	ldi	r26, 0x18	; 24
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e3 e4       	ldi	r30, 0x43	; 67
    2480:	f2 e1       	ldi	r31, 0x12	; 18
    2482:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__prologue_saves__+0x18>
    2486:	69 83       	std	Y+1, r22	; 0x01
    2488:	7a 83       	std	Y+2, r23	; 0x02
    248a:	8b 83       	std	Y+3, r24	; 0x03
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	2d 83       	std	Y+5, r18	; 0x05
    2490:	3e 83       	std	Y+6, r19	; 0x06
    2492:	4f 83       	std	Y+7, r20	; 0x07
    2494:	58 87       	std	Y+8, r21	; 0x08
    2496:	89 e0       	ldi	r24, 0x09	; 9
    2498:	e8 2e       	mov	r14, r24
    249a:	f1 2c       	mov	r15, r1
    249c:	ec 0e       	add	r14, r28
    249e:	fd 1e       	adc	r15, r29
    24a0:	ce 01       	movw	r24, r28
    24a2:	01 96       	adiw	r24, 0x01	; 1
    24a4:	b7 01       	movw	r22, r14
    24a6:	0e 94 bc 14 	call	0x2978	; 0x2978 <__unpack_f>
    24aa:	8e 01       	movw	r16, r28
    24ac:	0f 5e       	subi	r16, 0xEF	; 239
    24ae:	1f 4f       	sbci	r17, 0xFF	; 255
    24b0:	ce 01       	movw	r24, r28
    24b2:	05 96       	adiw	r24, 0x05	; 5
    24b4:	b8 01       	movw	r22, r16
    24b6:	0e 94 bc 14 	call	0x2978	; 0x2978 <__unpack_f>
    24ba:	89 85       	ldd	r24, Y+9	; 0x09
    24bc:	82 30       	cpi	r24, 0x02	; 2
    24be:	40 f0       	brcs	.+16     	; 0x24d0 <__gesf2+0x56>
    24c0:	89 89       	ldd	r24, Y+17	; 0x11
    24c2:	82 30       	cpi	r24, 0x02	; 2
    24c4:	28 f0       	brcs	.+10     	; 0x24d0 <__gesf2+0x56>
    24c6:	c7 01       	movw	r24, r14
    24c8:	b8 01       	movw	r22, r16
    24ca:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__fpcmp_parts_f>
    24ce:	01 c0       	rjmp	.+2      	; 0x24d2 <__gesf2+0x58>
    24d0:	8f ef       	ldi	r24, 0xFF	; 255
    24d2:	68 96       	adiw	r28, 0x18	; 24
    24d4:	e6 e0       	ldi	r30, 0x06	; 6
    24d6:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__epilogue_restores__+0x18>

000024da <__floatsisf>:
    24da:	a8 e0       	ldi	r26, 0x08	; 8
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e3 e7       	ldi	r30, 0x73	; 115
    24e0:	f2 e1       	ldi	r31, 0x12	; 18
    24e2:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__+0x12>
    24e6:	9b 01       	movw	r18, r22
    24e8:	ac 01       	movw	r20, r24
    24ea:	83 e0       	ldi	r24, 0x03	; 3
    24ec:	89 83       	std	Y+1, r24	; 0x01
    24ee:	da 01       	movw	r26, r20
    24f0:	c9 01       	movw	r24, r18
    24f2:	88 27       	eor	r24, r24
    24f4:	b7 fd       	sbrc	r27, 7
    24f6:	83 95       	inc	r24
    24f8:	99 27       	eor	r25, r25
    24fa:	aa 27       	eor	r26, r26
    24fc:	bb 27       	eor	r27, r27
    24fe:	b8 2e       	mov	r11, r24
    2500:	21 15       	cp	r18, r1
    2502:	31 05       	cpc	r19, r1
    2504:	41 05       	cpc	r20, r1
    2506:	51 05       	cpc	r21, r1
    2508:	19 f4       	brne	.+6      	; 0x2510 <__floatsisf+0x36>
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	3a c0       	rjmp	.+116    	; 0x2584 <__floatsisf+0xaa>
    2510:	88 23       	and	r24, r24
    2512:	a9 f0       	breq	.+42     	; 0x253e <__floatsisf+0x64>
    2514:	20 30       	cpi	r18, 0x00	; 0
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	38 07       	cpc	r19, r24
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	48 07       	cpc	r20, r24
    251e:	80 e8       	ldi	r24, 0x80	; 128
    2520:	58 07       	cpc	r21, r24
    2522:	29 f4       	brne	.+10     	; 0x252e <__floatsisf+0x54>
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	70 e0       	ldi	r23, 0x00	; 0
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	9f ec       	ldi	r25, 0xCF	; 207
    252c:	30 c0       	rjmp	.+96     	; 0x258e <__floatsisf+0xb4>
    252e:	ee 24       	eor	r14, r14
    2530:	ff 24       	eor	r15, r15
    2532:	87 01       	movw	r16, r14
    2534:	e2 1a       	sub	r14, r18
    2536:	f3 0a       	sbc	r15, r19
    2538:	04 0b       	sbc	r16, r20
    253a:	15 0b       	sbc	r17, r21
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <__floatsisf+0x68>
    253e:	79 01       	movw	r14, r18
    2540:	8a 01       	movw	r16, r20
    2542:	8e e1       	ldi	r24, 0x1E	; 30
    2544:	c8 2e       	mov	r12, r24
    2546:	d1 2c       	mov	r13, r1
    2548:	dc 82       	std	Y+4, r13	; 0x04
    254a:	cb 82       	std	Y+3, r12	; 0x03
    254c:	ed 82       	std	Y+5, r14	; 0x05
    254e:	fe 82       	std	Y+6, r15	; 0x06
    2550:	0f 83       	std	Y+7, r16	; 0x07
    2552:	18 87       	std	Y+8, r17	; 0x08
    2554:	c8 01       	movw	r24, r16
    2556:	b7 01       	movw	r22, r14
    2558:	0e 94 98 13 	call	0x2730	; 0x2730 <__clzsi2>
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	18 16       	cp	r1, r24
    2560:	19 06       	cpc	r1, r25
    2562:	84 f4       	brge	.+32     	; 0x2584 <__floatsisf+0xaa>
    2564:	08 2e       	mov	r0, r24
    2566:	04 c0       	rjmp	.+8      	; 0x2570 <__floatsisf+0x96>
    2568:	ee 0c       	add	r14, r14
    256a:	ff 1c       	adc	r15, r15
    256c:	00 1f       	adc	r16, r16
    256e:	11 1f       	adc	r17, r17
    2570:	0a 94       	dec	r0
    2572:	d2 f7       	brpl	.-12     	; 0x2568 <__floatsisf+0x8e>
    2574:	ed 82       	std	Y+5, r14	; 0x05
    2576:	fe 82       	std	Y+6, r15	; 0x06
    2578:	0f 83       	std	Y+7, r16	; 0x07
    257a:	18 87       	std	Y+8, r17	; 0x08
    257c:	c8 1a       	sub	r12, r24
    257e:	d9 0a       	sbc	r13, r25
    2580:	dc 82       	std	Y+4, r13	; 0x04
    2582:	cb 82       	std	Y+3, r12	; 0x03
    2584:	ba 82       	std	Y+2, r11	; 0x02
    2586:	ce 01       	movw	r24, r28
    2588:	01 96       	adiw	r24, 0x01	; 1
    258a:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__pack_f>
    258e:	28 96       	adiw	r28, 0x08	; 8
    2590:	e9 e0       	ldi	r30, 0x09	; 9
    2592:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__+0x12>

00002596 <__fixsfsi>:
    2596:	ac e0       	ldi	r26, 0x0C	; 12
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	e1 ed       	ldi	r30, 0xD1	; 209
    259c:	f2 e1       	ldi	r31, 0x12	; 18
    259e:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__prologue_saves__+0x20>
    25a2:	69 83       	std	Y+1, r22	; 0x01
    25a4:	7a 83       	std	Y+2, r23	; 0x02
    25a6:	8b 83       	std	Y+3, r24	; 0x03
    25a8:	9c 83       	std	Y+4, r25	; 0x04
    25aa:	ce 01       	movw	r24, r28
    25ac:	01 96       	adiw	r24, 0x01	; 1
    25ae:	be 01       	movw	r22, r28
    25b0:	6b 5f       	subi	r22, 0xFB	; 251
    25b2:	7f 4f       	sbci	r23, 0xFF	; 255
    25b4:	0e 94 bc 14 	call	0x2978	; 0x2978 <__unpack_f>
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	82 30       	cpi	r24, 0x02	; 2
    25bc:	61 f1       	breq	.+88     	; 0x2616 <__fixsfsi+0x80>
    25be:	82 30       	cpi	r24, 0x02	; 2
    25c0:	50 f1       	brcs	.+84     	; 0x2616 <__fixsfsi+0x80>
    25c2:	84 30       	cpi	r24, 0x04	; 4
    25c4:	21 f4       	brne	.+8      	; 0x25ce <__fixsfsi+0x38>
    25c6:	8e 81       	ldd	r24, Y+6	; 0x06
    25c8:	88 23       	and	r24, r24
    25ca:	51 f1       	breq	.+84     	; 0x2620 <__fixsfsi+0x8a>
    25cc:	2e c0       	rjmp	.+92     	; 0x262a <__fixsfsi+0x94>
    25ce:	2f 81       	ldd	r18, Y+7	; 0x07
    25d0:	38 85       	ldd	r19, Y+8	; 0x08
    25d2:	37 fd       	sbrc	r19, 7
    25d4:	20 c0       	rjmp	.+64     	; 0x2616 <__fixsfsi+0x80>
    25d6:	6e 81       	ldd	r22, Y+6	; 0x06
    25d8:	2f 31       	cpi	r18, 0x1F	; 31
    25da:	31 05       	cpc	r19, r1
    25dc:	1c f0       	brlt	.+6      	; 0x25e4 <__fixsfsi+0x4e>
    25de:	66 23       	and	r22, r22
    25e0:	f9 f0       	breq	.+62     	; 0x2620 <__fixsfsi+0x8a>
    25e2:	23 c0       	rjmp	.+70     	; 0x262a <__fixsfsi+0x94>
    25e4:	8e e1       	ldi	r24, 0x1E	; 30
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	82 1b       	sub	r24, r18
    25ea:	93 0b       	sbc	r25, r19
    25ec:	29 85       	ldd	r18, Y+9	; 0x09
    25ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    25f0:	4b 85       	ldd	r20, Y+11	; 0x0b
    25f2:	5c 85       	ldd	r21, Y+12	; 0x0c
    25f4:	04 c0       	rjmp	.+8      	; 0x25fe <__fixsfsi+0x68>
    25f6:	56 95       	lsr	r21
    25f8:	47 95       	ror	r20
    25fa:	37 95       	ror	r19
    25fc:	27 95       	ror	r18
    25fe:	8a 95       	dec	r24
    2600:	d2 f7       	brpl	.-12     	; 0x25f6 <__fixsfsi+0x60>
    2602:	66 23       	and	r22, r22
    2604:	b1 f0       	breq	.+44     	; 0x2632 <__fixsfsi+0x9c>
    2606:	50 95       	com	r21
    2608:	40 95       	com	r20
    260a:	30 95       	com	r19
    260c:	21 95       	neg	r18
    260e:	3f 4f       	sbci	r19, 0xFF	; 255
    2610:	4f 4f       	sbci	r20, 0xFF	; 255
    2612:	5f 4f       	sbci	r21, 0xFF	; 255
    2614:	0e c0       	rjmp	.+28     	; 0x2632 <__fixsfsi+0x9c>
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e0       	ldi	r20, 0x00	; 0
    261c:	50 e0       	ldi	r21, 0x00	; 0
    261e:	09 c0       	rjmp	.+18     	; 0x2632 <__fixsfsi+0x9c>
    2620:	2f ef       	ldi	r18, 0xFF	; 255
    2622:	3f ef       	ldi	r19, 0xFF	; 255
    2624:	4f ef       	ldi	r20, 0xFF	; 255
    2626:	5f e7       	ldi	r21, 0x7F	; 127
    2628:	04 c0       	rjmp	.+8      	; 0x2632 <__fixsfsi+0x9c>
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	50 e8       	ldi	r21, 0x80	; 128
    2632:	b9 01       	movw	r22, r18
    2634:	ca 01       	movw	r24, r20
    2636:	2c 96       	adiw	r28, 0x0c	; 12
    2638:	e2 e0       	ldi	r30, 0x02	; 2
    263a:	0c 94 e0 15 	jmp	0x2bc0	; 0x2bc0 <__epilogue_restores__+0x20>

0000263e <__floatunsisf>:
    263e:	a8 e0       	ldi	r26, 0x08	; 8
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	e5 e2       	ldi	r30, 0x25	; 37
    2644:	f3 e1       	ldi	r31, 0x13	; 19
    2646:	0c 94 bc 15 	jmp	0x2b78	; 0x2b78 <__prologue_saves__+0x10>
    264a:	7b 01       	movw	r14, r22
    264c:	8c 01       	movw	r16, r24
    264e:	61 15       	cp	r22, r1
    2650:	71 05       	cpc	r23, r1
    2652:	81 05       	cpc	r24, r1
    2654:	91 05       	cpc	r25, r1
    2656:	19 f4       	brne	.+6      	; 0x265e <__floatunsisf+0x20>
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	60 c0       	rjmp	.+192    	; 0x271e <__floatunsisf+0xe0>
    265e:	83 e0       	ldi	r24, 0x03	; 3
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	8e e1       	ldi	r24, 0x1E	; 30
    2664:	c8 2e       	mov	r12, r24
    2666:	d1 2c       	mov	r13, r1
    2668:	dc 82       	std	Y+4, r13	; 0x04
    266a:	cb 82       	std	Y+3, r12	; 0x03
    266c:	ed 82       	std	Y+5, r14	; 0x05
    266e:	fe 82       	std	Y+6, r15	; 0x06
    2670:	0f 83       	std	Y+7, r16	; 0x07
    2672:	18 87       	std	Y+8, r17	; 0x08
    2674:	c8 01       	movw	r24, r16
    2676:	b7 01       	movw	r22, r14
    2678:	0e 94 98 13 	call	0x2730	; 0x2730 <__clzsi2>
    267c:	fc 01       	movw	r30, r24
    267e:	31 97       	sbiw	r30, 0x01	; 1
    2680:	f7 ff       	sbrs	r31, 7
    2682:	3b c0       	rjmp	.+118    	; 0x26fa <__floatunsisf+0xbc>
    2684:	22 27       	eor	r18, r18
    2686:	33 27       	eor	r19, r19
    2688:	2e 1b       	sub	r18, r30
    268a:	3f 0b       	sbc	r19, r31
    268c:	57 01       	movw	r10, r14
    268e:	68 01       	movw	r12, r16
    2690:	02 2e       	mov	r0, r18
    2692:	04 c0       	rjmp	.+8      	; 0x269c <__floatunsisf+0x5e>
    2694:	d6 94       	lsr	r13
    2696:	c7 94       	ror	r12
    2698:	b7 94       	ror	r11
    269a:	a7 94       	ror	r10
    269c:	0a 94       	dec	r0
    269e:	d2 f7       	brpl	.-12     	; 0x2694 <__floatunsisf+0x56>
    26a0:	40 e0       	ldi	r20, 0x00	; 0
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	60 e0       	ldi	r22, 0x00	; 0
    26a6:	70 e0       	ldi	r23, 0x00	; 0
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	a0 e0       	ldi	r26, 0x00	; 0
    26ae:	b0 e0       	ldi	r27, 0x00	; 0
    26b0:	04 c0       	rjmp	.+8      	; 0x26ba <__floatunsisf+0x7c>
    26b2:	88 0f       	add	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	aa 1f       	adc	r26, r26
    26b8:	bb 1f       	adc	r27, r27
    26ba:	2a 95       	dec	r18
    26bc:	d2 f7       	brpl	.-12     	; 0x26b2 <__floatunsisf+0x74>
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	a1 09       	sbc	r26, r1
    26c2:	b1 09       	sbc	r27, r1
    26c4:	8e 21       	and	r24, r14
    26c6:	9f 21       	and	r25, r15
    26c8:	a0 23       	and	r26, r16
    26ca:	b1 23       	and	r27, r17
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	a1 05       	cpc	r26, r1
    26d0:	b1 05       	cpc	r27, r1
    26d2:	21 f0       	breq	.+8      	; 0x26dc <__floatunsisf+0x9e>
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	50 e0       	ldi	r21, 0x00	; 0
    26d8:	60 e0       	ldi	r22, 0x00	; 0
    26da:	70 e0       	ldi	r23, 0x00	; 0
    26dc:	4a 29       	or	r20, r10
    26de:	5b 29       	or	r21, r11
    26e0:	6c 29       	or	r22, r12
    26e2:	7d 29       	or	r23, r13
    26e4:	4d 83       	std	Y+5, r20	; 0x05
    26e6:	5e 83       	std	Y+6, r21	; 0x06
    26e8:	6f 83       	std	Y+7, r22	; 0x07
    26ea:	78 87       	std	Y+8, r23	; 0x08
    26ec:	8e e1       	ldi	r24, 0x1E	; 30
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	8e 1b       	sub	r24, r30
    26f2:	9f 0b       	sbc	r25, r31
    26f4:	9c 83       	std	Y+4, r25	; 0x04
    26f6:	8b 83       	std	Y+3, r24	; 0x03
    26f8:	12 c0       	rjmp	.+36     	; 0x271e <__floatunsisf+0xe0>
    26fa:	30 97       	sbiw	r30, 0x00	; 0
    26fc:	81 f0       	breq	.+32     	; 0x271e <__floatunsisf+0xe0>
    26fe:	0e 2e       	mov	r0, r30
    2700:	04 c0       	rjmp	.+8      	; 0x270a <__floatunsisf+0xcc>
    2702:	ee 0c       	add	r14, r14
    2704:	ff 1c       	adc	r15, r15
    2706:	00 1f       	adc	r16, r16
    2708:	11 1f       	adc	r17, r17
    270a:	0a 94       	dec	r0
    270c:	d2 f7       	brpl	.-12     	; 0x2702 <__floatunsisf+0xc4>
    270e:	ed 82       	std	Y+5, r14	; 0x05
    2710:	fe 82       	std	Y+6, r15	; 0x06
    2712:	0f 83       	std	Y+7, r16	; 0x07
    2714:	18 87       	std	Y+8, r17	; 0x08
    2716:	ce 1a       	sub	r12, r30
    2718:	df 0a       	sbc	r13, r31
    271a:	dc 82       	std	Y+4, r13	; 0x04
    271c:	cb 82       	std	Y+3, r12	; 0x03
    271e:	1a 82       	std	Y+2, r1	; 0x02
    2720:	ce 01       	movw	r24, r28
    2722:	01 96       	adiw	r24, 0x01	; 1
    2724:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__pack_f>
    2728:	28 96       	adiw	r28, 0x08	; 8
    272a:	ea e0       	ldi	r30, 0x0A	; 10
    272c:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <__epilogue_restores__+0x10>

00002730 <__clzsi2>:
    2730:	ef 92       	push	r14
    2732:	ff 92       	push	r15
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	7b 01       	movw	r14, r22
    273a:	8c 01       	movw	r16, r24
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	e8 16       	cp	r14, r24
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	f8 06       	cpc	r15, r24
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	08 07       	cpc	r16, r24
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	18 07       	cpc	r17, r24
    274c:	88 f4       	brcc	.+34     	; 0x2770 <__clzsi2+0x40>
    274e:	8f ef       	ldi	r24, 0xFF	; 255
    2750:	e8 16       	cp	r14, r24
    2752:	f1 04       	cpc	r15, r1
    2754:	01 05       	cpc	r16, r1
    2756:	11 05       	cpc	r17, r1
    2758:	31 f0       	breq	.+12     	; 0x2766 <__clzsi2+0x36>
    275a:	28 f0       	brcs	.+10     	; 0x2766 <__clzsi2+0x36>
    275c:	88 e0       	ldi	r24, 0x08	; 8
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	a0 e0       	ldi	r26, 0x00	; 0
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	17 c0       	rjmp	.+46     	; 0x2794 <__clzsi2+0x64>
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	a0 e0       	ldi	r26, 0x00	; 0
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	12 c0       	rjmp	.+36     	; 0x2794 <__clzsi2+0x64>
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	e8 16       	cp	r14, r24
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	f8 06       	cpc	r15, r24
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	08 07       	cpc	r16, r24
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	18 07       	cpc	r17, r24
    2780:	28 f0       	brcs	.+10     	; 0x278c <__clzsi2+0x5c>
    2782:	88 e1       	ldi	r24, 0x18	; 24
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	a0 e0       	ldi	r26, 0x00	; 0
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	04 c0       	rjmp	.+8      	; 0x2794 <__clzsi2+0x64>
    278c:	80 e1       	ldi	r24, 0x10	; 16
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	a0 e0       	ldi	r26, 0x00	; 0
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	20 e2       	ldi	r18, 0x20	; 32
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e0       	ldi	r20, 0x00	; 0
    279a:	50 e0       	ldi	r21, 0x00	; 0
    279c:	28 1b       	sub	r18, r24
    279e:	39 0b       	sbc	r19, r25
    27a0:	4a 0b       	sbc	r20, r26
    27a2:	5b 0b       	sbc	r21, r27
    27a4:	04 c0       	rjmp	.+8      	; 0x27ae <__clzsi2+0x7e>
    27a6:	16 95       	lsr	r17
    27a8:	07 95       	ror	r16
    27aa:	f7 94       	ror	r15
    27ac:	e7 94       	ror	r14
    27ae:	8a 95       	dec	r24
    27b0:	d2 f7       	brpl	.-12     	; 0x27a6 <__clzsi2+0x76>
    27b2:	f7 01       	movw	r30, r14
    27b4:	e8 52       	subi	r30, 0x28	; 40
    27b6:	fb 4f       	sbci	r31, 0xFB	; 251
    27b8:	80 81       	ld	r24, Z
    27ba:	28 1b       	sub	r18, r24
    27bc:	31 09       	sbc	r19, r1
    27be:	41 09       	sbc	r20, r1
    27c0:	51 09       	sbc	r21, r1
    27c2:	c9 01       	movw	r24, r18
    27c4:	1f 91       	pop	r17
    27c6:	0f 91       	pop	r16
    27c8:	ff 90       	pop	r15
    27ca:	ef 90       	pop	r14
    27cc:	08 95       	ret

000027ce <__pack_f>:
    27ce:	df 92       	push	r13
    27d0:	ef 92       	push	r14
    27d2:	ff 92       	push	r15
    27d4:	0f 93       	push	r16
    27d6:	1f 93       	push	r17
    27d8:	fc 01       	movw	r30, r24
    27da:	e4 80       	ldd	r14, Z+4	; 0x04
    27dc:	f5 80       	ldd	r15, Z+5	; 0x05
    27de:	06 81       	ldd	r16, Z+6	; 0x06
    27e0:	17 81       	ldd	r17, Z+7	; 0x07
    27e2:	d1 80       	ldd	r13, Z+1	; 0x01
    27e4:	80 81       	ld	r24, Z
    27e6:	82 30       	cpi	r24, 0x02	; 2
    27e8:	48 f4       	brcc	.+18     	; 0x27fc <__pack_f+0x2e>
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	a0 e1       	ldi	r26, 0x10	; 16
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e8 2a       	or	r14, r24
    27f4:	f9 2a       	or	r15, r25
    27f6:	0a 2b       	or	r16, r26
    27f8:	1b 2b       	or	r17, r27
    27fa:	a5 c0       	rjmp	.+330    	; 0x2946 <__pack_f+0x178>
    27fc:	84 30       	cpi	r24, 0x04	; 4
    27fe:	09 f4       	brne	.+2      	; 0x2802 <__pack_f+0x34>
    2800:	9f c0       	rjmp	.+318    	; 0x2940 <__pack_f+0x172>
    2802:	82 30       	cpi	r24, 0x02	; 2
    2804:	21 f4       	brne	.+8      	; 0x280e <__pack_f+0x40>
    2806:	ee 24       	eor	r14, r14
    2808:	ff 24       	eor	r15, r15
    280a:	87 01       	movw	r16, r14
    280c:	05 c0       	rjmp	.+10     	; 0x2818 <__pack_f+0x4a>
    280e:	e1 14       	cp	r14, r1
    2810:	f1 04       	cpc	r15, r1
    2812:	01 05       	cpc	r16, r1
    2814:	11 05       	cpc	r17, r1
    2816:	19 f4       	brne	.+6      	; 0x281e <__pack_f+0x50>
    2818:	e0 e0       	ldi	r30, 0x00	; 0
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	96 c0       	rjmp	.+300    	; 0x294a <__pack_f+0x17c>
    281e:	62 81       	ldd	r22, Z+2	; 0x02
    2820:	73 81       	ldd	r23, Z+3	; 0x03
    2822:	9f ef       	ldi	r25, 0xFF	; 255
    2824:	62 38       	cpi	r22, 0x82	; 130
    2826:	79 07       	cpc	r23, r25
    2828:	0c f0       	brlt	.+2      	; 0x282c <__pack_f+0x5e>
    282a:	5b c0       	rjmp	.+182    	; 0x28e2 <__pack_f+0x114>
    282c:	22 e8       	ldi	r18, 0x82	; 130
    282e:	3f ef       	ldi	r19, 0xFF	; 255
    2830:	26 1b       	sub	r18, r22
    2832:	37 0b       	sbc	r19, r23
    2834:	2a 31       	cpi	r18, 0x1A	; 26
    2836:	31 05       	cpc	r19, r1
    2838:	2c f0       	brlt	.+10     	; 0x2844 <__pack_f+0x76>
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e0       	ldi	r20, 0x00	; 0
    2840:	50 e0       	ldi	r21, 0x00	; 0
    2842:	2a c0       	rjmp	.+84     	; 0x2898 <__pack_f+0xca>
    2844:	b8 01       	movw	r22, r16
    2846:	a7 01       	movw	r20, r14
    2848:	02 2e       	mov	r0, r18
    284a:	04 c0       	rjmp	.+8      	; 0x2854 <__pack_f+0x86>
    284c:	76 95       	lsr	r23
    284e:	67 95       	ror	r22
    2850:	57 95       	ror	r21
    2852:	47 95       	ror	r20
    2854:	0a 94       	dec	r0
    2856:	d2 f7       	brpl	.-12     	; 0x284c <__pack_f+0x7e>
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	a0 e0       	ldi	r26, 0x00	; 0
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	04 c0       	rjmp	.+8      	; 0x286a <__pack_f+0x9c>
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	aa 1f       	adc	r26, r26
    2868:	bb 1f       	adc	r27, r27
    286a:	2a 95       	dec	r18
    286c:	d2 f7       	brpl	.-12     	; 0x2862 <__pack_f+0x94>
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	a1 09       	sbc	r26, r1
    2872:	b1 09       	sbc	r27, r1
    2874:	8e 21       	and	r24, r14
    2876:	9f 21       	and	r25, r15
    2878:	a0 23       	and	r26, r16
    287a:	b1 23       	and	r27, r17
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	a1 05       	cpc	r26, r1
    2880:	b1 05       	cpc	r27, r1
    2882:	21 f0       	breq	.+8      	; 0x288c <__pack_f+0xbe>
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	a0 e0       	ldi	r26, 0x00	; 0
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	9a 01       	movw	r18, r20
    288e:	ab 01       	movw	r20, r22
    2890:	28 2b       	or	r18, r24
    2892:	39 2b       	or	r19, r25
    2894:	4a 2b       	or	r20, r26
    2896:	5b 2b       	or	r21, r27
    2898:	da 01       	movw	r26, r20
    289a:	c9 01       	movw	r24, r18
    289c:	8f 77       	andi	r24, 0x7F	; 127
    289e:	90 70       	andi	r25, 0x00	; 0
    28a0:	a0 70       	andi	r26, 0x00	; 0
    28a2:	b0 70       	andi	r27, 0x00	; 0
    28a4:	80 34       	cpi	r24, 0x40	; 64
    28a6:	91 05       	cpc	r25, r1
    28a8:	a1 05       	cpc	r26, r1
    28aa:	b1 05       	cpc	r27, r1
    28ac:	39 f4       	brne	.+14     	; 0x28bc <__pack_f+0xee>
    28ae:	27 ff       	sbrs	r18, 7
    28b0:	09 c0       	rjmp	.+18     	; 0x28c4 <__pack_f+0xf6>
    28b2:	20 5c       	subi	r18, 0xC0	; 192
    28b4:	3f 4f       	sbci	r19, 0xFF	; 255
    28b6:	4f 4f       	sbci	r20, 0xFF	; 255
    28b8:	5f 4f       	sbci	r21, 0xFF	; 255
    28ba:	04 c0       	rjmp	.+8      	; 0x28c4 <__pack_f+0xf6>
    28bc:	21 5c       	subi	r18, 0xC1	; 193
    28be:	3f 4f       	sbci	r19, 0xFF	; 255
    28c0:	4f 4f       	sbci	r20, 0xFF	; 255
    28c2:	5f 4f       	sbci	r21, 0xFF	; 255
    28c4:	e0 e0       	ldi	r30, 0x00	; 0
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	20 30       	cpi	r18, 0x00	; 0
    28ca:	a0 e0       	ldi	r26, 0x00	; 0
    28cc:	3a 07       	cpc	r19, r26
    28ce:	a0 e0       	ldi	r26, 0x00	; 0
    28d0:	4a 07       	cpc	r20, r26
    28d2:	a0 e4       	ldi	r26, 0x40	; 64
    28d4:	5a 07       	cpc	r21, r26
    28d6:	10 f0       	brcs	.+4      	; 0x28dc <__pack_f+0x10e>
    28d8:	e1 e0       	ldi	r30, 0x01	; 1
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	79 01       	movw	r14, r18
    28de:	8a 01       	movw	r16, r20
    28e0:	27 c0       	rjmp	.+78     	; 0x2930 <__pack_f+0x162>
    28e2:	60 38       	cpi	r22, 0x80	; 128
    28e4:	71 05       	cpc	r23, r1
    28e6:	64 f5       	brge	.+88     	; 0x2940 <__pack_f+0x172>
    28e8:	fb 01       	movw	r30, r22
    28ea:	e1 58       	subi	r30, 0x81	; 129
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	d8 01       	movw	r26, r16
    28f0:	c7 01       	movw	r24, r14
    28f2:	8f 77       	andi	r24, 0x7F	; 127
    28f4:	90 70       	andi	r25, 0x00	; 0
    28f6:	a0 70       	andi	r26, 0x00	; 0
    28f8:	b0 70       	andi	r27, 0x00	; 0
    28fa:	80 34       	cpi	r24, 0x40	; 64
    28fc:	91 05       	cpc	r25, r1
    28fe:	a1 05       	cpc	r26, r1
    2900:	b1 05       	cpc	r27, r1
    2902:	39 f4       	brne	.+14     	; 0x2912 <__pack_f+0x144>
    2904:	e7 fe       	sbrs	r14, 7
    2906:	0d c0       	rjmp	.+26     	; 0x2922 <__pack_f+0x154>
    2908:	80 e4       	ldi	r24, 0x40	; 64
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	a0 e0       	ldi	r26, 0x00	; 0
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	04 c0       	rjmp	.+8      	; 0x291a <__pack_f+0x14c>
    2912:	8f e3       	ldi	r24, 0x3F	; 63
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	a0 e0       	ldi	r26, 0x00	; 0
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	e8 0e       	add	r14, r24
    291c:	f9 1e       	adc	r15, r25
    291e:	0a 1f       	adc	r16, r26
    2920:	1b 1f       	adc	r17, r27
    2922:	17 ff       	sbrs	r17, 7
    2924:	05 c0       	rjmp	.+10     	; 0x2930 <__pack_f+0x162>
    2926:	16 95       	lsr	r17
    2928:	07 95       	ror	r16
    292a:	f7 94       	ror	r15
    292c:	e7 94       	ror	r14
    292e:	31 96       	adiw	r30, 0x01	; 1
    2930:	87 e0       	ldi	r24, 0x07	; 7
    2932:	16 95       	lsr	r17
    2934:	07 95       	ror	r16
    2936:	f7 94       	ror	r15
    2938:	e7 94       	ror	r14
    293a:	8a 95       	dec	r24
    293c:	d1 f7       	brne	.-12     	; 0x2932 <__pack_f+0x164>
    293e:	05 c0       	rjmp	.+10     	; 0x294a <__pack_f+0x17c>
    2940:	ee 24       	eor	r14, r14
    2942:	ff 24       	eor	r15, r15
    2944:	87 01       	movw	r16, r14
    2946:	ef ef       	ldi	r30, 0xFF	; 255
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	6e 2f       	mov	r22, r30
    294c:	67 95       	ror	r22
    294e:	66 27       	eor	r22, r22
    2950:	67 95       	ror	r22
    2952:	90 2f       	mov	r25, r16
    2954:	9f 77       	andi	r25, 0x7F	; 127
    2956:	d7 94       	ror	r13
    2958:	dd 24       	eor	r13, r13
    295a:	d7 94       	ror	r13
    295c:	8e 2f       	mov	r24, r30
    295e:	86 95       	lsr	r24
    2960:	49 2f       	mov	r20, r25
    2962:	46 2b       	or	r20, r22
    2964:	58 2f       	mov	r21, r24
    2966:	5d 29       	or	r21, r13
    2968:	b7 01       	movw	r22, r14
    296a:	ca 01       	movw	r24, r20
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	ff 90       	pop	r15
    2972:	ef 90       	pop	r14
    2974:	df 90       	pop	r13
    2976:	08 95       	ret

00002978 <__unpack_f>:
    2978:	fc 01       	movw	r30, r24
    297a:	db 01       	movw	r26, r22
    297c:	40 81       	ld	r20, Z
    297e:	51 81       	ldd	r21, Z+1	; 0x01
    2980:	22 81       	ldd	r18, Z+2	; 0x02
    2982:	62 2f       	mov	r22, r18
    2984:	6f 77       	andi	r22, 0x7F	; 127
    2986:	70 e0       	ldi	r23, 0x00	; 0
    2988:	22 1f       	adc	r18, r18
    298a:	22 27       	eor	r18, r18
    298c:	22 1f       	adc	r18, r18
    298e:	93 81       	ldd	r25, Z+3	; 0x03
    2990:	89 2f       	mov	r24, r25
    2992:	88 0f       	add	r24, r24
    2994:	82 2b       	or	r24, r18
    2996:	28 2f       	mov	r18, r24
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	99 1f       	adc	r25, r25
    299c:	99 27       	eor	r25, r25
    299e:	99 1f       	adc	r25, r25
    29a0:	11 96       	adiw	r26, 0x01	; 1
    29a2:	9c 93       	st	X, r25
    29a4:	11 97       	sbiw	r26, 0x01	; 1
    29a6:	21 15       	cp	r18, r1
    29a8:	31 05       	cpc	r19, r1
    29aa:	a9 f5       	brne	.+106    	; 0x2a16 <__unpack_f+0x9e>
    29ac:	41 15       	cp	r20, r1
    29ae:	51 05       	cpc	r21, r1
    29b0:	61 05       	cpc	r22, r1
    29b2:	71 05       	cpc	r23, r1
    29b4:	11 f4       	brne	.+4      	; 0x29ba <__unpack_f+0x42>
    29b6:	82 e0       	ldi	r24, 0x02	; 2
    29b8:	37 c0       	rjmp	.+110    	; 0x2a28 <__unpack_f+0xb0>
    29ba:	82 e8       	ldi	r24, 0x82	; 130
    29bc:	9f ef       	ldi	r25, 0xFF	; 255
    29be:	13 96       	adiw	r26, 0x03	; 3
    29c0:	9c 93       	st	X, r25
    29c2:	8e 93       	st	-X, r24
    29c4:	12 97       	sbiw	r26, 0x02	; 2
    29c6:	9a 01       	movw	r18, r20
    29c8:	ab 01       	movw	r20, r22
    29ca:	67 e0       	ldi	r22, 0x07	; 7
    29cc:	22 0f       	add	r18, r18
    29ce:	33 1f       	adc	r19, r19
    29d0:	44 1f       	adc	r20, r20
    29d2:	55 1f       	adc	r21, r21
    29d4:	6a 95       	dec	r22
    29d6:	d1 f7       	brne	.-12     	; 0x29cc <__unpack_f+0x54>
    29d8:	83 e0       	ldi	r24, 0x03	; 3
    29da:	8c 93       	st	X, r24
    29dc:	0d c0       	rjmp	.+26     	; 0x29f8 <__unpack_f+0x80>
    29de:	22 0f       	add	r18, r18
    29e0:	33 1f       	adc	r19, r19
    29e2:	44 1f       	adc	r20, r20
    29e4:	55 1f       	adc	r21, r21
    29e6:	12 96       	adiw	r26, 0x02	; 2
    29e8:	8d 91       	ld	r24, X+
    29ea:	9c 91       	ld	r25, X
    29ec:	13 97       	sbiw	r26, 0x03	; 3
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	13 96       	adiw	r26, 0x03	; 3
    29f2:	9c 93       	st	X, r25
    29f4:	8e 93       	st	-X, r24
    29f6:	12 97       	sbiw	r26, 0x02	; 2
    29f8:	20 30       	cpi	r18, 0x00	; 0
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	38 07       	cpc	r19, r24
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	48 07       	cpc	r20, r24
    2a02:	80 e4       	ldi	r24, 0x40	; 64
    2a04:	58 07       	cpc	r21, r24
    2a06:	58 f3       	brcs	.-42     	; 0x29de <__unpack_f+0x66>
    2a08:	14 96       	adiw	r26, 0x04	; 4
    2a0a:	2d 93       	st	X+, r18
    2a0c:	3d 93       	st	X+, r19
    2a0e:	4d 93       	st	X+, r20
    2a10:	5c 93       	st	X, r21
    2a12:	17 97       	sbiw	r26, 0x07	; 7
    2a14:	08 95       	ret
    2a16:	2f 3f       	cpi	r18, 0xFF	; 255
    2a18:	31 05       	cpc	r19, r1
    2a1a:	79 f4       	brne	.+30     	; 0x2a3a <__unpack_f+0xc2>
    2a1c:	41 15       	cp	r20, r1
    2a1e:	51 05       	cpc	r21, r1
    2a20:	61 05       	cpc	r22, r1
    2a22:	71 05       	cpc	r23, r1
    2a24:	19 f4       	brne	.+6      	; 0x2a2c <__unpack_f+0xb4>
    2a26:	84 e0       	ldi	r24, 0x04	; 4
    2a28:	8c 93       	st	X, r24
    2a2a:	08 95       	ret
    2a2c:	64 ff       	sbrs	r22, 4
    2a2e:	03 c0       	rjmp	.+6      	; 0x2a36 <__unpack_f+0xbe>
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	8c 93       	st	X, r24
    2a34:	12 c0       	rjmp	.+36     	; 0x2a5a <__unpack_f+0xe2>
    2a36:	1c 92       	st	X, r1
    2a38:	10 c0       	rjmp	.+32     	; 0x2a5a <__unpack_f+0xe2>
    2a3a:	2f 57       	subi	r18, 0x7F	; 127
    2a3c:	30 40       	sbci	r19, 0x00	; 0
    2a3e:	13 96       	adiw	r26, 0x03	; 3
    2a40:	3c 93       	st	X, r19
    2a42:	2e 93       	st	-X, r18
    2a44:	12 97       	sbiw	r26, 0x02	; 2
    2a46:	83 e0       	ldi	r24, 0x03	; 3
    2a48:	8c 93       	st	X, r24
    2a4a:	87 e0       	ldi	r24, 0x07	; 7
    2a4c:	44 0f       	add	r20, r20
    2a4e:	55 1f       	adc	r21, r21
    2a50:	66 1f       	adc	r22, r22
    2a52:	77 1f       	adc	r23, r23
    2a54:	8a 95       	dec	r24
    2a56:	d1 f7       	brne	.-12     	; 0x2a4c <__unpack_f+0xd4>
    2a58:	70 64       	ori	r23, 0x40	; 64
    2a5a:	14 96       	adiw	r26, 0x04	; 4
    2a5c:	4d 93       	st	X+, r20
    2a5e:	5d 93       	st	X+, r21
    2a60:	6d 93       	st	X+, r22
    2a62:	7c 93       	st	X, r23
    2a64:	17 97       	sbiw	r26, 0x07	; 7
    2a66:	08 95       	ret

00002a68 <__fpcmp_parts_f>:
    2a68:	1f 93       	push	r17
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	fb 01       	movw	r30, r22
    2a6e:	9c 91       	ld	r25, X
    2a70:	92 30       	cpi	r25, 0x02	; 2
    2a72:	08 f4       	brcc	.+2      	; 0x2a76 <__fpcmp_parts_f+0xe>
    2a74:	47 c0       	rjmp	.+142    	; 0x2b04 <__fpcmp_parts_f+0x9c>
    2a76:	80 81       	ld	r24, Z
    2a78:	82 30       	cpi	r24, 0x02	; 2
    2a7a:	08 f4       	brcc	.+2      	; 0x2a7e <__fpcmp_parts_f+0x16>
    2a7c:	43 c0       	rjmp	.+134    	; 0x2b04 <__fpcmp_parts_f+0x9c>
    2a7e:	94 30       	cpi	r25, 0x04	; 4
    2a80:	51 f4       	brne	.+20     	; 0x2a96 <__fpcmp_parts_f+0x2e>
    2a82:	11 96       	adiw	r26, 0x01	; 1
    2a84:	1c 91       	ld	r17, X
    2a86:	84 30       	cpi	r24, 0x04	; 4
    2a88:	99 f5       	brne	.+102    	; 0x2af0 <__fpcmp_parts_f+0x88>
    2a8a:	81 81       	ldd	r24, Z+1	; 0x01
    2a8c:	68 2f       	mov	r22, r24
    2a8e:	70 e0       	ldi	r23, 0x00	; 0
    2a90:	61 1b       	sub	r22, r17
    2a92:	71 09       	sbc	r23, r1
    2a94:	3f c0       	rjmp	.+126    	; 0x2b14 <__fpcmp_parts_f+0xac>
    2a96:	84 30       	cpi	r24, 0x04	; 4
    2a98:	21 f0       	breq	.+8      	; 0x2aa2 <__fpcmp_parts_f+0x3a>
    2a9a:	92 30       	cpi	r25, 0x02	; 2
    2a9c:	31 f4       	brne	.+12     	; 0x2aaa <__fpcmp_parts_f+0x42>
    2a9e:	82 30       	cpi	r24, 0x02	; 2
    2aa0:	b9 f1       	breq	.+110    	; 0x2b10 <__fpcmp_parts_f+0xa8>
    2aa2:	81 81       	ldd	r24, Z+1	; 0x01
    2aa4:	88 23       	and	r24, r24
    2aa6:	89 f1       	breq	.+98     	; 0x2b0a <__fpcmp_parts_f+0xa2>
    2aa8:	2d c0       	rjmp	.+90     	; 0x2b04 <__fpcmp_parts_f+0x9c>
    2aaa:	11 96       	adiw	r26, 0x01	; 1
    2aac:	1c 91       	ld	r17, X
    2aae:	11 97       	sbiw	r26, 0x01	; 1
    2ab0:	82 30       	cpi	r24, 0x02	; 2
    2ab2:	f1 f0       	breq	.+60     	; 0x2af0 <__fpcmp_parts_f+0x88>
    2ab4:	81 81       	ldd	r24, Z+1	; 0x01
    2ab6:	18 17       	cp	r17, r24
    2ab8:	d9 f4       	brne	.+54     	; 0x2af0 <__fpcmp_parts_f+0x88>
    2aba:	12 96       	adiw	r26, 0x02	; 2
    2abc:	2d 91       	ld	r18, X+
    2abe:	3c 91       	ld	r19, X
    2ac0:	13 97       	sbiw	r26, 0x03	; 3
    2ac2:	82 81       	ldd	r24, Z+2	; 0x02
    2ac4:	93 81       	ldd	r25, Z+3	; 0x03
    2ac6:	82 17       	cp	r24, r18
    2ac8:	93 07       	cpc	r25, r19
    2aca:	94 f0       	brlt	.+36     	; 0x2af0 <__fpcmp_parts_f+0x88>
    2acc:	28 17       	cp	r18, r24
    2ace:	39 07       	cpc	r19, r25
    2ad0:	bc f0       	brlt	.+46     	; 0x2b00 <__fpcmp_parts_f+0x98>
    2ad2:	14 96       	adiw	r26, 0x04	; 4
    2ad4:	8d 91       	ld	r24, X+
    2ad6:	9d 91       	ld	r25, X+
    2ad8:	0d 90       	ld	r0, X+
    2ada:	bc 91       	ld	r27, X
    2adc:	a0 2d       	mov	r26, r0
    2ade:	24 81       	ldd	r18, Z+4	; 0x04
    2ae0:	35 81       	ldd	r19, Z+5	; 0x05
    2ae2:	46 81       	ldd	r20, Z+6	; 0x06
    2ae4:	57 81       	ldd	r21, Z+7	; 0x07
    2ae6:	28 17       	cp	r18, r24
    2ae8:	39 07       	cpc	r19, r25
    2aea:	4a 07       	cpc	r20, r26
    2aec:	5b 07       	cpc	r21, r27
    2aee:	18 f4       	brcc	.+6      	; 0x2af6 <__fpcmp_parts_f+0x8e>
    2af0:	11 23       	and	r17, r17
    2af2:	41 f0       	breq	.+16     	; 0x2b04 <__fpcmp_parts_f+0x9c>
    2af4:	0a c0       	rjmp	.+20     	; 0x2b0a <__fpcmp_parts_f+0xa2>
    2af6:	82 17       	cp	r24, r18
    2af8:	93 07       	cpc	r25, r19
    2afa:	a4 07       	cpc	r26, r20
    2afc:	b5 07       	cpc	r27, r21
    2afe:	40 f4       	brcc	.+16     	; 0x2b10 <__fpcmp_parts_f+0xa8>
    2b00:	11 23       	and	r17, r17
    2b02:	19 f0       	breq	.+6      	; 0x2b0a <__fpcmp_parts_f+0xa2>
    2b04:	61 e0       	ldi	r22, 0x01	; 1
    2b06:	70 e0       	ldi	r23, 0x00	; 0
    2b08:	05 c0       	rjmp	.+10     	; 0x2b14 <__fpcmp_parts_f+0xac>
    2b0a:	6f ef       	ldi	r22, 0xFF	; 255
    2b0c:	7f ef       	ldi	r23, 0xFF	; 255
    2b0e:	02 c0       	rjmp	.+4      	; 0x2b14 <__fpcmp_parts_f+0xac>
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	70 e0       	ldi	r23, 0x00	; 0
    2b14:	cb 01       	movw	r24, r22
    2b16:	1f 91       	pop	r17
    2b18:	08 95       	ret

00002b1a <__udivmodhi4>:
    2b1a:	aa 1b       	sub	r26, r26
    2b1c:	bb 1b       	sub	r27, r27
    2b1e:	51 e1       	ldi	r21, 0x11	; 17
    2b20:	07 c0       	rjmp	.+14     	; 0x2b30 <__udivmodhi4_ep>

00002b22 <__udivmodhi4_loop>:
    2b22:	aa 1f       	adc	r26, r26
    2b24:	bb 1f       	adc	r27, r27
    2b26:	a6 17       	cp	r26, r22
    2b28:	b7 07       	cpc	r27, r23
    2b2a:	10 f0       	brcs	.+4      	; 0x2b30 <__udivmodhi4_ep>
    2b2c:	a6 1b       	sub	r26, r22
    2b2e:	b7 0b       	sbc	r27, r23

00002b30 <__udivmodhi4_ep>:
    2b30:	88 1f       	adc	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	5a 95       	dec	r21
    2b36:	a9 f7       	brne	.-22     	; 0x2b22 <__udivmodhi4_loop>
    2b38:	80 95       	com	r24
    2b3a:	90 95       	com	r25
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	08 95       	ret

00002b42 <__divmodhi4>:
    2b42:	97 fb       	bst	r25, 7
    2b44:	09 2e       	mov	r0, r25
    2b46:	07 26       	eor	r0, r23
    2b48:	0a d0       	rcall	.+20     	; 0x2b5e <__divmodhi4_neg1>
    2b4a:	77 fd       	sbrc	r23, 7
    2b4c:	04 d0       	rcall	.+8      	; 0x2b56 <__divmodhi4_neg2>
    2b4e:	e5 df       	rcall	.-54     	; 0x2b1a <__udivmodhi4>
    2b50:	06 d0       	rcall	.+12     	; 0x2b5e <__divmodhi4_neg1>
    2b52:	00 20       	and	r0, r0
    2b54:	1a f4       	brpl	.+6      	; 0x2b5c <__divmodhi4_exit>

00002b56 <__divmodhi4_neg2>:
    2b56:	70 95       	com	r23
    2b58:	61 95       	neg	r22
    2b5a:	7f 4f       	sbci	r23, 0xFF	; 255

00002b5c <__divmodhi4_exit>:
    2b5c:	08 95       	ret

00002b5e <__divmodhi4_neg1>:
    2b5e:	f6 f7       	brtc	.-4      	; 0x2b5c <__divmodhi4_exit>
    2b60:	90 95       	com	r25
    2b62:	81 95       	neg	r24
    2b64:	9f 4f       	sbci	r25, 0xFF	; 255
    2b66:	08 95       	ret

00002b68 <__prologue_saves__>:
    2b68:	2f 92       	push	r2
    2b6a:	3f 92       	push	r3
    2b6c:	4f 92       	push	r4
    2b6e:	5f 92       	push	r5
    2b70:	6f 92       	push	r6
    2b72:	7f 92       	push	r7
    2b74:	8f 92       	push	r8
    2b76:	9f 92       	push	r9
    2b78:	af 92       	push	r10
    2b7a:	bf 92       	push	r11
    2b7c:	cf 92       	push	r12
    2b7e:	df 92       	push	r13
    2b80:	ef 92       	push	r14
    2b82:	ff 92       	push	r15
    2b84:	0f 93       	push	r16
    2b86:	1f 93       	push	r17
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	ca 1b       	sub	r28, r26
    2b92:	db 0b       	sbc	r29, r27
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	cd bf       	out	0x3d, r28	; 61
    2b9e:	19 94       	eijmp

00002ba0 <__epilogue_restores__>:
    2ba0:	2a 88       	ldd	r2, Y+18	; 0x12
    2ba2:	39 88       	ldd	r3, Y+17	; 0x11
    2ba4:	48 88       	ldd	r4, Y+16	; 0x10
    2ba6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ba8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2baa:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bac:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bae:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bb0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bb2:	b9 84       	ldd	r11, Y+9	; 0x09
    2bb4:	c8 84       	ldd	r12, Y+8	; 0x08
    2bb6:	df 80       	ldd	r13, Y+7	; 0x07
    2bb8:	ee 80       	ldd	r14, Y+6	; 0x06
    2bba:	fd 80       	ldd	r15, Y+5	; 0x05
    2bbc:	0c 81       	ldd	r16, Y+4	; 0x04
    2bbe:	1b 81       	ldd	r17, Y+3	; 0x03
    2bc0:	aa 81       	ldd	r26, Y+2	; 0x02
    2bc2:	b9 81       	ldd	r27, Y+1	; 0x01
    2bc4:	ce 0f       	add	r28, r30
    2bc6:	d1 1d       	adc	r29, r1
    2bc8:	0f b6       	in	r0, 0x3f	; 63
    2bca:	f8 94       	cli
    2bcc:	de bf       	out	0x3e, r29	; 62
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	cd bf       	out	0x3d, r28	; 61
    2bd2:	ed 01       	movw	r28, r26
    2bd4:	08 95       	ret

00002bd6 <pow>:
    2bd6:	fa 01       	movw	r30, r20
    2bd8:	ee 0f       	add	r30, r30
    2bda:	ff 1f       	adc	r31, r31
    2bdc:	30 96       	adiw	r30, 0x00	; 0
    2bde:	21 05       	cpc	r18, r1
    2be0:	31 05       	cpc	r19, r1
    2be2:	99 f1       	breq	.+102    	; 0x2c4a <pow+0x74>
    2be4:	61 15       	cp	r22, r1
    2be6:	71 05       	cpc	r23, r1
    2be8:	61 f4       	brne	.+24     	; 0x2c02 <pow+0x2c>
    2bea:	80 38       	cpi	r24, 0x80	; 128
    2bec:	bf e3       	ldi	r27, 0x3F	; 63
    2bee:	9b 07       	cpc	r25, r27
    2bf0:	49 f1       	breq	.+82     	; 0x2c44 <pow+0x6e>
    2bf2:	68 94       	set
    2bf4:	90 38       	cpi	r25, 0x80	; 128
    2bf6:	81 05       	cpc	r24, r1
    2bf8:	61 f0       	breq	.+24     	; 0x2c12 <pow+0x3c>
    2bfa:	80 38       	cpi	r24, 0x80	; 128
    2bfc:	bf ef       	ldi	r27, 0xFF	; 255
    2bfe:	9b 07       	cpc	r25, r27
    2c00:	41 f0       	breq	.+16     	; 0x2c12 <pow+0x3c>
    2c02:	99 23       	and	r25, r25
    2c04:	42 f5       	brpl	.+80     	; 0x2c56 <pow+0x80>
    2c06:	ff 3f       	cpi	r31, 0xFF	; 255
    2c08:	e1 05       	cpc	r30, r1
    2c0a:	31 05       	cpc	r19, r1
    2c0c:	21 05       	cpc	r18, r1
    2c0e:	11 f1       	breq	.+68     	; 0x2c54 <pow+0x7e>
    2c10:	e8 94       	clt
    2c12:	08 94       	sec
    2c14:	e7 95       	ror	r30
    2c16:	d9 01       	movw	r26, r18
    2c18:	aa 23       	and	r26, r26
    2c1a:	29 f4       	brne	.+10     	; 0x2c26 <pow+0x50>
    2c1c:	ab 2f       	mov	r26, r27
    2c1e:	be 2f       	mov	r27, r30
    2c20:	f8 5f       	subi	r31, 0xF8	; 248
    2c22:	d0 f3       	brcs	.-12     	; 0x2c18 <pow+0x42>
    2c24:	10 c0       	rjmp	.+32     	; 0x2c46 <pow+0x70>
    2c26:	ff 5f       	subi	r31, 0xFF	; 255
    2c28:	70 f4       	brcc	.+28     	; 0x2c46 <pow+0x70>
    2c2a:	a6 95       	lsr	r26
    2c2c:	e0 f7       	brcc	.-8      	; 0x2c26 <pow+0x50>
    2c2e:	f7 39       	cpi	r31, 0x97	; 151
    2c30:	50 f0       	brcs	.+20     	; 0x2c46 <pow+0x70>
    2c32:	19 f0       	breq	.+6      	; 0x2c3a <pow+0x64>
    2c34:	ff 3a       	cpi	r31, 0xAF	; 175
    2c36:	38 f4       	brcc	.+14     	; 0x2c46 <pow+0x70>
    2c38:	9f 77       	andi	r25, 0x7F	; 127
    2c3a:	9f 93       	push	r25
    2c3c:	0c d0       	rcall	.+24     	; 0x2c56 <pow+0x80>
    2c3e:	0f 90       	pop	r0
    2c40:	07 fc       	sbrc	r0, 7
    2c42:	90 58       	subi	r25, 0x80	; 128
    2c44:	08 95       	ret
    2c46:	3e f0       	brts	.+14     	; 0x2c56 <pow+0x80>
    2c48:	49 c0       	rjmp	.+146    	; 0x2cdc <__fp_nan>
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	80 e8       	ldi	r24, 0x80	; 128
    2c50:	9f e3       	ldi	r25, 0x3F	; 63
    2c52:	08 95       	ret
    2c54:	4f e7       	ldi	r20, 0x7F	; 127
    2c56:	9f 77       	andi	r25, 0x7F	; 127
    2c58:	5f 93       	push	r21
    2c5a:	4f 93       	push	r20
    2c5c:	3f 93       	push	r19
    2c5e:	2f 93       	push	r18
    2c60:	d0 d0       	rcall	.+416    	; 0x2e02 <log>
    2c62:	2f 91       	pop	r18
    2c64:	3f 91       	pop	r19
    2c66:	4f 91       	pop	r20
    2c68:	5f 91       	pop	r21
    2c6a:	61 da       	rcall	.-2878   	; 0x212e <__mulsf3>
    2c6c:	05 c0       	rjmp	.+10     	; 0x2c78 <exp>
    2c6e:	19 f4       	brne	.+6      	; 0x2c76 <pow+0xa0>
    2c70:	0e f0       	brts	.+2      	; 0x2c74 <pow+0x9e>
    2c72:	2e c0       	rjmp	.+92     	; 0x2cd0 <__fp_inf>
    2c74:	7d c0       	rjmp	.+250    	; 0x2d70 <__fp_zero>
    2c76:	32 c0       	rjmp	.+100    	; 0x2cdc <__fp_nan>

00002c78 <exp>:
    2c78:	61 d0       	rcall	.+194    	; 0x2d3c <__fp_splitA>
    2c7a:	c8 f3       	brcs	.-14     	; 0x2c6e <pow+0x98>
    2c7c:	96 38       	cpi	r25, 0x86	; 134
    2c7e:	c0 f7       	brcc	.-16     	; 0x2c70 <pow+0x9a>
    2c80:	07 f8       	bld	r0, 7
    2c82:	0f 92       	push	r0
    2c84:	e8 94       	clt
    2c86:	2b e3       	ldi	r18, 0x3B	; 59
    2c88:	3a ea       	ldi	r19, 0xAA	; 170
    2c8a:	48 eb       	ldi	r20, 0xB8	; 184
    2c8c:	5f e7       	ldi	r21, 0x7F	; 127
    2c8e:	38 d1       	rcall	.+624    	; 0x2f00 <__mulsf3_pse>
    2c90:	0f 92       	push	r0
    2c92:	0f 92       	push	r0
    2c94:	0f 92       	push	r0
    2c96:	4d b7       	in	r20, 0x3d	; 61
    2c98:	5e b7       	in	r21, 0x3e	; 62
    2c9a:	0f 92       	push	r0
    2c9c:	f2 d0       	rcall	.+484    	; 0x2e82 <modf>
    2c9e:	e4 ee       	ldi	r30, 0xE4	; 228
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	1f d0       	rcall	.+62     	; 0x2ce2 <__fp_powser>
    2ca4:	4f 91       	pop	r20
    2ca6:	5f 91       	pop	r21
    2ca8:	ef 91       	pop	r30
    2caa:	ff 91       	pop	r31
    2cac:	e5 95       	asr	r30
    2cae:	ee 1f       	adc	r30, r30
    2cb0:	ff 1f       	adc	r31, r31
    2cb2:	49 f0       	breq	.+18     	; 0x2cc6 <exp+0x4e>
    2cb4:	fe 57       	subi	r31, 0x7E	; 126
    2cb6:	e0 68       	ori	r30, 0x80	; 128
    2cb8:	44 27       	eor	r20, r20
    2cba:	ee 0f       	add	r30, r30
    2cbc:	44 1f       	adc	r20, r20
    2cbe:	fa 95       	dec	r31
    2cc0:	e1 f7       	brne	.-8      	; 0x2cba <exp+0x42>
    2cc2:	41 95       	neg	r20
    2cc4:	55 0b       	sbc	r21, r21
    2cc6:	64 d0       	rcall	.+200    	; 0x2d90 <ldexp>
    2cc8:	0f 90       	pop	r0
    2cca:	07 fe       	sbrs	r0, 7
    2ccc:	58 c0       	rjmp	.+176    	; 0x2d7e <inverse>
    2cce:	08 95       	ret

00002cd0 <__fp_inf>:
    2cd0:	97 f9       	bld	r25, 7
    2cd2:	9f 67       	ori	r25, 0x7F	; 127
    2cd4:	80 e8       	ldi	r24, 0x80	; 128
    2cd6:	70 e0       	ldi	r23, 0x00	; 0
    2cd8:	60 e0       	ldi	r22, 0x00	; 0
    2cda:	08 95       	ret

00002cdc <__fp_nan>:
    2cdc:	9f ef       	ldi	r25, 0xFF	; 255
    2cde:	80 ec       	ldi	r24, 0xC0	; 192
    2ce0:	08 95       	ret

00002ce2 <__fp_powser>:
    2ce2:	df 93       	push	r29
    2ce4:	cf 93       	push	r28
    2ce6:	1f 93       	push	r17
    2ce8:	0f 93       	push	r16
    2cea:	ff 92       	push	r15
    2cec:	ef 92       	push	r14
    2cee:	df 92       	push	r13
    2cf0:	7b 01       	movw	r14, r22
    2cf2:	8c 01       	movw	r16, r24
    2cf4:	68 94       	set
    2cf6:	05 c0       	rjmp	.+10     	; 0x2d02 <__fp_powser+0x20>
    2cf8:	da 2e       	mov	r13, r26
    2cfa:	ef 01       	movw	r28, r30
    2cfc:	ff d0       	rcall	.+510    	; 0x2efc <__mulsf3x>
    2cfe:	fe 01       	movw	r30, r28
    2d00:	e8 94       	clt
    2d02:	a5 91       	lpm	r26, Z+
    2d04:	25 91       	lpm	r18, Z+
    2d06:	35 91       	lpm	r19, Z+
    2d08:	45 91       	lpm	r20, Z+
    2d0a:	55 91       	lpm	r21, Z+
    2d0c:	ae f3       	brts	.-22     	; 0x2cf8 <__fp_powser+0x16>
    2d0e:	ef 01       	movw	r28, r30
    2d10:	59 d1       	rcall	.+690    	; 0x2fc4 <__addsf3x>
    2d12:	fe 01       	movw	r30, r28
    2d14:	97 01       	movw	r18, r14
    2d16:	a8 01       	movw	r20, r16
    2d18:	da 94       	dec	r13
    2d1a:	79 f7       	brne	.-34     	; 0x2cfa <__fp_powser+0x18>
    2d1c:	df 90       	pop	r13
    2d1e:	ef 90       	pop	r14
    2d20:	ff 90       	pop	r15
    2d22:	0f 91       	pop	r16
    2d24:	1f 91       	pop	r17
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	08 95       	ret

00002d2c <__fp_split3>:
    2d2c:	57 fd       	sbrc	r21, 7
    2d2e:	90 58       	subi	r25, 0x80	; 128
    2d30:	44 0f       	add	r20, r20
    2d32:	55 1f       	adc	r21, r21
    2d34:	59 f0       	breq	.+22     	; 0x2d4c <__fp_splitA+0x10>
    2d36:	5f 3f       	cpi	r21, 0xFF	; 255
    2d38:	71 f0       	breq	.+28     	; 0x2d56 <__fp_splitA+0x1a>
    2d3a:	47 95       	ror	r20

00002d3c <__fp_splitA>:
    2d3c:	88 0f       	add	r24, r24
    2d3e:	97 fb       	bst	r25, 7
    2d40:	99 1f       	adc	r25, r25
    2d42:	61 f0       	breq	.+24     	; 0x2d5c <__fp_splitA+0x20>
    2d44:	9f 3f       	cpi	r25, 0xFF	; 255
    2d46:	79 f0       	breq	.+30     	; 0x2d66 <__fp_splitA+0x2a>
    2d48:	87 95       	ror	r24
    2d4a:	08 95       	ret
    2d4c:	12 16       	cp	r1, r18
    2d4e:	13 06       	cpc	r1, r19
    2d50:	14 06       	cpc	r1, r20
    2d52:	55 1f       	adc	r21, r21
    2d54:	f2 cf       	rjmp	.-28     	; 0x2d3a <__fp_split3+0xe>
    2d56:	46 95       	lsr	r20
    2d58:	f1 df       	rcall	.-30     	; 0x2d3c <__fp_splitA>
    2d5a:	08 c0       	rjmp	.+16     	; 0x2d6c <__fp_splitA+0x30>
    2d5c:	16 16       	cp	r1, r22
    2d5e:	17 06       	cpc	r1, r23
    2d60:	18 06       	cpc	r1, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	f1 cf       	rjmp	.-30     	; 0x2d48 <__fp_splitA+0xc>
    2d66:	86 95       	lsr	r24
    2d68:	71 05       	cpc	r23, r1
    2d6a:	61 05       	cpc	r22, r1
    2d6c:	08 94       	sec
    2d6e:	08 95       	ret

00002d70 <__fp_zero>:
    2d70:	e8 94       	clt

00002d72 <__fp_szero>:
    2d72:	bb 27       	eor	r27, r27
    2d74:	66 27       	eor	r22, r22
    2d76:	77 27       	eor	r23, r23
    2d78:	cb 01       	movw	r24, r22
    2d7a:	97 f9       	bld	r25, 7
    2d7c:	08 95       	ret

00002d7e <inverse>:
    2d7e:	9b 01       	movw	r18, r22
    2d80:	ac 01       	movw	r20, r24
    2d82:	60 e0       	ldi	r22, 0x00	; 0
    2d84:	70 e0       	ldi	r23, 0x00	; 0
    2d86:	80 e8       	ldi	r24, 0x80	; 128
    2d88:	9f e3       	ldi	r25, 0x3F	; 63
    2d8a:	cb ca       	rjmp	.-2666   	; 0x2322 <__divsf3>
    2d8c:	a1 cf       	rjmp	.-190    	; 0x2cd0 <__fp_inf>
    2d8e:	6d c1       	rjmp	.+730    	; 0x306a <__fp_mpack>

00002d90 <ldexp>:
    2d90:	d5 df       	rcall	.-86     	; 0x2d3c <__fp_splitA>
    2d92:	e8 f3       	brcs	.-6      	; 0x2d8e <inverse+0x10>
    2d94:	99 23       	and	r25, r25
    2d96:	d9 f3       	breq	.-10     	; 0x2d8e <inverse+0x10>
    2d98:	94 0f       	add	r25, r20
    2d9a:	51 1d       	adc	r21, r1
    2d9c:	bb f3       	brvs	.-18     	; 0x2d8c <inverse+0xe>
    2d9e:	91 50       	subi	r25, 0x01	; 1
    2da0:	50 40       	sbci	r21, 0x00	; 0
    2da2:	94 f0       	brlt	.+36     	; 0x2dc8 <ldexp+0x38>
    2da4:	59 f0       	breq	.+22     	; 0x2dbc <ldexp+0x2c>
    2da6:	88 23       	and	r24, r24
    2da8:	32 f0       	brmi	.+12     	; 0x2db6 <ldexp+0x26>
    2daa:	66 0f       	add	r22, r22
    2dac:	77 1f       	adc	r23, r23
    2dae:	88 1f       	adc	r24, r24
    2db0:	91 50       	subi	r25, 0x01	; 1
    2db2:	50 40       	sbci	r21, 0x00	; 0
    2db4:	c1 f7       	brne	.-16     	; 0x2da6 <ldexp+0x16>
    2db6:	9e 3f       	cpi	r25, 0xFE	; 254
    2db8:	51 05       	cpc	r21, r1
    2dba:	44 f7       	brge	.-48     	; 0x2d8c <inverse+0xe>
    2dbc:	88 0f       	add	r24, r24
    2dbe:	91 1d       	adc	r25, r1
    2dc0:	96 95       	lsr	r25
    2dc2:	87 95       	ror	r24
    2dc4:	97 f9       	bld	r25, 7
    2dc6:	08 95       	ret
    2dc8:	5f 3f       	cpi	r21, 0xFF	; 255
    2dca:	ac f0       	brlt	.+42     	; 0x2df6 <ldexp+0x66>
    2dcc:	98 3e       	cpi	r25, 0xE8	; 232
    2dce:	9c f0       	brlt	.+38     	; 0x2df6 <ldexp+0x66>
    2dd0:	bb 27       	eor	r27, r27
    2dd2:	86 95       	lsr	r24
    2dd4:	77 95       	ror	r23
    2dd6:	67 95       	ror	r22
    2dd8:	b7 95       	ror	r27
    2dda:	08 f4       	brcc	.+2      	; 0x2dde <ldexp+0x4e>
    2ddc:	b1 60       	ori	r27, 0x01	; 1
    2dde:	93 95       	inc	r25
    2de0:	c1 f7       	brne	.-16     	; 0x2dd2 <ldexp+0x42>
    2de2:	bb 0f       	add	r27, r27
    2de4:	58 f7       	brcc	.-42     	; 0x2dbc <ldexp+0x2c>
    2de6:	11 f4       	brne	.+4      	; 0x2dec <ldexp+0x5c>
    2de8:	60 ff       	sbrs	r22, 0
    2dea:	e8 cf       	rjmp	.-48     	; 0x2dbc <ldexp+0x2c>
    2dec:	6f 5f       	subi	r22, 0xFF	; 255
    2dee:	7f 4f       	sbci	r23, 0xFF	; 255
    2df0:	8f 4f       	sbci	r24, 0xFF	; 255
    2df2:	9f 4f       	sbci	r25, 0xFF	; 255
    2df4:	e3 cf       	rjmp	.-58     	; 0x2dbc <ldexp+0x2c>
    2df6:	bd cf       	rjmp	.-134    	; 0x2d72 <__fp_szero>
    2df8:	0e f0       	brts	.+2      	; 0x2dfc <ldexp+0x6c>
    2dfa:	37 c1       	rjmp	.+622    	; 0x306a <__fp_mpack>
    2dfc:	6f cf       	rjmp	.-290    	; 0x2cdc <__fp_nan>
    2dfe:	68 94       	set
    2e00:	67 cf       	rjmp	.-306    	; 0x2cd0 <__fp_inf>

00002e02 <log>:
    2e02:	9c df       	rcall	.-200    	; 0x2d3c <__fp_splitA>
    2e04:	c8 f3       	brcs	.-14     	; 0x2df8 <ldexp+0x68>
    2e06:	99 23       	and	r25, r25
    2e08:	d1 f3       	breq	.-12     	; 0x2dfe <ldexp+0x6e>
    2e0a:	c6 f3       	brts	.-16     	; 0x2dfc <ldexp+0x6c>
    2e0c:	df 93       	push	r29
    2e0e:	cf 93       	push	r28
    2e10:	1f 93       	push	r17
    2e12:	0f 93       	push	r16
    2e14:	ff 92       	push	r15
    2e16:	c9 2f       	mov	r28, r25
    2e18:	dd 27       	eor	r29, r29
    2e1a:	88 23       	and	r24, r24
    2e1c:	2a f0       	brmi	.+10     	; 0x2e28 <log+0x26>
    2e1e:	21 97       	sbiw	r28, 0x01	; 1
    2e20:	66 0f       	add	r22, r22
    2e22:	77 1f       	adc	r23, r23
    2e24:	88 1f       	adc	r24, r24
    2e26:	da f7       	brpl	.-10     	; 0x2e1e <log+0x1c>
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e8       	ldi	r20, 0x80	; 128
    2e2e:	5f eb       	ldi	r21, 0xBF	; 191
    2e30:	9f e3       	ldi	r25, 0x3F	; 63
    2e32:	88 39       	cpi	r24, 0x98	; 152
    2e34:	20 f0       	brcs	.+8      	; 0x2e3e <log+0x3c>
    2e36:	80 3e       	cpi	r24, 0xE0	; 224
    2e38:	30 f0       	brcs	.+12     	; 0x2e46 <log+0x44>
    2e3a:	21 96       	adiw	r28, 0x01	; 1
    2e3c:	8f 77       	andi	r24, 0x7F	; 127
    2e3e:	4a d9       	rcall	.-3436   	; 0x20d4 <__addsf3>
    2e40:	ec e0       	ldi	r30, 0x0C	; 12
    2e42:	f1 e0       	ldi	r31, 0x01	; 1
    2e44:	03 c0       	rjmp	.+6      	; 0x2e4c <log+0x4a>
    2e46:	46 d9       	rcall	.-3444   	; 0x20d4 <__addsf3>
    2e48:	e9 e3       	ldi	r30, 0x39	; 57
    2e4a:	f1 e0       	ldi	r31, 0x01	; 1
    2e4c:	4a df       	rcall	.-364    	; 0x2ce2 <__fp_powser>
    2e4e:	8b 01       	movw	r16, r22
    2e50:	be 01       	movw	r22, r28
    2e52:	ec 01       	movw	r28, r24
    2e54:	fb 2e       	mov	r15, r27
    2e56:	6f 57       	subi	r22, 0x7F	; 127
    2e58:	71 09       	sbc	r23, r1
    2e5a:	75 95       	asr	r23
    2e5c:	77 1f       	adc	r23, r23
    2e5e:	88 0b       	sbc	r24, r24
    2e60:	99 0b       	sbc	r25, r25
    2e62:	3b db       	rcall	.-2442   	; 0x24da <__floatsisf>
    2e64:	28 e1       	ldi	r18, 0x18	; 24
    2e66:	32 e7       	ldi	r19, 0x72	; 114
    2e68:	41 e3       	ldi	r20, 0x31	; 49
    2e6a:	5f e3       	ldi	r21, 0x3F	; 63
    2e6c:	47 d0       	rcall	.+142    	; 0x2efc <__mulsf3x>
    2e6e:	af 2d       	mov	r26, r15
    2e70:	98 01       	movw	r18, r16
    2e72:	ae 01       	movw	r20, r28
    2e74:	ff 90       	pop	r15
    2e76:	0f 91       	pop	r16
    2e78:	1f 91       	pop	r17
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	a2 d0       	rcall	.+324    	; 0x2fc4 <__addsf3x>
    2e80:	10 c1       	rjmp	.+544    	; 0x30a2 <__fp_round>

00002e82 <modf>:
    2e82:	fa 01       	movw	r30, r20
    2e84:	dc 01       	movw	r26, r24
    2e86:	aa 0f       	add	r26, r26
    2e88:	bb 1f       	adc	r27, r27
    2e8a:	9b 01       	movw	r18, r22
    2e8c:	ac 01       	movw	r20, r24
    2e8e:	bf 57       	subi	r27, 0x7F	; 127
    2e90:	28 f4       	brcc	.+10     	; 0x2e9c <modf+0x1a>
    2e92:	22 27       	eor	r18, r18
    2e94:	33 27       	eor	r19, r19
    2e96:	44 27       	eor	r20, r20
    2e98:	50 78       	andi	r21, 0x80	; 128
    2e9a:	1f c0       	rjmp	.+62     	; 0x2eda <modf+0x58>
    2e9c:	b7 51       	subi	r27, 0x17	; 23
    2e9e:	88 f4       	brcc	.+34     	; 0x2ec2 <modf+0x40>
    2ea0:	ab 2f       	mov	r26, r27
    2ea2:	00 24       	eor	r0, r0
    2ea4:	46 95       	lsr	r20
    2ea6:	37 95       	ror	r19
    2ea8:	27 95       	ror	r18
    2eaa:	01 1c       	adc	r0, r1
    2eac:	a3 95       	inc	r26
    2eae:	d2 f3       	brmi	.-12     	; 0x2ea4 <modf+0x22>
    2eb0:	00 20       	and	r0, r0
    2eb2:	69 f0       	breq	.+26     	; 0x2ece <modf+0x4c>
    2eb4:	22 0f       	add	r18, r18
    2eb6:	33 1f       	adc	r19, r19
    2eb8:	44 1f       	adc	r20, r20
    2eba:	b3 95       	inc	r27
    2ebc:	da f3       	brmi	.-10     	; 0x2eb4 <modf+0x32>
    2ebe:	0d d0       	rcall	.+26     	; 0x2eda <modf+0x58>
    2ec0:	d8 c8       	rjmp	.-3664   	; 0x2072 <__subsf3>
    2ec2:	61 30       	cpi	r22, 0x01	; 1
    2ec4:	71 05       	cpc	r23, r1
    2ec6:	a0 e8       	ldi	r26, 0x80	; 128
    2ec8:	8a 07       	cpc	r24, r26
    2eca:	b9 46       	sbci	r27, 0x69	; 105
    2ecc:	30 f4       	brcc	.+12     	; 0x2eda <modf+0x58>
    2ece:	9b 01       	movw	r18, r22
    2ed0:	ac 01       	movw	r20, r24
    2ed2:	66 27       	eor	r22, r22
    2ed4:	77 27       	eor	r23, r23
    2ed6:	88 27       	eor	r24, r24
    2ed8:	90 78       	andi	r25, 0x80	; 128
    2eda:	30 96       	adiw	r30, 0x00	; 0
    2edc:	21 f0       	breq	.+8      	; 0x2ee6 <modf+0x64>
    2ede:	20 83       	st	Z, r18
    2ee0:	31 83       	std	Z+1, r19	; 0x01
    2ee2:	42 83       	std	Z+2, r20	; 0x02
    2ee4:	53 83       	std	Z+3, r21	; 0x03
    2ee6:	08 95       	ret
    2ee8:	ce d0       	rcall	.+412    	; 0x3086 <__fp_pscA>
    2eea:	28 f0       	brcs	.+10     	; 0x2ef6 <modf+0x74>
    2eec:	d3 d0       	rcall	.+422    	; 0x3094 <__fp_pscB>
    2eee:	18 f0       	brcs	.+6      	; 0x2ef6 <modf+0x74>
    2ef0:	95 23       	and	r25, r21
    2ef2:	09 f0       	breq	.+2      	; 0x2ef6 <modf+0x74>
    2ef4:	ed ce       	rjmp	.-550    	; 0x2cd0 <__fp_inf>
    2ef6:	f2 ce       	rjmp	.-540    	; 0x2cdc <__fp_nan>
    2ef8:	11 24       	eor	r1, r1
    2efa:	3b cf       	rjmp	.-394    	; 0x2d72 <__fp_szero>

00002efc <__mulsf3x>:
    2efc:	17 df       	rcall	.-466    	; 0x2d2c <__fp_split3>
    2efe:	a0 f3       	brcs	.-24     	; 0x2ee8 <modf+0x66>

00002f00 <__mulsf3_pse>:
    2f00:	95 9f       	mul	r25, r21
    2f02:	d1 f3       	breq	.-12     	; 0x2ef8 <modf+0x76>
    2f04:	95 0f       	add	r25, r21
    2f06:	50 e0       	ldi	r21, 0x00	; 0
    2f08:	55 1f       	adc	r21, r21
    2f0a:	62 9f       	mul	r22, r18
    2f0c:	f0 01       	movw	r30, r0
    2f0e:	72 9f       	mul	r23, r18
    2f10:	bb 27       	eor	r27, r27
    2f12:	f0 0d       	add	r31, r0
    2f14:	b1 1d       	adc	r27, r1
    2f16:	63 9f       	mul	r22, r19
    2f18:	aa 27       	eor	r26, r26
    2f1a:	f0 0d       	add	r31, r0
    2f1c:	b1 1d       	adc	r27, r1
    2f1e:	aa 1f       	adc	r26, r26
    2f20:	64 9f       	mul	r22, r20
    2f22:	66 27       	eor	r22, r22
    2f24:	b0 0d       	add	r27, r0
    2f26:	a1 1d       	adc	r26, r1
    2f28:	66 1f       	adc	r22, r22
    2f2a:	82 9f       	mul	r24, r18
    2f2c:	22 27       	eor	r18, r18
    2f2e:	b0 0d       	add	r27, r0
    2f30:	a1 1d       	adc	r26, r1
    2f32:	62 1f       	adc	r22, r18
    2f34:	73 9f       	mul	r23, r19
    2f36:	b0 0d       	add	r27, r0
    2f38:	a1 1d       	adc	r26, r1
    2f3a:	62 1f       	adc	r22, r18
    2f3c:	83 9f       	mul	r24, r19
    2f3e:	a0 0d       	add	r26, r0
    2f40:	61 1d       	adc	r22, r1
    2f42:	22 1f       	adc	r18, r18
    2f44:	74 9f       	mul	r23, r20
    2f46:	33 27       	eor	r19, r19
    2f48:	a0 0d       	add	r26, r0
    2f4a:	61 1d       	adc	r22, r1
    2f4c:	23 1f       	adc	r18, r19
    2f4e:	84 9f       	mul	r24, r20
    2f50:	60 0d       	add	r22, r0
    2f52:	21 1d       	adc	r18, r1
    2f54:	82 2f       	mov	r24, r18
    2f56:	76 2f       	mov	r23, r22
    2f58:	6a 2f       	mov	r22, r26
    2f5a:	11 24       	eor	r1, r1
    2f5c:	9f 57       	subi	r25, 0x7F	; 127
    2f5e:	50 40       	sbci	r21, 0x00	; 0
    2f60:	8a f0       	brmi	.+34     	; 0x2f84 <__mulsf3_pse+0x84>
    2f62:	e1 f0       	breq	.+56     	; 0x2f9c <__mulsf3_pse+0x9c>
    2f64:	88 23       	and	r24, r24
    2f66:	4a f0       	brmi	.+18     	; 0x2f7a <__mulsf3_pse+0x7a>
    2f68:	ee 0f       	add	r30, r30
    2f6a:	ff 1f       	adc	r31, r31
    2f6c:	bb 1f       	adc	r27, r27
    2f6e:	66 1f       	adc	r22, r22
    2f70:	77 1f       	adc	r23, r23
    2f72:	88 1f       	adc	r24, r24
    2f74:	91 50       	subi	r25, 0x01	; 1
    2f76:	50 40       	sbci	r21, 0x00	; 0
    2f78:	a9 f7       	brne	.-22     	; 0x2f64 <__mulsf3_pse+0x64>
    2f7a:	9e 3f       	cpi	r25, 0xFE	; 254
    2f7c:	51 05       	cpc	r21, r1
    2f7e:	70 f0       	brcs	.+28     	; 0x2f9c <__mulsf3_pse+0x9c>
    2f80:	a7 ce       	rjmp	.-690    	; 0x2cd0 <__fp_inf>
    2f82:	f7 ce       	rjmp	.-530    	; 0x2d72 <__fp_szero>
    2f84:	5f 3f       	cpi	r21, 0xFF	; 255
    2f86:	ec f3       	brlt	.-6      	; 0x2f82 <__mulsf3_pse+0x82>
    2f88:	98 3e       	cpi	r25, 0xE8	; 232
    2f8a:	dc f3       	brlt	.-10     	; 0x2f82 <__mulsf3_pse+0x82>
    2f8c:	86 95       	lsr	r24
    2f8e:	77 95       	ror	r23
    2f90:	67 95       	ror	r22
    2f92:	b7 95       	ror	r27
    2f94:	f7 95       	ror	r31
    2f96:	e7 95       	ror	r30
    2f98:	9f 5f       	subi	r25, 0xFF	; 255
    2f9a:	c1 f7       	brne	.-16     	; 0x2f8c <__mulsf3_pse+0x8c>
    2f9c:	fe 2b       	or	r31, r30
    2f9e:	88 0f       	add	r24, r24
    2fa0:	91 1d       	adc	r25, r1
    2fa2:	96 95       	lsr	r25
    2fa4:	87 95       	ror	r24
    2fa6:	97 f9       	bld	r25, 7
    2fa8:	08 95       	ret
    2faa:	6d d0       	rcall	.+218    	; 0x3086 <__fp_pscA>
    2fac:	30 f0       	brcs	.+12     	; 0x2fba <__mulsf3_pse+0xba>
    2fae:	72 d0       	rcall	.+228    	; 0x3094 <__fp_pscB>
    2fb0:	20 f0       	brcs	.+8      	; 0x2fba <__mulsf3_pse+0xba>
    2fb2:	31 f4       	brne	.+12     	; 0x2fc0 <__mulsf3_pse+0xc0>
    2fb4:	9f 3f       	cpi	r25, 0xFF	; 255
    2fb6:	11 f4       	brne	.+4      	; 0x2fbc <__mulsf3_pse+0xbc>
    2fb8:	1e f4       	brtc	.+6      	; 0x2fc0 <__mulsf3_pse+0xc0>
    2fba:	90 ce       	rjmp	.-736    	; 0x2cdc <__fp_nan>
    2fbc:	0e f4       	brtc	.+2      	; 0x2fc0 <__mulsf3_pse+0xc0>
    2fbe:	e0 95       	com	r30
    2fc0:	e7 fb       	bst	r30, 7
    2fc2:	86 ce       	rjmp	.-756    	; 0x2cd0 <__fp_inf>

00002fc4 <__addsf3x>:
    2fc4:	e9 2f       	mov	r30, r25
    2fc6:	b2 de       	rcall	.-668    	; 0x2d2c <__fp_split3>
    2fc8:	80 f3       	brcs	.-32     	; 0x2faa <__mulsf3_pse+0xaa>
    2fca:	ba 17       	cp	r27, r26
    2fcc:	62 07       	cpc	r22, r18
    2fce:	73 07       	cpc	r23, r19
    2fd0:	84 07       	cpc	r24, r20
    2fd2:	95 07       	cpc	r25, r21
    2fd4:	18 f0       	brcs	.+6      	; 0x2fdc <__addsf3x+0x18>
    2fd6:	71 f4       	brne	.+28     	; 0x2ff4 <__addsf3x+0x30>
    2fd8:	9e f5       	brtc	.+102    	; 0x3040 <__addsf3x+0x7c>
    2fda:	ca ce       	rjmp	.-620    	; 0x2d70 <__fp_zero>
    2fdc:	0e f4       	brtc	.+2      	; 0x2fe0 <__addsf3x+0x1c>
    2fde:	e0 95       	com	r30
    2fe0:	0b 2e       	mov	r0, r27
    2fe2:	ba 2f       	mov	r27, r26
    2fe4:	a0 2d       	mov	r26, r0
    2fe6:	0b 01       	movw	r0, r22
    2fe8:	b9 01       	movw	r22, r18
    2fea:	90 01       	movw	r18, r0
    2fec:	0c 01       	movw	r0, r24
    2fee:	ca 01       	movw	r24, r20
    2ff0:	a0 01       	movw	r20, r0
    2ff2:	11 24       	eor	r1, r1
    2ff4:	ff 27       	eor	r31, r31
    2ff6:	59 1b       	sub	r21, r25
    2ff8:	99 f0       	breq	.+38     	; 0x3020 <__addsf3x+0x5c>
    2ffa:	59 3f       	cpi	r21, 0xF9	; 249
    2ffc:	50 f4       	brcc	.+20     	; 0x3012 <__addsf3x+0x4e>
    2ffe:	50 3e       	cpi	r21, 0xE0	; 224
    3000:	68 f1       	brcs	.+90     	; 0x305c <__addsf3x+0x98>
    3002:	1a 16       	cp	r1, r26
    3004:	f0 40       	sbci	r31, 0x00	; 0
    3006:	a2 2f       	mov	r26, r18
    3008:	23 2f       	mov	r18, r19
    300a:	34 2f       	mov	r19, r20
    300c:	44 27       	eor	r20, r20
    300e:	58 5f       	subi	r21, 0xF8	; 248
    3010:	f3 cf       	rjmp	.-26     	; 0x2ff8 <__addsf3x+0x34>
    3012:	46 95       	lsr	r20
    3014:	37 95       	ror	r19
    3016:	27 95       	ror	r18
    3018:	a7 95       	ror	r26
    301a:	f0 40       	sbci	r31, 0x00	; 0
    301c:	53 95       	inc	r21
    301e:	c9 f7       	brne	.-14     	; 0x3012 <__addsf3x+0x4e>
    3020:	7e f4       	brtc	.+30     	; 0x3040 <__addsf3x+0x7c>
    3022:	1f 16       	cp	r1, r31
    3024:	ba 0b       	sbc	r27, r26
    3026:	62 0b       	sbc	r22, r18
    3028:	73 0b       	sbc	r23, r19
    302a:	84 0b       	sbc	r24, r20
    302c:	ba f0       	brmi	.+46     	; 0x305c <__addsf3x+0x98>
    302e:	91 50       	subi	r25, 0x01	; 1
    3030:	a1 f0       	breq	.+40     	; 0x305a <__addsf3x+0x96>
    3032:	ff 0f       	add	r31, r31
    3034:	bb 1f       	adc	r27, r27
    3036:	66 1f       	adc	r22, r22
    3038:	77 1f       	adc	r23, r23
    303a:	88 1f       	adc	r24, r24
    303c:	c2 f7       	brpl	.-16     	; 0x302e <__addsf3x+0x6a>
    303e:	0e c0       	rjmp	.+28     	; 0x305c <__addsf3x+0x98>
    3040:	ba 0f       	add	r27, r26
    3042:	62 1f       	adc	r22, r18
    3044:	73 1f       	adc	r23, r19
    3046:	84 1f       	adc	r24, r20
    3048:	48 f4       	brcc	.+18     	; 0x305c <__addsf3x+0x98>
    304a:	87 95       	ror	r24
    304c:	77 95       	ror	r23
    304e:	67 95       	ror	r22
    3050:	b7 95       	ror	r27
    3052:	f7 95       	ror	r31
    3054:	9e 3f       	cpi	r25, 0xFE	; 254
    3056:	08 f0       	brcs	.+2      	; 0x305a <__addsf3x+0x96>
    3058:	b3 cf       	rjmp	.-154    	; 0x2fc0 <__mulsf3_pse+0xc0>
    305a:	93 95       	inc	r25
    305c:	88 0f       	add	r24, r24
    305e:	08 f0       	brcs	.+2      	; 0x3062 <__addsf3x+0x9e>
    3060:	99 27       	eor	r25, r25
    3062:	ee 0f       	add	r30, r30
    3064:	97 95       	ror	r25
    3066:	87 95       	ror	r24
    3068:	08 95       	ret

0000306a <__fp_mpack>:
    306a:	9f 3f       	cpi	r25, 0xFF	; 255
    306c:	31 f0       	breq	.+12     	; 0x307a <__fp_mpack_finite+0xc>

0000306e <__fp_mpack_finite>:
    306e:	91 50       	subi	r25, 0x01	; 1
    3070:	20 f4       	brcc	.+8      	; 0x307a <__fp_mpack_finite+0xc>
    3072:	87 95       	ror	r24
    3074:	77 95       	ror	r23
    3076:	67 95       	ror	r22
    3078:	b7 95       	ror	r27
    307a:	88 0f       	add	r24, r24
    307c:	91 1d       	adc	r25, r1
    307e:	96 95       	lsr	r25
    3080:	87 95       	ror	r24
    3082:	97 f9       	bld	r25, 7
    3084:	08 95       	ret

00003086 <__fp_pscA>:
    3086:	00 24       	eor	r0, r0
    3088:	0a 94       	dec	r0
    308a:	16 16       	cp	r1, r22
    308c:	17 06       	cpc	r1, r23
    308e:	18 06       	cpc	r1, r24
    3090:	09 06       	cpc	r0, r25
    3092:	08 95       	ret

00003094 <__fp_pscB>:
    3094:	00 24       	eor	r0, r0
    3096:	0a 94       	dec	r0
    3098:	12 16       	cp	r1, r18
    309a:	13 06       	cpc	r1, r19
    309c:	14 06       	cpc	r1, r20
    309e:	05 06       	cpc	r0, r21
    30a0:	08 95       	ret

000030a2 <__fp_round>:
    30a2:	09 2e       	mov	r0, r25
    30a4:	03 94       	inc	r0
    30a6:	00 0c       	add	r0, r0
    30a8:	11 f4       	brne	.+4      	; 0x30ae <__fp_round+0xc>
    30aa:	88 23       	and	r24, r24
    30ac:	52 f0       	brmi	.+20     	; 0x30c2 <__fp_round+0x20>
    30ae:	bb 0f       	add	r27, r27
    30b0:	40 f4       	brcc	.+16     	; 0x30c2 <__fp_round+0x20>
    30b2:	bf 2b       	or	r27, r31
    30b4:	11 f4       	brne	.+4      	; 0x30ba <__fp_round+0x18>
    30b6:	60 ff       	sbrs	r22, 0
    30b8:	04 c0       	rjmp	.+8      	; 0x30c2 <__fp_round+0x20>
    30ba:	6f 5f       	subi	r22, 0xFF	; 255
    30bc:	7f 4f       	sbci	r23, 0xFF	; 255
    30be:	8f 4f       	sbci	r24, 0xFF	; 255
    30c0:	9f 4f       	sbci	r25, 0xFF	; 255
    30c2:	08 95       	ret

000030c4 <_exit>:
    30c4:	f8 94       	cli

000030c6 <__stop_program>:
    30c6:	ff cf       	rjmp	.-2      	; 0x30c6 <__stop_program>
