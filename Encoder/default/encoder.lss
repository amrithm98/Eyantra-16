
encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  0000138a  0000141e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000138a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800308  00800308  00001526  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001526  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000343  00000000  00000000  00001546  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012ce  00000000  00000000  00001889  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000026f  00000000  00000000  00002b57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d4d  00000000  00000000  00002dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  00003b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000361  00000000  00000000  00003d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000066f  00000000  00000000  000040f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00004764  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 44 02 	jmp	0x488	; 0x488 <__vector_5>
      18:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e8       	ldi	r30, 0x8A	; 138
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a0 32       	cpi	r26, 0x20	; 32
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 8b 03 	call	0x716	; 0x716 <main>
     122:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     12a:	86 e6       	ldi	r24, 0x66	; 102
     12c:	9e e0       	ldi	r25, 0x0E	; 14
     12e:	fc 01       	movw	r30, r24
     130:	31 97       	sbiw	r30, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcd_set_4bit+0x6>
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     138:	40 e3       	ldi	r20, 0x30	; 48
     13a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     13c:	42 9a       	sbi	0x08, 2	; 8
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	38 e4       	ldi	r19, 0x48	; 72
     142:	f9 01       	movw	r30, r18
     144:	31 97       	sbiw	r30, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	fc 01       	movw	r30, r24
     14c:	31 97       	sbiw	r30, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     150:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     152:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     154:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     156:	42 9a       	sbi	0x08, 2	; 8
     158:	f9 01       	movw	r30, r18
     15a:	31 97       	sbiw	r30, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     15e:	42 98       	cbi	0x08, 2	; 8
     160:	fc 01       	movw	r30, r24
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     166:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     168:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     16a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     16c:	42 9a       	sbi	0x08, 2	; 8
     16e:	f9 01       	movw	r30, r18
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     174:	42 98       	cbi	0x08, 2	; 8
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     17a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     17c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     17e:	80 e2       	ldi	r24, 0x20	; 32
     180:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     182:	42 9a       	sbi	0x08, 2	; 8
     184:	c9 01       	movw	r24, r18
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     18a:	42 98       	cbi	0x08, 2	; 8

	
}
     18c:	08 95       	ret

0000018e <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     18e:	98 b1       	in	r25, 0x08	; 8
     190:	9f 70       	andi	r25, 0x0F	; 15
     192:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     194:	28 b1       	in	r18, 0x08	; 8
     196:	98 2f       	mov	r25, r24
     198:	90 7f       	andi	r25, 0xF0	; 240
     19a:	92 2b       	or	r25, r18
     19c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     19e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1a0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1a2:	42 9a       	sbi	0x08, 2	; 8
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	38 e4       	ldi	r19, 0x48	; 72
     1a8:	f9 01       	movw	r30, r18
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1ae:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 70       	andi	r25, 0x0F	; 15
     1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     1b6:	98 b1       	in	r25, 0x08	; 8
     1b8:	82 95       	swap	r24
     1ba:	80 7f       	andi	r24, 0xF0	; 240
     1bc:	98 2b       	or	r25, r24
     1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1c4:	42 9a       	sbi	0x08, 2	; 8
     1c6:	c9 01       	movw	r24, r18
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1cc:	42 98       	cbi	0x08, 2	; 8
}
     1ce:	08 95       	ret

000001d0 <lcd_init>:
     1d0:	86 e6       	ldi	r24, 0x66	; 102
     1d2:	9e e0       	ldi	r25, 0x0E	; 14
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x4>
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     1d8:	88 e2       	ldi	r24, 0x28	; 40
     1da:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x01);
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x06);
     1e4:	86 e0       	ldi	r24, 0x06	; 6
     1e6:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x0E);
     1ea:	8e e0       	ldi	r24, 0x0E	; 14
     1ec:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x80);
     1f0:	80 e8       	ldi	r24, 0x80	; 128
     1f2:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
		
}
     1f6:	08 95       	ret

000001f8 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     1f8:	98 b1       	in	r25, 0x08	; 8
     1fa:	9f 70       	andi	r25, 0x0F	; 15
     1fc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     1fe:	28 b1       	in	r18, 0x08	; 8
     200:	98 2f       	mov	r25, r24
     202:	90 7f       	andi	r25, 0xF0	; 240
     204:	92 2b       	or	r25, r18
     206:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     208:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     20a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     20c:	42 9a       	sbi	0x08, 2	; 8
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	38 e4       	ldi	r19, 0x48	; 72
     212:	f9 01       	movw	r30, r18
     214:	31 97       	sbiw	r30, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     218:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     21a:	98 b1       	in	r25, 0x08	; 8
     21c:	9f 70       	andi	r25, 0x0F	; 15
     21e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     220:	98 b1       	in	r25, 0x08	; 8
     222:	82 95       	swap	r24
     224:	80 7f       	andi	r24, 0xF0	; 240
     226:	98 2b       	or	r25, r24
     228:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     22a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     22c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     22e:	42 9a       	sbi	0x08, 2	; 8
     230:	c9 01       	movw	r24, r18
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     236:	42 98       	cbi	0x08, 2	; 8
}
     238:	08 95       	ret

0000023a <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     23a:	80 e8       	ldi	r24, 0x80	; 128
     23c:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
}
     240:	08 95       	ret

00000242 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	ec 01       	movw	r28, r24
     248:	03 c0       	rjmp	.+6      	; 0x250 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     24a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
		str++;
     24e:	21 96       	adiw	r28, 0x01	; 1


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     250:	88 81       	ld	r24, Y
     252:	88 23       	and	r24, r24
     254:	d1 f7       	brne	.-12     	; 0x24a <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	69 f0       	breq	.+26     	; 0x27a <lcd_cursor+0x1e>
     260:	83 30       	cpi	r24, 0x03	; 3
     262:	18 f4       	brcc	.+6      	; 0x26a <lcd_cursor+0xe>
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	a9 f4       	brne	.+42     	; 0x292 <lcd_cursor+0x36>
     268:	05 c0       	rjmp	.+10     	; 0x274 <lcd_cursor+0x18>
     26a:	83 30       	cpi	r24, 0x03	; 3
     26c:	49 f0       	breq	.+18     	; 0x280 <lcd_cursor+0x24>
     26e:	84 30       	cpi	r24, 0x04	; 4
     270:	81 f4       	brne	.+32     	; 0x292 <lcd_cursor+0x36>
     272:	0b c0       	rjmp	.+22     	; 0x28a <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     274:	86 2f       	mov	r24, r22
     276:	81 58       	subi	r24, 0x81	; 129
     278:	05 c0       	rjmp	.+10     	; 0x284 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     27a:	86 2f       	mov	r24, r22
     27c:	81 54       	subi	r24, 0x41	; 65
     27e:	02 c0       	rjmp	.+4      	; 0x284 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     280:	86 2f       	mov	r24, r22
     282:	8d 56       	subi	r24, 0x6D	; 109
     284:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     288:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     28a:	86 2f       	mov	r24, r22
     28c:	8d 52       	subi	r24, 0x2D	; 45
     28e:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     292:	08 95       	ret

00000294 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	8a 01       	movw	r16, r20
     29e:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2a0:	88 23       	and	r24, r24
     2a2:	11 f0       	breq	.+4      	; 0x2a8 <lcd_print+0x14>
     2a4:	66 23       	and	r22, r22
     2a6:	19 f4       	brne	.+6      	; 0x2ae <lcd_print+0x1a>
	{
		lcd_home();
     2a8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_home>
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     2ae:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_cursor>
	}
	if(digits==5 || flag==1)
     2b2:	c5 30       	cpi	r28, 0x05	; 5
     2b4:	d1 05       	cpc	r29, r1
     2b6:	71 f4       	brne	.+28     	; 0x2d4 <lcd_print+0x40>
	{
		million=value/10000+48;
     2b8:	c8 01       	movw	r24, r16
     2ba:	60 e1       	ldi	r22, 0x10	; 16
     2bc:	77 e2       	ldi	r23, 0x27	; 39
     2be:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__udivmodhi4>
     2c2:	cb 01       	movw	r24, r22
     2c4:	c0 96       	adiw	r24, 0x30	; 48
     2c6:	90 93 13 03 	sts	0x0313, r25
     2ca:	80 93 12 03 	sts	0x0312, r24
		lcd_wr_char(million);
     2ce:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     2d2:	05 c0       	rjmp	.+10     	; 0x2de <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     2d4:	c4 30       	cpi	r28, 0x04	; 4
     2d6:	d1 05       	cpc	r29, r1
     2d8:	11 f0       	breq	.+4      	; 0x2de <lcd_print+0x4a>
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	16 c0       	rjmp	.+44     	; 0x30a <lcd_print+0x76>
	{
		temp = value/1000;
     2de:	c8 01       	movw	r24, r16
     2e0:	68 ee       	ldi	r22, 0xE8	; 232
     2e2:	73 e0       	ldi	r23, 0x03	; 3
     2e4:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__udivmodhi4>
     2e8:	cb 01       	movw	r24, r22
     2ea:	60 93 14 03 	sts	0x0314, r22
     2ee:	90 93 15 03 	sts	0x0315, r25
		thousand = temp%10 + 48;
     2f2:	6a e0       	ldi	r22, 0x0A	; 10
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__udivmodhi4>
     2fa:	c0 96       	adiw	r24, 0x30	; 48
     2fc:	90 93 1f 03 	sts	0x031F, r25
     300:	80 93 1e 03 	sts	0x031E, r24
		lcd_wr_char(thousand);
     304:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     308:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     30a:	c3 30       	cpi	r28, 0x03	; 3
     30c:	d1 05       	cpc	r29, r1
     30e:	21 f0       	breq	.+8      	; 0x318 <lcd_print+0x84>
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	11 f0       	breq	.+4      	; 0x318 <lcd_print+0x84>
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	16 c0       	rjmp	.+44     	; 0x344 <lcd_print+0xb0>
	{
		temp = value/100;
     318:	c8 01       	movw	r24, r16
     31a:	64 e6       	ldi	r22, 0x64	; 100
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__udivmodhi4>
     322:	cb 01       	movw	r24, r22
     324:	60 93 14 03 	sts	0x0314, r22
     328:	90 93 15 03 	sts	0x0315, r25
		hundred = temp%10 + 48;
     32c:	6a e0       	ldi	r22, 0x0A	; 10
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__udivmodhi4>
     334:	c0 96       	adiw	r24, 0x30	; 48
     336:	90 93 1b 03 	sts	0x031B, r25
     33a:	80 93 1a 03 	sts	0x031A, r24
		lcd_wr_char(hundred);
     33e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     342:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     344:	c2 30       	cpi	r28, 0x02	; 2
     346:	d1 05       	cpc	r29, r1
     348:	21 f0       	breq	.+8      	; 0x352 <lcd_print+0xbe>
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	11 f0       	breq	.+4      	; 0x352 <lcd_print+0xbe>
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	16 c0       	rjmp	.+44     	; 0x37e <lcd_print+0xea>
	{
		temp = value/10;
     352:	c8 01       	movw	r24, r16
     354:	6a e0       	ldi	r22, 0x0A	; 10
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__udivmodhi4>
     35c:	cb 01       	movw	r24, r22
     35e:	60 93 14 03 	sts	0x0314, r22
     362:	90 93 15 03 	sts	0x0315, r25
		tens = temp%10 + 48;
     366:	6a e0       	ldi	r22, 0x0A	; 10
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__udivmodhi4>
     36e:	c0 96       	adiw	r24, 0x30	; 48
     370:	90 93 19 03 	sts	0x0319, r25
     374:	80 93 18 03 	sts	0x0318, r24
		lcd_wr_char(tens);
     378:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     37c:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     37e:	c1 30       	cpi	r28, 0x01	; 1
     380:	d1 05       	cpc	r29, r1
     382:	11 f0       	breq	.+4      	; 0x388 <lcd_print+0xf4>
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	61 f4       	brne	.+24     	; 0x3a0 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     388:	c8 01       	movw	r24, r16
     38a:	6a e0       	ldi	r22, 0x0A	; 10
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__udivmodhi4>
     392:	c0 96       	adiw	r24, 0x30	; 48
     394:	90 93 1d 03 	sts	0x031D, r25
     398:	80 93 1c 03 	sts	0x031C, r24
		lcd_wr_char(unit);
     39c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
	}
	if(digits>5)
     3a0:	26 97       	sbiw	r28, 0x06	; 6
     3a2:	1c f0       	brlt	.+6      	; 0x3aa <lcd_print+0x116>
	{
		lcd_wr_char('E');
     3a4:	85 e4       	ldi	r24, 0x45	; 69
     3a6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
	}
	
}
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	08 95       	ret

000003b4 <motion_pin_config>:
volatile unsigned int Degrees; //to accept angle in degrees for turning

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     3b4:	81 b1       	in	r24, 0x01	; 1
     3b6:	8f 60       	ori	r24, 0x0F	; 15
     3b8:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     3ba:	82 b1       	in	r24, 0x02	; 2
     3bc:	80 7f       	andi	r24, 0xF0	; 240
     3be:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     3c0:	ea e0       	ldi	r30, 0x0A	; 10
     3c2:	f1 e0       	ldi	r31, 0x01	; 1
     3c4:	80 81       	ld	r24, Z
     3c6:	88 61       	ori	r24, 0x18	; 24
     3c8:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     3ca:	eb e0       	ldi	r30, 0x0B	; 11
     3cc:	f1 e0       	ldi	r31, 0x01	; 1
     3ce:	80 81       	ld	r24, Z
     3d0:	88 61       	ori	r24, 0x18	; 24
     3d2:	80 83       	st	Z, r24
}
     3d4:	08 95       	ret

000003d6 <lcd_port_config>:

void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     3d6:	87 b1       	in	r24, 0x07	; 7
     3d8:	87 6f       	ori	r24, 0xF7	; 247
     3da:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     3dc:	88 b1       	in	r24, 0x08	; 8
     3de:	80 78       	andi	r24, 0x80	; 128
     3e0:	88 b9       	out	0x08, r24	; 8
}
     3e2:	08 95       	ret

000003e4 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     3e4:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     3e6:	74 9a       	sbi	0x0e, 4	; 14
}
     3e8:	08 95       	ret

000003ea <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     3ea:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     3ec:	75 9a       	sbi	0x0e, 5	; 14
}
     3ee:	08 95       	ret

000003f0 <port_init>:
volatile unsigned int Degrees; //to accept angle in degrees for turning

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     3f0:	81 b1       	in	r24, 0x01	; 1
     3f2:	8f 60       	ori	r24, 0x0F	; 15
     3f4:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     3f6:	82 b1       	in	r24, 0x02	; 2
     3f8:	80 7f       	andi	r24, 0xF0	; 240
     3fa:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     3fc:	ea e0       	ldi	r30, 0x0A	; 10
     3fe:	f1 e0       	ldi	r31, 0x01	; 1
     400:	80 81       	ld	r24, Z
     402:	88 61       	ori	r24, 0x18	; 24
     404:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     406:	eb e0       	ldi	r30, 0x0B	; 11
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	80 81       	ld	r24, Z
     40c:	88 61       	ori	r24, 0x18	; 24
     40e:	80 83       	st	Z, r24
}

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     410:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     412:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     414:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     416:	75 9a       	sbi	0x0e, 5	; 14
void port_init()
{
 motion_pin_config(); //robot motion pins config
 left_encoder_pin_config(); //left encoder pin config
 right_encoder_pin_config(); //right encoder pin config	
}
     418:	08 95       	ret

0000041a <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     41a:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     41c:	ea e6       	ldi	r30, 0x6A	; 106
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 81       	ld	r24, Z
     422:	82 60       	ori	r24, 0x02	; 2
     424:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     426:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     428:	78 94       	sei
}
     42a:	08 95       	ret

0000042c <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     42c:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     42e:	ea e6       	ldi	r30, 0x6A	; 106
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	80 81       	ld	r24, Z
     434:	88 60       	ori	r24, 0x08	; 8
     436:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     438:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     43a:	78 94       	sei
}
     43c:	08 95       	ret

0000043e <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
     43e:	1f 92       	push	r1
     440:	0f 92       	push	r0
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	0f 92       	push	r0
     446:	11 24       	eor	r1, r1
     448:	8f 93       	push	r24
     44a:	9f 93       	push	r25
     44c:	af 93       	push	r26
     44e:	bf 93       	push	r27
 ShaftCountRight++;  //increment right shaft position count
     450:	80 91 0c 03 	lds	r24, 0x030C
     454:	90 91 0d 03 	lds	r25, 0x030D
     458:	a0 91 0e 03 	lds	r26, 0x030E
     45c:	b0 91 0f 03 	lds	r27, 0x030F
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	a1 1d       	adc	r26, r1
     464:	b1 1d       	adc	r27, r1
     466:	80 93 0c 03 	sts	0x030C, r24
     46a:	90 93 0d 03 	sts	0x030D, r25
     46e:	a0 93 0e 03 	sts	0x030E, r26
     472:	b0 93 0f 03 	sts	0x030F, r27
 //lcd_cursor(1,1);
 //lcd_string(ShaftCountRight);
 //lcd_print(1,1,ShaftCountRight,3);
}
     476:	bf 91       	pop	r27
     478:	af 91       	pop	r26
     47a:	9f 91       	pop	r25
     47c:	8f 91       	pop	r24
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	8f 93       	push	r24
     494:	9f 93       	push	r25
     496:	af 93       	push	r26
     498:	bf 93       	push	r27

 ShaftCountLeft++;  //increment left shaft position count
     49a:	80 91 08 03 	lds	r24, 0x0308
     49e:	90 91 09 03 	lds	r25, 0x0309
     4a2:	a0 91 0a 03 	lds	r26, 0x030A
     4a6:	b0 91 0b 03 	lds	r27, 0x030B
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	a1 1d       	adc	r26, r1
     4ae:	b1 1d       	adc	r27, r1
     4b0:	80 93 08 03 	sts	0x0308, r24
     4b4:	90 93 09 03 	sts	0x0309, r25
     4b8:	a0 93 0a 03 	sts	0x030A, r26
     4bc:	b0 93 0b 03 	sts	0x030B, r27
 //lcd_cursor(2,1);
 //lcd_print(2,1,ShaftCountLeft,3);
}
     4c0:	bf 91       	pop	r27
     4c2:	af 91       	pop	r26
     4c4:	9f 91       	pop	r25
     4c6:	8f 91       	pop	r24
     4c8:	0f 90       	pop	r0
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	0f 90       	pop	r0
     4ce:	1f 90       	pop	r1
     4d0:	18 95       	reti

000004d2 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     4d2:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     4d4:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     4d6:	8f 70       	andi	r24, 0x0F	; 15
     4d8:	89 2b       	or	r24, r25
 PORTA = PortARestore; 		// executing the command
     4da:	82 b9       	out	0x02, r24	; 2
}
     4dc:	08 95       	ret

000004de <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     4de:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     4e0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     4e2:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     4e4:	82 b9       	out	0x02, r24	; 2
}

void forward (void) //both wheels forward
{
  motion_set(0x06);
}
     4e6:	08 95       	ret

000004e8 <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     4e8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     4ea:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     4ec:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     4ee:	82 b9       	out	0x02, r24	; 2
}

void back (void) //both wheels backward
{
  motion_set(0x09);
}
     4f0:	08 95       	ret

000004f2 <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     4f2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     4f4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     4f6:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     4f8:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     4fa:	08 95       	ret

000004fc <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     4fc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     4fe:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     500:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     502:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     504:	08 95       	ret

00000506 <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     506:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     508:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     50a:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     50c:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     50e:	08 95       	ret

00000510 <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     510:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     512:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     514:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     516:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     518:	08 95       	ret

0000051a <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     51a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     51c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     51e:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     520:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     522:	08 95       	ret

00000524 <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     524:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     526:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     528:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     52a:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     52c:	08 95       	ret

0000052e <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     52e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     530:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     532:	82 b9       	out	0x02, r24	; 2
}

void stop (void)
{
  motion_set(0x00);
}
     534:	08 95       	ret

00000536 <angle_rotate>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;
 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     53e:	a0 e0       	ldi	r26, 0x00	; 0
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	bc 01       	movw	r22, r24
     544:	cd 01       	movw	r24, r26
     546:	0e 94 0a 07 	call	0xe14	; 0xe14 <__floatunsisf>
     54a:	28 e4       	ldi	r18, 0x48	; 72
     54c:	31 ee       	ldi	r19, 0xE1	; 225
     54e:	42 e8       	ldi	r20, 0x82	; 130
     550:	50 e4       	ldi	r21, 0x40	; 64
     552:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__divsf3>
     556:	0e 94 04 04 	call	0x808	; 0x808 <__fixunssfsi>
     55a:	7b 01       	movw	r14, r22
     55c:	8c 01       	movw	r16, r24
 ShaftCountRight = 0; 
     55e:	10 92 0c 03 	sts	0x030C, r1
     562:	10 92 0d 03 	sts	0x030D, r1
     566:	10 92 0e 03 	sts	0x030E, r1
     56a:	10 92 0f 03 	sts	0x030F, r1
 ShaftCountLeft = 0; 
     56e:	10 92 08 03 	sts	0x0308, r1
     572:	10 92 09 03 	sts	0x0309, r1
     576:	10 92 0a 03 	sts	0x030A, r1
     57a:	10 92 0b 03 	sts	0x030B, r1

 while (1)
 {
  //lcd_print(1,1,ShaftCountLeft,2);
  //lcd_print(2,1,ShaftCountRight,2);
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     57e:	80 91 0c 03 	lds	r24, 0x030C
     582:	90 91 0d 03 	lds	r25, 0x030D
     586:	a0 91 0e 03 	lds	r26, 0x030E
     58a:	b0 91 0f 03 	lds	r27, 0x030F
     58e:	20 91 08 03 	lds	r18, 0x0308
     592:	30 91 09 03 	lds	r19, 0x0309
     596:	40 91 0a 03 	lds	r20, 0x030A
     59a:	50 91 0b 03 	lds	r21, 0x030B
     59e:	8e 15       	cp	r24, r14
     5a0:	9f 05       	cpc	r25, r15
     5a2:	a0 07       	cpc	r26, r16
     5a4:	b1 07       	cpc	r27, r17
     5a6:	28 f4       	brcc	.+10     	; 0x5b2 <angle_rotate+0x7c>
     5a8:	2e 15       	cp	r18, r14
     5aa:	3f 05       	cpc	r19, r15
     5ac:	40 07       	cpc	r20, r16
     5ae:	51 07       	cpc	r21, r17
     5b0:	30 f3       	brcs	.-52     	; 0x57e <angle_rotate+0x48>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     5b2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     5b4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     5b6:	82 b9       	out	0x02, r24	; 2
  //lcd_print(2,1,ShaftCountRight,2);
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
  break;
 }
 stop(); //Stop robot
}
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	08 95       	ret

000005c2 <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
     5c2:	ef 92       	push	r14
     5c4:	ff 92       	push	r15
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount =(float) DistanceInMM / 5.338; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     5ca:	a0 e0       	ldi	r26, 0x00	; 0
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	bc 01       	movw	r22, r24
     5d0:	cd 01       	movw	r24, r26
     5d2:	0e 94 0a 07 	call	0xe14	; 0xe14 <__floatunsisf>
     5d6:	25 ee       	ldi	r18, 0xE5	; 229
     5d8:	30 ed       	ldi	r19, 0xD0	; 208
     5da:	4a ea       	ldi	r20, 0xAA	; 170
     5dc:	50 e4       	ldi	r21, 0x40	; 64
     5de:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__divsf3>
     5e2:	0e 94 04 04 	call	0x808	; 0x808 <__fixunssfsi>
     5e6:	7b 01       	movw	r14, r22
     5e8:	8c 01       	movw	r16, r24
 ShaftCountLeft = 0;
     5ea:	10 92 08 03 	sts	0x0308, r1
     5ee:	10 92 09 03 	sts	0x0309, r1
     5f2:	10 92 0a 03 	sts	0x030A, r1
     5f6:	10 92 0b 03 	sts	0x030B, r1
 while(1)
 {
  lcd_print(1,1,ShaftCountLeft,2);
     5fa:	20 91 08 03 	lds	r18, 0x0308
     5fe:	30 91 09 03 	lds	r19, 0x0309
     602:	40 91 0a 03 	lds	r20, 0x030A
     606:	50 91 0b 03 	lds	r21, 0x030B
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	a9 01       	movw	r20, r18
     610:	22 e0       	ldi	r18, 0x02	; 2
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
  lcd_print(2,1,ShaftCountRight,2);
     618:	20 91 0c 03 	lds	r18, 0x030C
     61c:	30 91 0d 03 	lds	r19, 0x030D
     620:	40 91 0e 03 	lds	r20, 0x030E
     624:	50 91 0f 03 	lds	r21, 0x030F
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	a9 01       	movw	r20, r18
     62e:	22 e0       	ldi	r18, 0x02	; 2
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
  if(ShaftCountLeft > ReqdShaftCountInt)
     636:	80 91 08 03 	lds	r24, 0x0308
     63a:	90 91 09 03 	lds	r25, 0x0309
     63e:	a0 91 0a 03 	lds	r26, 0x030A
     642:	b0 91 0b 03 	lds	r27, 0x030B
     646:	e8 16       	cp	r14, r24
     648:	f9 06       	cpc	r15, r25
     64a:	0a 07       	cpc	r16, r26
     64c:	1b 07       	cpc	r17, r27
     64e:	a8 f6       	brcc	.-86     	; 0x5fa <linear_distance_mm+0x38>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     650:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     652:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     654:	82 b9       	out	0x02, r24	; 2
  {
  	break;
  }
 } 
 stop(); //Stop robot
}
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	08 95       	ret

00000660 <forward_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     660:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     662:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     664:	26 60       	ori	r18, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     666:	22 b9       	out	0x02, r18	; 2
}

void forward_mm(unsigned int DistanceInMM)
{
 forward();
 linear_distance_mm(DistanceInMM);
     668:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <linear_distance_mm>
}
     66c:	08 95       	ret

0000066e <back_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     66e:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     670:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     672:	29 60       	ori	r18, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     674:	22 b9       	out	0x02, r18	; 2
}

void back_mm(unsigned int DistanceInMM)
{
 back();
 linear_distance_mm(DistanceInMM);
     676:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <linear_distance_mm>
}
     67a:	08 95       	ret

0000067c <left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     67c:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     67e:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     680:	25 60       	ori	r18, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     682:	22 b9       	out	0x02, r18	; 2

void left_degrees(unsigned int Degrees) 
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
 angle_rotate(Degrees);
     684:	0e 94 9b 02 	call	0x536	; 0x536 <angle_rotate>
}
     688:	08 95       	ret

0000068a <right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     68a:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     68c:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     68e:	2a 60       	ori	r18, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     690:	22 b9       	out	0x02, r18	; 2

void right_degrees(unsigned int Degrees)
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
 angle_rotate(Degrees);
     692:	0e 94 9b 02 	call	0x536	; 0x536 <angle_rotate>
}
     696:	08 95       	ret

00000698 <soft_left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     698:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     69a:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     69c:	24 60       	ori	r18, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     69e:	22 b9       	out	0x02, r18	; 2
void soft_left_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	0e 94 9b 02 	call	0x536	; 0x536 <angle_rotate>
}
     6a8:	08 95       	ret

000006aa <soft_right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6aa:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6ac:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6ae:	22 60       	ori	r18, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     6b0:	22 b9       	out	0x02, r18	; 2
void soft_right_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	0e 94 9b 02 	call	0x536	; 0x536 <angle_rotate>
}
     6ba:	08 95       	ret

000006bc <soft_left_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6bc:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6be:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6c0:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     6c2:	22 b9       	out	0x02, r18	; 2
void soft_left_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left_2(); //Turn reverse soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
     6c8:	0e 94 9b 02 	call	0x536	; 0x536 <angle_rotate>
}
     6cc:	08 95       	ret

000006ce <soft_right_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6ce:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6d0:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6d2:	28 60       	ori	r18, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     6d4:	22 b9       	out	0x02, r18	; 2
void soft_right_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right_2();  //Turn reverse soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	0e 94 9b 02 	call	0x536	; 0x536 <angle_rotate>
}
     6de:	08 95       	ret

000006e0 <init_devices>:

//Function to initialize all the devices
void init_devices()
{
 cli(); //Clears the global interrupt
     6e0:	f8 94       	cli
 port_init();  //Initializes all the ports
     6e2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <port_init>
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
}

void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     6e6:	87 b1       	in	r24, 0x07	; 7
     6e8:	87 6f       	ori	r24, 0xF7	; 247
     6ea:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     6ec:	88 b1       	in	r24, 0x08	; 8
     6ee:	80 78       	andi	r24, 0x80	; 128
     6f0:	88 b9       	out	0x08, r24	; 8
 right_encoder_pin_config(); //right encoder pin config	
}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     6f2:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     6f4:	ea e6       	ldi	r30, 0x6A	; 106
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	80 81       	ld	r24, Z
     6fa:	82 60       	ori	r24, 0x02	; 2
     6fc:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     6fe:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     700:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     702:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     704:	ea e6       	ldi	r30, 0x6A	; 106
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	80 81       	ld	r24, Z
     70a:	88 60       	ori	r24, 0x08	; 8
     70c:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     70e:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     710:	78 94       	sei
 cli(); //Clears the global interrupt
 port_init();  //Initializes all the ports
 lcd_port_config();
 left_position_encoder_interrupt_init();
 right_position_encoder_interrupt_init();
 sei();   // Enables the global interrupt 
     712:	78 94       	sei
}
     714:	08 95       	ret

00000716 <main>:


//Main Function

int main(void)
{
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
	init_devices();
     71a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <init_devices>
	lcd_init();
     71e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init>
     722:	c0 e7       	ldi	r28, 0x70	; 112
     724:	d1 e0       	ldi	r29, 0x01	; 1
	//lcd_wr_command(0x01);
	//lcd_wr_command(0x02);
	while(1)
	{
		
		forward_mm(100); //Moves robot forward 100mm
     726:	84 e6       	ldi	r24, 0x64	; 100
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 30 03 	call	0x660	; 0x660 <forward_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     72e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     730:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     732:	82 b9       	out	0x02, r24	; 2
     734:	88 e8       	ldi	r24, 0x88	; 136
     736:	93 e1       	ldi	r25, 0x13	; 19
     738:	fe 01       	movw	r30, r28
     73a:	31 97       	sbiw	r30, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <main+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     73e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     740:	d9 f7       	brne	.-10     	; 0x738 <main+0x22>
		
		forward_mm(100); //Moves robot forward 100mm
		stop();
		_delay_ms(500);			
		
		back_mm(100);   //Moves robot backward 100mm
     742:	84 e6       	ldi	r24, 0x64	; 100
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 37 03 	call	0x66e	; 0x66e <back_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     74a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     74c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     74e:	82 b9       	out	0x02, r24	; 2
     750:	88 e8       	ldi	r24, 0x88	; 136
     752:	93 e1       	ldi	r25, 0x13	; 19
     754:	fe 01       	movw	r30, r28
     756:	31 97       	sbiw	r30, 0x01	; 1
     758:	f1 f7       	brne	.-4      	; 0x756 <main+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     75a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     75c:	d9 f7       	brne	.-10     	; 0x754 <main+0x3e>
		
		back_mm(100);   //Moves robot backward 100mm
		stop();			
		_delay_ms(500);
		
		left_degrees(90); //Rotate robot left by 90 degrees
     75e:	8a e5       	ldi	r24, 0x5A	; 90
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 3e 03 	call	0x67c	; 0x67c <left_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     766:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     768:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     76a:	82 b9       	out	0x02, r24	; 2
     76c:	88 e8       	ldi	r24, 0x88	; 136
     76e:	93 e1       	ldi	r25, 0x13	; 19
     770:	fe 01       	movw	r30, r28
     772:	31 97       	sbiw	r30, 0x01	; 1
     774:	f1 f7       	brne	.-4      	; 0x772 <main+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     776:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     778:	d9 f7       	brne	.-10     	; 0x770 <main+0x5a>
		
		left_degrees(90); //Rotate robot left by 90 degrees
		stop();
		_delay_ms(500);
		
		right_degrees(90); //Rotate robot right by 90 degrees
     77a:	8a e5       	ldi	r24, 0x5A	; 90
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 45 03 	call	0x68a	; 0x68a <right_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     782:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     784:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     786:	82 b9       	out	0x02, r24	; 2
     788:	88 e8       	ldi	r24, 0x88	; 136
     78a:	93 e1       	ldi	r25, 0x13	; 19
     78c:	fe 01       	movw	r30, r28
     78e:	31 97       	sbiw	r30, 0x01	; 1
     790:	f1 f7       	brne	.-4      	; 0x78e <main+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     792:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     794:	d9 f7       	brne	.-10     	; 0x78c <main+0x76>
		
		right_degrees(90); //Rotate robot right by 90 degrees
		stop();
		_delay_ms(500);
		
		soft_left_degrees(90); //Rotate (soft turn) by 90 degrees
     796:	8a e5       	ldi	r24, 0x5A	; 90
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 4c 03 	call	0x698	; 0x698 <soft_left_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     79e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7a0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     7a2:	82 b9       	out	0x02, r24	; 2
     7a4:	88 e8       	ldi	r24, 0x88	; 136
     7a6:	93 e1       	ldi	r25, 0x13	; 19
     7a8:	fe 01       	movw	r30, r28
     7aa:	31 97       	sbiw	r30, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <main+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b0:	d9 f7       	brne	.-10     	; 0x7a8 <main+0x92>
		
		soft_left_degrees(90); //Rotate (soft turn) by 90 degrees
		stop();
		_delay_ms(500);
		
		soft_right_degrees(90);	//Rotate (soft turn) by 90 degrees
     7b2:	8a e5       	ldi	r24, 0x5A	; 90
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 55 03 	call	0x6aa	; 0x6aa <soft_right_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7ba:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7bc:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     7be:	82 b9       	out	0x02, r24	; 2
     7c0:	88 e8       	ldi	r24, 0x88	; 136
     7c2:	93 e1       	ldi	r25, 0x13	; 19
     7c4:	fe 01       	movw	r30, r28
     7c6:	31 97       	sbiw	r30, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <main+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7cc:	d9 f7       	brne	.-10     	; 0x7c4 <main+0xae>
		
		soft_right_degrees(90);	//Rotate (soft turn) by 90 degrees
		stop();
		_delay_ms(500);

		soft_left_2_degrees(90); //Rotate (soft turn) by 90 degrees
     7ce:	8a e5       	ldi	r24, 0x5A	; 90
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <soft_left_2_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7d6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7d8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     7da:	82 b9       	out	0x02, r24	; 2
     7dc:	88 e8       	ldi	r24, 0x88	; 136
     7de:	93 e1       	ldi	r25, 0x13	; 19
     7e0:	fe 01       	movw	r30, r28
     7e2:	31 97       	sbiw	r30, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <main+0xcc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7e8:	d9 f7       	brne	.-10     	; 0x7e0 <main+0xca>

		soft_left_2_degrees(90); //Rotate (soft turn) by 90 degrees
		stop();
		_delay_ms(500);
		
		soft_right_2_degrees(90);	//Rotate (soft turn) by 90 degrees
     7ea:	8a e5       	ldi	r24, 0x5A	; 90
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 67 03 	call	0x6ce	; 0x6ce <soft_right_2_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7f2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7f4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     7f6:	82 b9       	out	0x02, r24	; 2
     7f8:	88 e8       	ldi	r24, 0x88	; 136
     7fa:	93 e1       	ldi	r25, 0x13	; 19
     7fc:	fe 01       	movw	r30, r28
     7fe:	31 97       	sbiw	r30, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <main+0xe8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     802:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     804:	d9 f7       	brne	.-10     	; 0x7fc <main+0xe6>
     806:	8f cf       	rjmp	.-226    	; 0x726 <main+0x10>

00000808 <__fixunssfsi>:
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	7b 01       	movw	r14, r22
     812:	8c 01       	movw	r16, r24
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	5f e4       	ldi	r21, 0x4F	; 79
     81c:	0e 94 86 06 	call	0xd0c	; 0xd0c <__gesf2>
     820:	88 23       	and	r24, r24
     822:	8c f0       	brlt	.+34     	; 0x846 <__fixunssfsi+0x3e>
     824:	c8 01       	movw	r24, r16
     826:	b7 01       	movw	r22, r14
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	5f e4       	ldi	r21, 0x4F	; 79
     830:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__subsf3>
     834:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fixsfsi>
     838:	9b 01       	movw	r18, r22
     83a:	ac 01       	movw	r20, r24
     83c:	20 50       	subi	r18, 0x00	; 0
     83e:	30 40       	sbci	r19, 0x00	; 0
     840:	40 40       	sbci	r20, 0x00	; 0
     842:	50 48       	sbci	r21, 0x80	; 128
     844:	06 c0       	rjmp	.+12     	; 0x852 <__fixunssfsi+0x4a>
     846:	c8 01       	movw	r24, r16
     848:	b7 01       	movw	r22, r14
     84a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fixsfsi>
     84e:	9b 01       	movw	r18, r22
     850:	ac 01       	movw	r20, r24
     852:	b9 01       	movw	r22, r18
     854:	ca 01       	movw	r24, r20
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	08 95       	ret

00000860 <_fpadd_parts>:
     860:	a0 e0       	ldi	r26, 0x00	; 0
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	e6 e3       	ldi	r30, 0x36	; 54
     866:	f4 e0       	ldi	r31, 0x04	; 4
     868:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__prologue_saves__>
     86c:	dc 01       	movw	r26, r24
     86e:	2b 01       	movw	r4, r22
     870:	fa 01       	movw	r30, r20
     872:	9c 91       	ld	r25, X
     874:	92 30       	cpi	r25, 0x02	; 2
     876:	08 f4       	brcc	.+2      	; 0x87a <_fpadd_parts+0x1a>
     878:	39 c1       	rjmp	.+626    	; 0xaec <_fpadd_parts+0x28c>
     87a:	eb 01       	movw	r28, r22
     87c:	88 81       	ld	r24, Y
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	08 f4       	brcc	.+2      	; 0x884 <_fpadd_parts+0x24>
     882:	33 c1       	rjmp	.+614    	; 0xaea <_fpadd_parts+0x28a>
     884:	94 30       	cpi	r25, 0x04	; 4
     886:	69 f4       	brne	.+26     	; 0x8a2 <_fpadd_parts+0x42>
     888:	84 30       	cpi	r24, 0x04	; 4
     88a:	09 f0       	breq	.+2      	; 0x88e <_fpadd_parts+0x2e>
     88c:	2f c1       	rjmp	.+606    	; 0xaec <_fpadd_parts+0x28c>
     88e:	11 96       	adiw	r26, 0x01	; 1
     890:	9c 91       	ld	r25, X
     892:	11 97       	sbiw	r26, 0x01	; 1
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	98 17       	cp	r25, r24
     898:	09 f4       	brne	.+2      	; 0x89c <_fpadd_parts+0x3c>
     89a:	28 c1       	rjmp	.+592    	; 0xaec <_fpadd_parts+0x28c>
     89c:	a0 e0       	ldi	r26, 0x00	; 0
     89e:	b2 e0       	ldi	r27, 0x02	; 2
     8a0:	25 c1       	rjmp	.+586    	; 0xaec <_fpadd_parts+0x28c>
     8a2:	84 30       	cpi	r24, 0x04	; 4
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <_fpadd_parts+0x48>
     8a6:	21 c1       	rjmp	.+578    	; 0xaea <_fpadd_parts+0x28a>
     8a8:	82 30       	cpi	r24, 0x02	; 2
     8aa:	a9 f4       	brne	.+42     	; 0x8d6 <_fpadd_parts+0x76>
     8ac:	92 30       	cpi	r25, 0x02	; 2
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <_fpadd_parts+0x52>
     8b0:	1d c1       	rjmp	.+570    	; 0xaec <_fpadd_parts+0x28c>
     8b2:	9a 01       	movw	r18, r20
     8b4:	ad 01       	movw	r20, r26
     8b6:	88 e0       	ldi	r24, 0x08	; 8
     8b8:	ea 01       	movw	r28, r20
     8ba:	09 90       	ld	r0, Y+
     8bc:	ae 01       	movw	r20, r28
     8be:	e9 01       	movw	r28, r18
     8c0:	09 92       	st	Y+, r0
     8c2:	9e 01       	movw	r18, r28
     8c4:	81 50       	subi	r24, 0x01	; 1
     8c6:	c1 f7       	brne	.-16     	; 0x8b8 <_fpadd_parts+0x58>
     8c8:	e2 01       	movw	r28, r4
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	11 96       	adiw	r26, 0x01	; 1
     8ce:	9c 91       	ld	r25, X
     8d0:	89 23       	and	r24, r25
     8d2:	81 83       	std	Z+1, r24	; 0x01
     8d4:	08 c1       	rjmp	.+528    	; 0xae6 <_fpadd_parts+0x286>
     8d6:	92 30       	cpi	r25, 0x02	; 2
     8d8:	09 f4       	brne	.+2      	; 0x8dc <_fpadd_parts+0x7c>
     8da:	07 c1       	rjmp	.+526    	; 0xaea <_fpadd_parts+0x28a>
     8dc:	12 96       	adiw	r26, 0x02	; 2
     8de:	2d 90       	ld	r2, X+
     8e0:	3c 90       	ld	r3, X
     8e2:	13 97       	sbiw	r26, 0x03	; 3
     8e4:	eb 01       	movw	r28, r22
     8e6:	8a 81       	ldd	r24, Y+2	; 0x02
     8e8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ea:	14 96       	adiw	r26, 0x04	; 4
     8ec:	ad 90       	ld	r10, X+
     8ee:	bd 90       	ld	r11, X+
     8f0:	cd 90       	ld	r12, X+
     8f2:	dc 90       	ld	r13, X
     8f4:	17 97       	sbiw	r26, 0x07	; 7
     8f6:	ec 80       	ldd	r14, Y+4	; 0x04
     8f8:	fd 80       	ldd	r15, Y+5	; 0x05
     8fa:	0e 81       	ldd	r16, Y+6	; 0x06
     8fc:	1f 81       	ldd	r17, Y+7	; 0x07
     8fe:	91 01       	movw	r18, r2
     900:	28 1b       	sub	r18, r24
     902:	39 0b       	sbc	r19, r25
     904:	b9 01       	movw	r22, r18
     906:	37 ff       	sbrs	r19, 7
     908:	04 c0       	rjmp	.+8      	; 0x912 <_fpadd_parts+0xb2>
     90a:	66 27       	eor	r22, r22
     90c:	77 27       	eor	r23, r23
     90e:	62 1b       	sub	r22, r18
     910:	73 0b       	sbc	r23, r19
     912:	60 32       	cpi	r22, 0x20	; 32
     914:	71 05       	cpc	r23, r1
     916:	0c f0       	brlt	.+2      	; 0x91a <_fpadd_parts+0xba>
     918:	61 c0       	rjmp	.+194    	; 0x9dc <_fpadd_parts+0x17c>
     91a:	12 16       	cp	r1, r18
     91c:	13 06       	cpc	r1, r19
     91e:	6c f5       	brge	.+90     	; 0x97a <_fpadd_parts+0x11a>
     920:	37 01       	movw	r6, r14
     922:	48 01       	movw	r8, r16
     924:	06 2e       	mov	r0, r22
     926:	04 c0       	rjmp	.+8      	; 0x930 <_fpadd_parts+0xd0>
     928:	96 94       	lsr	r9
     92a:	87 94       	ror	r8
     92c:	77 94       	ror	r7
     92e:	67 94       	ror	r6
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <_fpadd_parts+0xc8>
     934:	21 e0       	ldi	r18, 0x01	; 1
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <_fpadd_parts+0xe6>
     93e:	22 0f       	add	r18, r18
     940:	33 1f       	adc	r19, r19
     942:	44 1f       	adc	r20, r20
     944:	55 1f       	adc	r21, r21
     946:	6a 95       	dec	r22
     948:	d2 f7       	brpl	.-12     	; 0x93e <_fpadd_parts+0xde>
     94a:	21 50       	subi	r18, 0x01	; 1
     94c:	30 40       	sbci	r19, 0x00	; 0
     94e:	40 40       	sbci	r20, 0x00	; 0
     950:	50 40       	sbci	r21, 0x00	; 0
     952:	2e 21       	and	r18, r14
     954:	3f 21       	and	r19, r15
     956:	40 23       	and	r20, r16
     958:	51 23       	and	r21, r17
     95a:	21 15       	cp	r18, r1
     95c:	31 05       	cpc	r19, r1
     95e:	41 05       	cpc	r20, r1
     960:	51 05       	cpc	r21, r1
     962:	21 f0       	breq	.+8      	; 0x96c <_fpadd_parts+0x10c>
     964:	21 e0       	ldi	r18, 0x01	; 1
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	79 01       	movw	r14, r18
     96e:	8a 01       	movw	r16, r20
     970:	e6 28       	or	r14, r6
     972:	f7 28       	or	r15, r7
     974:	08 29       	or	r16, r8
     976:	19 29       	or	r17, r9
     978:	3c c0       	rjmp	.+120    	; 0x9f2 <_fpadd_parts+0x192>
     97a:	23 2b       	or	r18, r19
     97c:	d1 f1       	breq	.+116    	; 0x9f2 <_fpadd_parts+0x192>
     97e:	26 0e       	add	r2, r22
     980:	37 1e       	adc	r3, r23
     982:	35 01       	movw	r6, r10
     984:	46 01       	movw	r8, r12
     986:	06 2e       	mov	r0, r22
     988:	04 c0       	rjmp	.+8      	; 0x992 <_fpadd_parts+0x132>
     98a:	96 94       	lsr	r9
     98c:	87 94       	ror	r8
     98e:	77 94       	ror	r7
     990:	67 94       	ror	r6
     992:	0a 94       	dec	r0
     994:	d2 f7       	brpl	.-12     	; 0x98a <_fpadd_parts+0x12a>
     996:	21 e0       	ldi	r18, 0x01	; 1
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	04 c0       	rjmp	.+8      	; 0x9a8 <_fpadd_parts+0x148>
     9a0:	22 0f       	add	r18, r18
     9a2:	33 1f       	adc	r19, r19
     9a4:	44 1f       	adc	r20, r20
     9a6:	55 1f       	adc	r21, r21
     9a8:	6a 95       	dec	r22
     9aa:	d2 f7       	brpl	.-12     	; 0x9a0 <_fpadd_parts+0x140>
     9ac:	21 50       	subi	r18, 0x01	; 1
     9ae:	30 40       	sbci	r19, 0x00	; 0
     9b0:	40 40       	sbci	r20, 0x00	; 0
     9b2:	50 40       	sbci	r21, 0x00	; 0
     9b4:	2a 21       	and	r18, r10
     9b6:	3b 21       	and	r19, r11
     9b8:	4c 21       	and	r20, r12
     9ba:	5d 21       	and	r21, r13
     9bc:	21 15       	cp	r18, r1
     9be:	31 05       	cpc	r19, r1
     9c0:	41 05       	cpc	r20, r1
     9c2:	51 05       	cpc	r21, r1
     9c4:	21 f0       	breq	.+8      	; 0x9ce <_fpadd_parts+0x16e>
     9c6:	21 e0       	ldi	r18, 0x01	; 1
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	59 01       	movw	r10, r18
     9d0:	6a 01       	movw	r12, r20
     9d2:	a6 28       	or	r10, r6
     9d4:	b7 28       	or	r11, r7
     9d6:	c8 28       	or	r12, r8
     9d8:	d9 28       	or	r13, r9
     9da:	0b c0       	rjmp	.+22     	; 0x9f2 <_fpadd_parts+0x192>
     9dc:	82 15       	cp	r24, r2
     9de:	93 05       	cpc	r25, r3
     9e0:	2c f0       	brlt	.+10     	; 0x9ec <_fpadd_parts+0x18c>
     9e2:	1c 01       	movw	r2, r24
     9e4:	aa 24       	eor	r10, r10
     9e6:	bb 24       	eor	r11, r11
     9e8:	65 01       	movw	r12, r10
     9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <_fpadd_parts+0x192>
     9ec:	ee 24       	eor	r14, r14
     9ee:	ff 24       	eor	r15, r15
     9f0:	87 01       	movw	r16, r14
     9f2:	11 96       	adiw	r26, 0x01	; 1
     9f4:	9c 91       	ld	r25, X
     9f6:	d2 01       	movw	r26, r4
     9f8:	11 96       	adiw	r26, 0x01	; 1
     9fa:	8c 91       	ld	r24, X
     9fc:	98 17       	cp	r25, r24
     9fe:	09 f4       	brne	.+2      	; 0xa02 <_fpadd_parts+0x1a2>
     a00:	45 c0       	rjmp	.+138    	; 0xa8c <_fpadd_parts+0x22c>
     a02:	99 23       	and	r25, r25
     a04:	39 f0       	breq	.+14     	; 0xa14 <_fpadd_parts+0x1b4>
     a06:	a8 01       	movw	r20, r16
     a08:	97 01       	movw	r18, r14
     a0a:	2a 19       	sub	r18, r10
     a0c:	3b 09       	sbc	r19, r11
     a0e:	4c 09       	sbc	r20, r12
     a10:	5d 09       	sbc	r21, r13
     a12:	06 c0       	rjmp	.+12     	; 0xa20 <_fpadd_parts+0x1c0>
     a14:	a6 01       	movw	r20, r12
     a16:	95 01       	movw	r18, r10
     a18:	2e 19       	sub	r18, r14
     a1a:	3f 09       	sbc	r19, r15
     a1c:	40 0b       	sbc	r20, r16
     a1e:	51 0b       	sbc	r21, r17
     a20:	57 fd       	sbrc	r21, 7
     a22:	08 c0       	rjmp	.+16     	; 0xa34 <_fpadd_parts+0x1d4>
     a24:	11 82       	std	Z+1, r1	; 0x01
     a26:	33 82       	std	Z+3, r3	; 0x03
     a28:	22 82       	std	Z+2, r2	; 0x02
     a2a:	24 83       	std	Z+4, r18	; 0x04
     a2c:	35 83       	std	Z+5, r19	; 0x05
     a2e:	46 83       	std	Z+6, r20	; 0x06
     a30:	57 83       	std	Z+7, r21	; 0x07
     a32:	1d c0       	rjmp	.+58     	; 0xa6e <_fpadd_parts+0x20e>
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	81 83       	std	Z+1, r24	; 0x01
     a38:	33 82       	std	Z+3, r3	; 0x03
     a3a:	22 82       	std	Z+2, r2	; 0x02
     a3c:	88 27       	eor	r24, r24
     a3e:	99 27       	eor	r25, r25
     a40:	dc 01       	movw	r26, r24
     a42:	82 1b       	sub	r24, r18
     a44:	93 0b       	sbc	r25, r19
     a46:	a4 0b       	sbc	r26, r20
     a48:	b5 0b       	sbc	r27, r21
     a4a:	84 83       	std	Z+4, r24	; 0x04
     a4c:	95 83       	std	Z+5, r25	; 0x05
     a4e:	a6 83       	std	Z+6, r26	; 0x06
     a50:	b7 83       	std	Z+7, r27	; 0x07
     a52:	0d c0       	rjmp	.+26     	; 0xa6e <_fpadd_parts+0x20e>
     a54:	22 0f       	add	r18, r18
     a56:	33 1f       	adc	r19, r19
     a58:	44 1f       	adc	r20, r20
     a5a:	55 1f       	adc	r21, r21
     a5c:	24 83       	std	Z+4, r18	; 0x04
     a5e:	35 83       	std	Z+5, r19	; 0x05
     a60:	46 83       	std	Z+6, r20	; 0x06
     a62:	57 83       	std	Z+7, r21	; 0x07
     a64:	82 81       	ldd	r24, Z+2	; 0x02
     a66:	93 81       	ldd	r25, Z+3	; 0x03
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	93 83       	std	Z+3, r25	; 0x03
     a6c:	82 83       	std	Z+2, r24	; 0x02
     a6e:	24 81       	ldd	r18, Z+4	; 0x04
     a70:	35 81       	ldd	r19, Z+5	; 0x05
     a72:	46 81       	ldd	r20, Z+6	; 0x06
     a74:	57 81       	ldd	r21, Z+7	; 0x07
     a76:	da 01       	movw	r26, r20
     a78:	c9 01       	movw	r24, r18
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	a1 09       	sbc	r26, r1
     a7e:	b1 09       	sbc	r27, r1
     a80:	8f 5f       	subi	r24, 0xFF	; 255
     a82:	9f 4f       	sbci	r25, 0xFF	; 255
     a84:	af 4f       	sbci	r26, 0xFF	; 255
     a86:	bf 43       	sbci	r27, 0x3F	; 63
     a88:	28 f3       	brcs	.-54     	; 0xa54 <_fpadd_parts+0x1f4>
     a8a:	0b c0       	rjmp	.+22     	; 0xaa2 <_fpadd_parts+0x242>
     a8c:	91 83       	std	Z+1, r25	; 0x01
     a8e:	33 82       	std	Z+3, r3	; 0x03
     a90:	22 82       	std	Z+2, r2	; 0x02
     a92:	ea 0c       	add	r14, r10
     a94:	fb 1c       	adc	r15, r11
     a96:	0c 1d       	adc	r16, r12
     a98:	1d 1d       	adc	r17, r13
     a9a:	e4 82       	std	Z+4, r14	; 0x04
     a9c:	f5 82       	std	Z+5, r15	; 0x05
     a9e:	06 83       	std	Z+6, r16	; 0x06
     aa0:	17 83       	std	Z+7, r17	; 0x07
     aa2:	83 e0       	ldi	r24, 0x03	; 3
     aa4:	80 83       	st	Z, r24
     aa6:	24 81       	ldd	r18, Z+4	; 0x04
     aa8:	35 81       	ldd	r19, Z+5	; 0x05
     aaa:	46 81       	ldd	r20, Z+6	; 0x06
     aac:	57 81       	ldd	r21, Z+7	; 0x07
     aae:	57 ff       	sbrs	r21, 7
     ab0:	1a c0       	rjmp	.+52     	; 0xae6 <_fpadd_parts+0x286>
     ab2:	c9 01       	movw	r24, r18
     ab4:	aa 27       	eor	r26, r26
     ab6:	97 fd       	sbrc	r25, 7
     ab8:	a0 95       	com	r26
     aba:	ba 2f       	mov	r27, r26
     abc:	81 70       	andi	r24, 0x01	; 1
     abe:	90 70       	andi	r25, 0x00	; 0
     ac0:	a0 70       	andi	r26, 0x00	; 0
     ac2:	b0 70       	andi	r27, 0x00	; 0
     ac4:	56 95       	lsr	r21
     ac6:	47 95       	ror	r20
     ac8:	37 95       	ror	r19
     aca:	27 95       	ror	r18
     acc:	82 2b       	or	r24, r18
     ace:	93 2b       	or	r25, r19
     ad0:	a4 2b       	or	r26, r20
     ad2:	b5 2b       	or	r27, r21
     ad4:	84 83       	std	Z+4, r24	; 0x04
     ad6:	95 83       	std	Z+5, r25	; 0x05
     ad8:	a6 83       	std	Z+6, r26	; 0x06
     ada:	b7 83       	std	Z+7, r27	; 0x07
     adc:	82 81       	ldd	r24, Z+2	; 0x02
     ade:	93 81       	ldd	r25, Z+3	; 0x03
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	93 83       	std	Z+3, r25	; 0x03
     ae4:	82 83       	std	Z+2, r24	; 0x02
     ae6:	df 01       	movw	r26, r30
     ae8:	01 c0       	rjmp	.+2      	; 0xaec <_fpadd_parts+0x28c>
     aea:	d2 01       	movw	r26, r4
     aec:	cd 01       	movw	r24, r26
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	e2 e1       	ldi	r30, 0x12	; 18
     af4:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__epilogue_restores__>

00000af8 <__subsf3>:
     af8:	a0 e2       	ldi	r26, 0x20	; 32
     afa:	b0 e0       	ldi	r27, 0x00	; 0
     afc:	e2 e8       	ldi	r30, 0x82	; 130
     afe:	f5 e0       	ldi	r31, 0x05	; 5
     b00:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__prologue_saves__+0x18>
     b04:	69 83       	std	Y+1, r22	; 0x01
     b06:	7a 83       	std	Y+2, r23	; 0x02
     b08:	8b 83       	std	Y+3, r24	; 0x03
     b0a:	9c 83       	std	Y+4, r25	; 0x04
     b0c:	2d 83       	std	Y+5, r18	; 0x05
     b0e:	3e 83       	std	Y+6, r19	; 0x06
     b10:	4f 83       	std	Y+7, r20	; 0x07
     b12:	58 87       	std	Y+8, r21	; 0x08
     b14:	e9 e0       	ldi	r30, 0x09	; 9
     b16:	ee 2e       	mov	r14, r30
     b18:	f1 2c       	mov	r15, r1
     b1a:	ec 0e       	add	r14, r28
     b1c:	fd 1e       	adc	r15, r29
     b1e:	ce 01       	movw	r24, r28
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	b7 01       	movw	r22, r14
     b24:	0e 94 a7 08 	call	0x114e	; 0x114e <__unpack_f>
     b28:	8e 01       	movw	r16, r28
     b2a:	0f 5e       	subi	r16, 0xEF	; 239
     b2c:	1f 4f       	sbci	r17, 0xFF	; 255
     b2e:	ce 01       	movw	r24, r28
     b30:	05 96       	adiw	r24, 0x05	; 5
     b32:	b8 01       	movw	r22, r16
     b34:	0e 94 a7 08 	call	0x114e	; 0x114e <__unpack_f>
     b38:	8a 89       	ldd	r24, Y+18	; 0x12
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	89 27       	eor	r24, r25
     b3e:	8a 8b       	std	Y+18, r24	; 0x12
     b40:	c7 01       	movw	r24, r14
     b42:	b8 01       	movw	r22, r16
     b44:	ae 01       	movw	r20, r28
     b46:	47 5e       	subi	r20, 0xE7	; 231
     b48:	5f 4f       	sbci	r21, 0xFF	; 255
     b4a:	0e 94 30 04 	call	0x860	; 0x860 <_fpadd_parts>
     b4e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__pack_f>
     b52:	a0 96       	adiw	r28, 0x20	; 32
     b54:	e6 e0       	ldi	r30, 0x06	; 6
     b56:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__epilogue_restores__+0x18>

00000b5a <__addsf3>:
     b5a:	a0 e2       	ldi	r26, 0x20	; 32
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e3 eb       	ldi	r30, 0xB3	; 179
     b60:	f5 e0       	ldi	r31, 0x05	; 5
     b62:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__prologue_saves__+0x18>
     b66:	69 83       	std	Y+1, r22	; 0x01
     b68:	7a 83       	std	Y+2, r23	; 0x02
     b6a:	8b 83       	std	Y+3, r24	; 0x03
     b6c:	9c 83       	std	Y+4, r25	; 0x04
     b6e:	2d 83       	std	Y+5, r18	; 0x05
     b70:	3e 83       	std	Y+6, r19	; 0x06
     b72:	4f 83       	std	Y+7, r20	; 0x07
     b74:	58 87       	std	Y+8, r21	; 0x08
     b76:	f9 e0       	ldi	r31, 0x09	; 9
     b78:	ef 2e       	mov	r14, r31
     b7a:	f1 2c       	mov	r15, r1
     b7c:	ec 0e       	add	r14, r28
     b7e:	fd 1e       	adc	r15, r29
     b80:	ce 01       	movw	r24, r28
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	b7 01       	movw	r22, r14
     b86:	0e 94 a7 08 	call	0x114e	; 0x114e <__unpack_f>
     b8a:	8e 01       	movw	r16, r28
     b8c:	0f 5e       	subi	r16, 0xEF	; 239
     b8e:	1f 4f       	sbci	r17, 0xFF	; 255
     b90:	ce 01       	movw	r24, r28
     b92:	05 96       	adiw	r24, 0x05	; 5
     b94:	b8 01       	movw	r22, r16
     b96:	0e 94 a7 08 	call	0x114e	; 0x114e <__unpack_f>
     b9a:	c7 01       	movw	r24, r14
     b9c:	b8 01       	movw	r22, r16
     b9e:	ae 01       	movw	r20, r28
     ba0:	47 5e       	subi	r20, 0xE7	; 231
     ba2:	5f 4f       	sbci	r21, 0xFF	; 255
     ba4:	0e 94 30 04 	call	0x860	; 0x860 <_fpadd_parts>
     ba8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__pack_f>
     bac:	a0 96       	adiw	r28, 0x20	; 32
     bae:	e6 e0       	ldi	r30, 0x06	; 6
     bb0:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__epilogue_restores__+0x18>

00000bb4 <__divsf3>:
     bb4:	a8 e1       	ldi	r26, 0x18	; 24
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e0 ee       	ldi	r30, 0xE0	; 224
     bba:	f5 e0       	ldi	r31, 0x05	; 5
     bbc:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__prologue_saves__+0x10>
     bc0:	69 83       	std	Y+1, r22	; 0x01
     bc2:	7a 83       	std	Y+2, r23	; 0x02
     bc4:	8b 83       	std	Y+3, r24	; 0x03
     bc6:	9c 83       	std	Y+4, r25	; 0x04
     bc8:	2d 83       	std	Y+5, r18	; 0x05
     bca:	3e 83       	std	Y+6, r19	; 0x06
     bcc:	4f 83       	std	Y+7, r20	; 0x07
     bce:	58 87       	std	Y+8, r21	; 0x08
     bd0:	b9 e0       	ldi	r27, 0x09	; 9
     bd2:	eb 2e       	mov	r14, r27
     bd4:	f1 2c       	mov	r15, r1
     bd6:	ec 0e       	add	r14, r28
     bd8:	fd 1e       	adc	r15, r29
     bda:	ce 01       	movw	r24, r28
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	b7 01       	movw	r22, r14
     be0:	0e 94 a7 08 	call	0x114e	; 0x114e <__unpack_f>
     be4:	8e 01       	movw	r16, r28
     be6:	0f 5e       	subi	r16, 0xEF	; 239
     be8:	1f 4f       	sbci	r17, 0xFF	; 255
     bea:	ce 01       	movw	r24, r28
     bec:	05 96       	adiw	r24, 0x05	; 5
     bee:	b8 01       	movw	r22, r16
     bf0:	0e 94 a7 08 	call	0x114e	; 0x114e <__unpack_f>
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	22 30       	cpi	r18, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__divsf3+0x48>
     bfa:	7e c0       	rjmp	.+252    	; 0xcf8 <__divsf3+0x144>
     bfc:	39 89       	ldd	r19, Y+17	; 0x11
     bfe:	32 30       	cpi	r19, 0x02	; 2
     c00:	10 f4       	brcc	.+4      	; 0xc06 <__divsf3+0x52>
     c02:	b8 01       	movw	r22, r16
     c04:	7c c0       	rjmp	.+248    	; 0xcfe <__divsf3+0x14a>
     c06:	8a 85       	ldd	r24, Y+10	; 0x0a
     c08:	9a 89       	ldd	r25, Y+18	; 0x12
     c0a:	89 27       	eor	r24, r25
     c0c:	8a 87       	std	Y+10, r24	; 0x0a
     c0e:	24 30       	cpi	r18, 0x04	; 4
     c10:	11 f0       	breq	.+4      	; 0xc16 <__divsf3+0x62>
     c12:	22 30       	cpi	r18, 0x02	; 2
     c14:	31 f4       	brne	.+12     	; 0xc22 <__divsf3+0x6e>
     c16:	23 17       	cp	r18, r19
     c18:	09 f0       	breq	.+2      	; 0xc1c <__divsf3+0x68>
     c1a:	6e c0       	rjmp	.+220    	; 0xcf8 <__divsf3+0x144>
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	72 e0       	ldi	r23, 0x02	; 2
     c20:	6e c0       	rjmp	.+220    	; 0xcfe <__divsf3+0x14a>
     c22:	34 30       	cpi	r19, 0x04	; 4
     c24:	39 f4       	brne	.+14     	; 0xc34 <__divsf3+0x80>
     c26:	1d 86       	std	Y+13, r1	; 0x0d
     c28:	1e 86       	std	Y+14, r1	; 0x0e
     c2a:	1f 86       	std	Y+15, r1	; 0x0f
     c2c:	18 8a       	std	Y+16, r1	; 0x10
     c2e:	1c 86       	std	Y+12, r1	; 0x0c
     c30:	1b 86       	std	Y+11, r1	; 0x0b
     c32:	04 c0       	rjmp	.+8      	; 0xc3c <__divsf3+0x88>
     c34:	32 30       	cpi	r19, 0x02	; 2
     c36:	21 f4       	brne	.+8      	; 0xc40 <__divsf3+0x8c>
     c38:	84 e0       	ldi	r24, 0x04	; 4
     c3a:	89 87       	std	Y+9, r24	; 0x09
     c3c:	b7 01       	movw	r22, r14
     c3e:	5f c0       	rjmp	.+190    	; 0xcfe <__divsf3+0x14a>
     c40:	2b 85       	ldd	r18, Y+11	; 0x0b
     c42:	3c 85       	ldd	r19, Y+12	; 0x0c
     c44:	8b 89       	ldd	r24, Y+19	; 0x13
     c46:	9c 89       	ldd	r25, Y+20	; 0x14
     c48:	28 1b       	sub	r18, r24
     c4a:	39 0b       	sbc	r19, r25
     c4c:	3c 87       	std	Y+12, r19	; 0x0c
     c4e:	2b 87       	std	Y+11, r18	; 0x0b
     c50:	ed 84       	ldd	r14, Y+13	; 0x0d
     c52:	fe 84       	ldd	r15, Y+14	; 0x0e
     c54:	0f 85       	ldd	r16, Y+15	; 0x0f
     c56:	18 89       	ldd	r17, Y+16	; 0x10
     c58:	ad 88       	ldd	r10, Y+21	; 0x15
     c5a:	be 88       	ldd	r11, Y+22	; 0x16
     c5c:	cf 88       	ldd	r12, Y+23	; 0x17
     c5e:	d8 8c       	ldd	r13, Y+24	; 0x18
     c60:	ea 14       	cp	r14, r10
     c62:	fb 04       	cpc	r15, r11
     c64:	0c 05       	cpc	r16, r12
     c66:	1d 05       	cpc	r17, r13
     c68:	40 f4       	brcc	.+16     	; 0xc7a <__divsf3+0xc6>
     c6a:	ee 0c       	add	r14, r14
     c6c:	ff 1c       	adc	r15, r15
     c6e:	00 1f       	adc	r16, r16
     c70:	11 1f       	adc	r17, r17
     c72:	21 50       	subi	r18, 0x01	; 1
     c74:	30 40       	sbci	r19, 0x00	; 0
     c76:	3c 87       	std	Y+12, r19	; 0x0c
     c78:	2b 87       	std	Y+11, r18	; 0x0b
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	a0 e0       	ldi	r26, 0x00	; 0
     c88:	b0 e4       	ldi	r27, 0x40	; 64
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	ea 14       	cp	r14, r10
     c90:	fb 04       	cpc	r15, r11
     c92:	0c 05       	cpc	r16, r12
     c94:	1d 05       	cpc	r17, r13
     c96:	40 f0       	brcs	.+16     	; 0xca8 <__divsf3+0xf4>
     c98:	28 2b       	or	r18, r24
     c9a:	39 2b       	or	r19, r25
     c9c:	4a 2b       	or	r20, r26
     c9e:	5b 2b       	or	r21, r27
     ca0:	ea 18       	sub	r14, r10
     ca2:	fb 08       	sbc	r15, r11
     ca4:	0c 09       	sbc	r16, r12
     ca6:	1d 09       	sbc	r17, r13
     ca8:	b6 95       	lsr	r27
     caa:	a7 95       	ror	r26
     cac:	97 95       	ror	r25
     cae:	87 95       	ror	r24
     cb0:	ee 0c       	add	r14, r14
     cb2:	ff 1c       	adc	r15, r15
     cb4:	00 1f       	adc	r16, r16
     cb6:	11 1f       	adc	r17, r17
     cb8:	6f 5f       	subi	r22, 0xFF	; 255
     cba:	7f 4f       	sbci	r23, 0xFF	; 255
     cbc:	6f 31       	cpi	r22, 0x1F	; 31
     cbe:	71 05       	cpc	r23, r1
     cc0:	31 f7       	brne	.-52     	; 0xc8e <__divsf3+0xda>
     cc2:	da 01       	movw	r26, r20
     cc4:	c9 01       	movw	r24, r18
     cc6:	8f 77       	andi	r24, 0x7F	; 127
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	a0 70       	andi	r26, 0x00	; 0
     ccc:	b0 70       	andi	r27, 0x00	; 0
     cce:	80 34       	cpi	r24, 0x40	; 64
     cd0:	91 05       	cpc	r25, r1
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	61 f4       	brne	.+24     	; 0xcf0 <__divsf3+0x13c>
     cd8:	27 fd       	sbrc	r18, 7
     cda:	0a c0       	rjmp	.+20     	; 0xcf0 <__divsf3+0x13c>
     cdc:	e1 14       	cp	r14, r1
     cde:	f1 04       	cpc	r15, r1
     ce0:	01 05       	cpc	r16, r1
     ce2:	11 05       	cpc	r17, r1
     ce4:	29 f0       	breq	.+10     	; 0xcf0 <__divsf3+0x13c>
     ce6:	20 5c       	subi	r18, 0xC0	; 192
     ce8:	3f 4f       	sbci	r19, 0xFF	; 255
     cea:	4f 4f       	sbci	r20, 0xFF	; 255
     cec:	5f 4f       	sbci	r21, 0xFF	; 255
     cee:	20 78       	andi	r18, 0x80	; 128
     cf0:	2d 87       	std	Y+13, r18	; 0x0d
     cf2:	3e 87       	std	Y+14, r19	; 0x0e
     cf4:	4f 87       	std	Y+15, r20	; 0x0f
     cf6:	58 8b       	std	Y+16, r21	; 0x10
     cf8:	be 01       	movw	r22, r28
     cfa:	67 5f       	subi	r22, 0xF7	; 247
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	cb 01       	movw	r24, r22
     d00:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__pack_f>
     d04:	68 96       	adiw	r28, 0x18	; 24
     d06:	ea e0       	ldi	r30, 0x0A	; 10
     d08:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__epilogue_restores__+0x10>

00000d0c <__gesf2>:
     d0c:	a8 e1       	ldi	r26, 0x18	; 24
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ec e8       	ldi	r30, 0x8C	; 140
     d12:	f6 e0       	ldi	r31, 0x06	; 6
     d14:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__prologue_saves__+0x18>
     d18:	69 83       	std	Y+1, r22	; 0x01
     d1a:	7a 83       	std	Y+2, r23	; 0x02
     d1c:	8b 83       	std	Y+3, r24	; 0x03
     d1e:	9c 83       	std	Y+4, r25	; 0x04
     d20:	2d 83       	std	Y+5, r18	; 0x05
     d22:	3e 83       	std	Y+6, r19	; 0x06
     d24:	4f 83       	std	Y+7, r20	; 0x07
     d26:	58 87       	std	Y+8, r21	; 0x08
     d28:	89 e0       	ldi	r24, 0x09	; 9
     d2a:	e8 2e       	mov	r14, r24
     d2c:	f1 2c       	mov	r15, r1
     d2e:	ec 0e       	add	r14, r28
     d30:	fd 1e       	adc	r15, r29
     d32:	ce 01       	movw	r24, r28
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	b7 01       	movw	r22, r14
     d38:	0e 94 a7 08 	call	0x114e	; 0x114e <__unpack_f>
     d3c:	8e 01       	movw	r16, r28
     d3e:	0f 5e       	subi	r16, 0xEF	; 239
     d40:	1f 4f       	sbci	r17, 0xFF	; 255
     d42:	ce 01       	movw	r24, r28
     d44:	05 96       	adiw	r24, 0x05	; 5
     d46:	b8 01       	movw	r22, r16
     d48:	0e 94 a7 08 	call	0x114e	; 0x114e <__unpack_f>
     d4c:	89 85       	ldd	r24, Y+9	; 0x09
     d4e:	82 30       	cpi	r24, 0x02	; 2
     d50:	40 f0       	brcs	.+16     	; 0xd62 <__gesf2+0x56>
     d52:	89 89       	ldd	r24, Y+17	; 0x11
     d54:	82 30       	cpi	r24, 0x02	; 2
     d56:	28 f0       	brcs	.+10     	; 0xd62 <__gesf2+0x56>
     d58:	c7 01       	movw	r24, r14
     d5a:	b8 01       	movw	r22, r16
     d5c:	0e 94 1f 09 	call	0x123e	; 0x123e <__fpcmp_parts_f>
     d60:	01 c0       	rjmp	.+2      	; 0xd64 <__gesf2+0x58>
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	68 96       	adiw	r28, 0x18	; 24
     d66:	e6 e0       	ldi	r30, 0x06	; 6
     d68:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__epilogue_restores__+0x18>

00000d6c <__fixsfsi>:
     d6c:	ac e0       	ldi	r26, 0x0C	; 12
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ec eb       	ldi	r30, 0xBC	; 188
     d72:	f6 e0       	ldi	r31, 0x06	; 6
     d74:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__prologue_saves__+0x20>
     d78:	69 83       	std	Y+1, r22	; 0x01
     d7a:	7a 83       	std	Y+2, r23	; 0x02
     d7c:	8b 83       	std	Y+3, r24	; 0x03
     d7e:	9c 83       	std	Y+4, r25	; 0x04
     d80:	ce 01       	movw	r24, r28
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	be 01       	movw	r22, r28
     d86:	6b 5f       	subi	r22, 0xFB	; 251
     d88:	7f 4f       	sbci	r23, 0xFF	; 255
     d8a:	0e 94 a7 08 	call	0x114e	; 0x114e <__unpack_f>
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	82 30       	cpi	r24, 0x02	; 2
     d92:	61 f1       	breq	.+88     	; 0xdec <__fixsfsi+0x80>
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	50 f1       	brcs	.+84     	; 0xdec <__fixsfsi+0x80>
     d98:	84 30       	cpi	r24, 0x04	; 4
     d9a:	21 f4       	brne	.+8      	; 0xda4 <__fixsfsi+0x38>
     d9c:	8e 81       	ldd	r24, Y+6	; 0x06
     d9e:	88 23       	and	r24, r24
     da0:	51 f1       	breq	.+84     	; 0xdf6 <__fixsfsi+0x8a>
     da2:	2e c0       	rjmp	.+92     	; 0xe00 <__fixsfsi+0x94>
     da4:	2f 81       	ldd	r18, Y+7	; 0x07
     da6:	38 85       	ldd	r19, Y+8	; 0x08
     da8:	37 fd       	sbrc	r19, 7
     daa:	20 c0       	rjmp	.+64     	; 0xdec <__fixsfsi+0x80>
     dac:	6e 81       	ldd	r22, Y+6	; 0x06
     dae:	2f 31       	cpi	r18, 0x1F	; 31
     db0:	31 05       	cpc	r19, r1
     db2:	1c f0       	brlt	.+6      	; 0xdba <__fixsfsi+0x4e>
     db4:	66 23       	and	r22, r22
     db6:	f9 f0       	breq	.+62     	; 0xdf6 <__fixsfsi+0x8a>
     db8:	23 c0       	rjmp	.+70     	; 0xe00 <__fixsfsi+0x94>
     dba:	8e e1       	ldi	r24, 0x1E	; 30
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	82 1b       	sub	r24, r18
     dc0:	93 0b       	sbc	r25, r19
     dc2:	29 85       	ldd	r18, Y+9	; 0x09
     dc4:	3a 85       	ldd	r19, Y+10	; 0x0a
     dc6:	4b 85       	ldd	r20, Y+11	; 0x0b
     dc8:	5c 85       	ldd	r21, Y+12	; 0x0c
     dca:	04 c0       	rjmp	.+8      	; 0xdd4 <__fixsfsi+0x68>
     dcc:	56 95       	lsr	r21
     dce:	47 95       	ror	r20
     dd0:	37 95       	ror	r19
     dd2:	27 95       	ror	r18
     dd4:	8a 95       	dec	r24
     dd6:	d2 f7       	brpl	.-12     	; 0xdcc <__fixsfsi+0x60>
     dd8:	66 23       	and	r22, r22
     dda:	b1 f0       	breq	.+44     	; 0xe08 <__fixsfsi+0x9c>
     ddc:	50 95       	com	r21
     dde:	40 95       	com	r20
     de0:	30 95       	com	r19
     de2:	21 95       	neg	r18
     de4:	3f 4f       	sbci	r19, 0xFF	; 255
     de6:	4f 4f       	sbci	r20, 0xFF	; 255
     de8:	5f 4f       	sbci	r21, 0xFF	; 255
     dea:	0e c0       	rjmp	.+28     	; 0xe08 <__fixsfsi+0x9c>
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	50 e0       	ldi	r21, 0x00	; 0
     df4:	09 c0       	rjmp	.+18     	; 0xe08 <__fixsfsi+0x9c>
     df6:	2f ef       	ldi	r18, 0xFF	; 255
     df8:	3f ef       	ldi	r19, 0xFF	; 255
     dfa:	4f ef       	ldi	r20, 0xFF	; 255
     dfc:	5f e7       	ldi	r21, 0x7F	; 127
     dfe:	04 c0       	rjmp	.+8      	; 0xe08 <__fixsfsi+0x9c>
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e8       	ldi	r21, 0x80	; 128
     e08:	b9 01       	movw	r22, r18
     e0a:	ca 01       	movw	r24, r20
     e0c:	2c 96       	adiw	r28, 0x0c	; 12
     e0e:	e2 e0       	ldi	r30, 0x02	; 2
     e10:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__epilogue_restores__+0x20>

00000e14 <__floatunsisf>:
     e14:	a8 e0       	ldi	r26, 0x08	; 8
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e0 e1       	ldi	r30, 0x10	; 16
     e1a:	f7 e0       	ldi	r31, 0x07	; 7
     e1c:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__prologue_saves__+0x10>
     e20:	7b 01       	movw	r14, r22
     e22:	8c 01       	movw	r16, r24
     e24:	61 15       	cp	r22, r1
     e26:	71 05       	cpc	r23, r1
     e28:	81 05       	cpc	r24, r1
     e2a:	91 05       	cpc	r25, r1
     e2c:	19 f4       	brne	.+6      	; 0xe34 <__floatunsisf+0x20>
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	60 c0       	rjmp	.+192    	; 0xef4 <__floatunsisf+0xe0>
     e34:	83 e0       	ldi	r24, 0x03	; 3
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	8e e1       	ldi	r24, 0x1E	; 30
     e3a:	c8 2e       	mov	r12, r24
     e3c:	d1 2c       	mov	r13, r1
     e3e:	dc 82       	std	Y+4, r13	; 0x04
     e40:	cb 82       	std	Y+3, r12	; 0x03
     e42:	ed 82       	std	Y+5, r14	; 0x05
     e44:	fe 82       	std	Y+6, r15	; 0x06
     e46:	0f 83       	std	Y+7, r16	; 0x07
     e48:	18 87       	std	Y+8, r17	; 0x08
     e4a:	c8 01       	movw	r24, r16
     e4c:	b7 01       	movw	r22, r14
     e4e:	0e 94 83 07 	call	0xf06	; 0xf06 <__clzsi2>
     e52:	fc 01       	movw	r30, r24
     e54:	31 97       	sbiw	r30, 0x01	; 1
     e56:	f7 ff       	sbrs	r31, 7
     e58:	3b c0       	rjmp	.+118    	; 0xed0 <__floatunsisf+0xbc>
     e5a:	22 27       	eor	r18, r18
     e5c:	33 27       	eor	r19, r19
     e5e:	2e 1b       	sub	r18, r30
     e60:	3f 0b       	sbc	r19, r31
     e62:	57 01       	movw	r10, r14
     e64:	68 01       	movw	r12, r16
     e66:	02 2e       	mov	r0, r18
     e68:	04 c0       	rjmp	.+8      	; 0xe72 <__floatunsisf+0x5e>
     e6a:	d6 94       	lsr	r13
     e6c:	c7 94       	ror	r12
     e6e:	b7 94       	ror	r11
     e70:	a7 94       	ror	r10
     e72:	0a 94       	dec	r0
     e74:	d2 f7       	brpl	.-12     	; 0xe6a <__floatunsisf+0x56>
     e76:	40 e0       	ldi	r20, 0x00	; 0
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	a0 e0       	ldi	r26, 0x00	; 0
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <__floatunsisf+0x7c>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	aa 1f       	adc	r26, r26
     e8e:	bb 1f       	adc	r27, r27
     e90:	2a 95       	dec	r18
     e92:	d2 f7       	brpl	.-12     	; 0xe88 <__floatunsisf+0x74>
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	a1 09       	sbc	r26, r1
     e98:	b1 09       	sbc	r27, r1
     e9a:	8e 21       	and	r24, r14
     e9c:	9f 21       	and	r25, r15
     e9e:	a0 23       	and	r26, r16
     ea0:	b1 23       	and	r27, r17
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	a1 05       	cpc	r26, r1
     ea6:	b1 05       	cpc	r27, r1
     ea8:	21 f0       	breq	.+8      	; 0xeb2 <__floatunsisf+0x9e>
     eaa:	41 e0       	ldi	r20, 0x01	; 1
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	4a 29       	or	r20, r10
     eb4:	5b 29       	or	r21, r11
     eb6:	6c 29       	or	r22, r12
     eb8:	7d 29       	or	r23, r13
     eba:	4d 83       	std	Y+5, r20	; 0x05
     ebc:	5e 83       	std	Y+6, r21	; 0x06
     ebe:	6f 83       	std	Y+7, r22	; 0x07
     ec0:	78 87       	std	Y+8, r23	; 0x08
     ec2:	8e e1       	ldi	r24, 0x1E	; 30
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	8e 1b       	sub	r24, r30
     ec8:	9f 0b       	sbc	r25, r31
     eca:	9c 83       	std	Y+4, r25	; 0x04
     ecc:	8b 83       	std	Y+3, r24	; 0x03
     ece:	12 c0       	rjmp	.+36     	; 0xef4 <__floatunsisf+0xe0>
     ed0:	30 97       	sbiw	r30, 0x00	; 0
     ed2:	81 f0       	breq	.+32     	; 0xef4 <__floatunsisf+0xe0>
     ed4:	0e 2e       	mov	r0, r30
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <__floatunsisf+0xcc>
     ed8:	ee 0c       	add	r14, r14
     eda:	ff 1c       	adc	r15, r15
     edc:	00 1f       	adc	r16, r16
     ede:	11 1f       	adc	r17, r17
     ee0:	0a 94       	dec	r0
     ee2:	d2 f7       	brpl	.-12     	; 0xed8 <__floatunsisf+0xc4>
     ee4:	ed 82       	std	Y+5, r14	; 0x05
     ee6:	fe 82       	std	Y+6, r15	; 0x06
     ee8:	0f 83       	std	Y+7, r16	; 0x07
     eea:	18 87       	std	Y+8, r17	; 0x08
     eec:	ce 1a       	sub	r12, r30
     eee:	df 0a       	sbc	r13, r31
     ef0:	dc 82       	std	Y+4, r13	; 0x04
     ef2:	cb 82       	std	Y+3, r12	; 0x03
     ef4:	1a 82       	std	Y+2, r1	; 0x02
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__pack_f>
     efe:	28 96       	adiw	r28, 0x08	; 8
     f00:	ea e0       	ldi	r30, 0x0A	; 10
     f02:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__epilogue_restores__+0x10>

00000f06 <__clzsi2>:
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	7b 01       	movw	r14, r22
     f10:	8c 01       	movw	r16, r24
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	e8 16       	cp	r14, r24
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	f8 06       	cpc	r15, r24
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	08 07       	cpc	r16, r24
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	18 07       	cpc	r17, r24
     f22:	88 f4       	brcc	.+34     	; 0xf46 <__clzsi2+0x40>
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	e8 16       	cp	r14, r24
     f28:	f1 04       	cpc	r15, r1
     f2a:	01 05       	cpc	r16, r1
     f2c:	11 05       	cpc	r17, r1
     f2e:	31 f0       	breq	.+12     	; 0xf3c <__clzsi2+0x36>
     f30:	28 f0       	brcs	.+10     	; 0xf3c <__clzsi2+0x36>
     f32:	88 e0       	ldi	r24, 0x08	; 8
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	a0 e0       	ldi	r26, 0x00	; 0
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	17 c0       	rjmp	.+46     	; 0xf6a <__clzsi2+0x64>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	a0 e0       	ldi	r26, 0x00	; 0
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	12 c0       	rjmp	.+36     	; 0xf6a <__clzsi2+0x64>
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	e8 16       	cp	r14, r24
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	f8 06       	cpc	r15, r24
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	08 07       	cpc	r16, r24
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	18 07       	cpc	r17, r24
     f56:	28 f0       	brcs	.+10     	; 0xf62 <__clzsi2+0x5c>
     f58:	88 e1       	ldi	r24, 0x18	; 24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	a0 e0       	ldi	r26, 0x00	; 0
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	04 c0       	rjmp	.+8      	; 0xf6a <__clzsi2+0x64>
     f62:	80 e1       	ldi	r24, 0x10	; 16
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a0 e0       	ldi	r26, 0x00	; 0
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	20 e2       	ldi	r18, 0x20	; 32
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	28 1b       	sub	r18, r24
     f74:	39 0b       	sbc	r19, r25
     f76:	4a 0b       	sbc	r20, r26
     f78:	5b 0b       	sbc	r21, r27
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <__clzsi2+0x7e>
     f7c:	16 95       	lsr	r17
     f7e:	07 95       	ror	r16
     f80:	f7 94       	ror	r15
     f82:	e7 94       	ror	r14
     f84:	8a 95       	dec	r24
     f86:	d2 f7       	brpl	.-12     	; 0xf7c <__clzsi2+0x76>
     f88:	f7 01       	movw	r30, r14
     f8a:	e8 5f       	subi	r30, 0xF8	; 248
     f8c:	fd 4f       	sbci	r31, 0xFD	; 253
     f8e:	80 81       	ld	r24, Z
     f90:	28 1b       	sub	r18, r24
     f92:	31 09       	sbc	r19, r1
     f94:	41 09       	sbc	r20, r1
     f96:	51 09       	sbc	r21, r1
     f98:	c9 01       	movw	r24, r18
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	08 95       	ret

00000fa4 <__pack_f>:
     fa4:	df 92       	push	r13
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	fc 01       	movw	r30, r24
     fb0:	e4 80       	ldd	r14, Z+4	; 0x04
     fb2:	f5 80       	ldd	r15, Z+5	; 0x05
     fb4:	06 81       	ldd	r16, Z+6	; 0x06
     fb6:	17 81       	ldd	r17, Z+7	; 0x07
     fb8:	d1 80       	ldd	r13, Z+1	; 0x01
     fba:	80 81       	ld	r24, Z
     fbc:	82 30       	cpi	r24, 0x02	; 2
     fbe:	48 f4       	brcc	.+18     	; 0xfd2 <__pack_f+0x2e>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a0 e1       	ldi	r26, 0x10	; 16
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e8 2a       	or	r14, r24
     fca:	f9 2a       	or	r15, r25
     fcc:	0a 2b       	or	r16, r26
     fce:	1b 2b       	or	r17, r27
     fd0:	a5 c0       	rjmp	.+330    	; 0x111c <__pack_f+0x178>
     fd2:	84 30       	cpi	r24, 0x04	; 4
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <__pack_f+0x34>
     fd6:	9f c0       	rjmp	.+318    	; 0x1116 <__pack_f+0x172>
     fd8:	82 30       	cpi	r24, 0x02	; 2
     fda:	21 f4       	brne	.+8      	; 0xfe4 <__pack_f+0x40>
     fdc:	ee 24       	eor	r14, r14
     fde:	ff 24       	eor	r15, r15
     fe0:	87 01       	movw	r16, r14
     fe2:	05 c0       	rjmp	.+10     	; 0xfee <__pack_f+0x4a>
     fe4:	e1 14       	cp	r14, r1
     fe6:	f1 04       	cpc	r15, r1
     fe8:	01 05       	cpc	r16, r1
     fea:	11 05       	cpc	r17, r1
     fec:	19 f4       	brne	.+6      	; 0xff4 <__pack_f+0x50>
     fee:	e0 e0       	ldi	r30, 0x00	; 0
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	96 c0       	rjmp	.+300    	; 0x1120 <__pack_f+0x17c>
     ff4:	62 81       	ldd	r22, Z+2	; 0x02
     ff6:	73 81       	ldd	r23, Z+3	; 0x03
     ff8:	9f ef       	ldi	r25, 0xFF	; 255
     ffa:	62 38       	cpi	r22, 0x82	; 130
     ffc:	79 07       	cpc	r23, r25
     ffe:	0c f0       	brlt	.+2      	; 0x1002 <__pack_f+0x5e>
    1000:	5b c0       	rjmp	.+182    	; 0x10b8 <__pack_f+0x114>
    1002:	22 e8       	ldi	r18, 0x82	; 130
    1004:	3f ef       	ldi	r19, 0xFF	; 255
    1006:	26 1b       	sub	r18, r22
    1008:	37 0b       	sbc	r19, r23
    100a:	2a 31       	cpi	r18, 0x1A	; 26
    100c:	31 05       	cpc	r19, r1
    100e:	2c f0       	brlt	.+10     	; 0x101a <__pack_f+0x76>
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	2a c0       	rjmp	.+84     	; 0x106e <__pack_f+0xca>
    101a:	b8 01       	movw	r22, r16
    101c:	a7 01       	movw	r20, r14
    101e:	02 2e       	mov	r0, r18
    1020:	04 c0       	rjmp	.+8      	; 0x102a <__pack_f+0x86>
    1022:	76 95       	lsr	r23
    1024:	67 95       	ror	r22
    1026:	57 95       	ror	r21
    1028:	47 95       	ror	r20
    102a:	0a 94       	dec	r0
    102c:	d2 f7       	brpl	.-12     	; 0x1022 <__pack_f+0x7e>
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a0 e0       	ldi	r26, 0x00	; 0
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	04 c0       	rjmp	.+8      	; 0x1040 <__pack_f+0x9c>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	aa 1f       	adc	r26, r26
    103e:	bb 1f       	adc	r27, r27
    1040:	2a 95       	dec	r18
    1042:	d2 f7       	brpl	.-12     	; 0x1038 <__pack_f+0x94>
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	a1 09       	sbc	r26, r1
    1048:	b1 09       	sbc	r27, r1
    104a:	8e 21       	and	r24, r14
    104c:	9f 21       	and	r25, r15
    104e:	a0 23       	and	r26, r16
    1050:	b1 23       	and	r27, r17
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	a1 05       	cpc	r26, r1
    1056:	b1 05       	cpc	r27, r1
    1058:	21 f0       	breq	.+8      	; 0x1062 <__pack_f+0xbe>
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	a0 e0       	ldi	r26, 0x00	; 0
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	9a 01       	movw	r18, r20
    1064:	ab 01       	movw	r20, r22
    1066:	28 2b       	or	r18, r24
    1068:	39 2b       	or	r19, r25
    106a:	4a 2b       	or	r20, r26
    106c:	5b 2b       	or	r21, r27
    106e:	da 01       	movw	r26, r20
    1070:	c9 01       	movw	r24, r18
    1072:	8f 77       	andi	r24, 0x7F	; 127
    1074:	90 70       	andi	r25, 0x00	; 0
    1076:	a0 70       	andi	r26, 0x00	; 0
    1078:	b0 70       	andi	r27, 0x00	; 0
    107a:	80 34       	cpi	r24, 0x40	; 64
    107c:	91 05       	cpc	r25, r1
    107e:	a1 05       	cpc	r26, r1
    1080:	b1 05       	cpc	r27, r1
    1082:	39 f4       	brne	.+14     	; 0x1092 <__pack_f+0xee>
    1084:	27 ff       	sbrs	r18, 7
    1086:	09 c0       	rjmp	.+18     	; 0x109a <__pack_f+0xf6>
    1088:	20 5c       	subi	r18, 0xC0	; 192
    108a:	3f 4f       	sbci	r19, 0xFF	; 255
    108c:	4f 4f       	sbci	r20, 0xFF	; 255
    108e:	5f 4f       	sbci	r21, 0xFF	; 255
    1090:	04 c0       	rjmp	.+8      	; 0x109a <__pack_f+0xf6>
    1092:	21 5c       	subi	r18, 0xC1	; 193
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
    1096:	4f 4f       	sbci	r20, 0xFF	; 255
    1098:	5f 4f       	sbci	r21, 0xFF	; 255
    109a:	e0 e0       	ldi	r30, 0x00	; 0
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	20 30       	cpi	r18, 0x00	; 0
    10a0:	a0 e0       	ldi	r26, 0x00	; 0
    10a2:	3a 07       	cpc	r19, r26
    10a4:	a0 e0       	ldi	r26, 0x00	; 0
    10a6:	4a 07       	cpc	r20, r26
    10a8:	a0 e4       	ldi	r26, 0x40	; 64
    10aa:	5a 07       	cpc	r21, r26
    10ac:	10 f0       	brcs	.+4      	; 0x10b2 <__pack_f+0x10e>
    10ae:	e1 e0       	ldi	r30, 0x01	; 1
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	79 01       	movw	r14, r18
    10b4:	8a 01       	movw	r16, r20
    10b6:	27 c0       	rjmp	.+78     	; 0x1106 <__pack_f+0x162>
    10b8:	60 38       	cpi	r22, 0x80	; 128
    10ba:	71 05       	cpc	r23, r1
    10bc:	64 f5       	brge	.+88     	; 0x1116 <__pack_f+0x172>
    10be:	fb 01       	movw	r30, r22
    10c0:	e1 58       	subi	r30, 0x81	; 129
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	d8 01       	movw	r26, r16
    10c6:	c7 01       	movw	r24, r14
    10c8:	8f 77       	andi	r24, 0x7F	; 127
    10ca:	90 70       	andi	r25, 0x00	; 0
    10cc:	a0 70       	andi	r26, 0x00	; 0
    10ce:	b0 70       	andi	r27, 0x00	; 0
    10d0:	80 34       	cpi	r24, 0x40	; 64
    10d2:	91 05       	cpc	r25, r1
    10d4:	a1 05       	cpc	r26, r1
    10d6:	b1 05       	cpc	r27, r1
    10d8:	39 f4       	brne	.+14     	; 0x10e8 <__pack_f+0x144>
    10da:	e7 fe       	sbrs	r14, 7
    10dc:	0d c0       	rjmp	.+26     	; 0x10f8 <__pack_f+0x154>
    10de:	80 e4       	ldi	r24, 0x40	; 64
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	a0 e0       	ldi	r26, 0x00	; 0
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	04 c0       	rjmp	.+8      	; 0x10f0 <__pack_f+0x14c>
    10e8:	8f e3       	ldi	r24, 0x3F	; 63
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a0 e0       	ldi	r26, 0x00	; 0
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e8 0e       	add	r14, r24
    10f2:	f9 1e       	adc	r15, r25
    10f4:	0a 1f       	adc	r16, r26
    10f6:	1b 1f       	adc	r17, r27
    10f8:	17 ff       	sbrs	r17, 7
    10fa:	05 c0       	rjmp	.+10     	; 0x1106 <__pack_f+0x162>
    10fc:	16 95       	lsr	r17
    10fe:	07 95       	ror	r16
    1100:	f7 94       	ror	r15
    1102:	e7 94       	ror	r14
    1104:	31 96       	adiw	r30, 0x01	; 1
    1106:	87 e0       	ldi	r24, 0x07	; 7
    1108:	16 95       	lsr	r17
    110a:	07 95       	ror	r16
    110c:	f7 94       	ror	r15
    110e:	e7 94       	ror	r14
    1110:	8a 95       	dec	r24
    1112:	d1 f7       	brne	.-12     	; 0x1108 <__pack_f+0x164>
    1114:	05 c0       	rjmp	.+10     	; 0x1120 <__pack_f+0x17c>
    1116:	ee 24       	eor	r14, r14
    1118:	ff 24       	eor	r15, r15
    111a:	87 01       	movw	r16, r14
    111c:	ef ef       	ldi	r30, 0xFF	; 255
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	6e 2f       	mov	r22, r30
    1122:	67 95       	ror	r22
    1124:	66 27       	eor	r22, r22
    1126:	67 95       	ror	r22
    1128:	90 2f       	mov	r25, r16
    112a:	9f 77       	andi	r25, 0x7F	; 127
    112c:	d7 94       	ror	r13
    112e:	dd 24       	eor	r13, r13
    1130:	d7 94       	ror	r13
    1132:	8e 2f       	mov	r24, r30
    1134:	86 95       	lsr	r24
    1136:	49 2f       	mov	r20, r25
    1138:	46 2b       	or	r20, r22
    113a:	58 2f       	mov	r21, r24
    113c:	5d 29       	or	r21, r13
    113e:	b7 01       	movw	r22, r14
    1140:	ca 01       	movw	r24, r20
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	df 90       	pop	r13
    114c:	08 95       	ret

0000114e <__unpack_f>:
    114e:	fc 01       	movw	r30, r24
    1150:	db 01       	movw	r26, r22
    1152:	40 81       	ld	r20, Z
    1154:	51 81       	ldd	r21, Z+1	; 0x01
    1156:	22 81       	ldd	r18, Z+2	; 0x02
    1158:	62 2f       	mov	r22, r18
    115a:	6f 77       	andi	r22, 0x7F	; 127
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	22 1f       	adc	r18, r18
    1160:	22 27       	eor	r18, r18
    1162:	22 1f       	adc	r18, r18
    1164:	93 81       	ldd	r25, Z+3	; 0x03
    1166:	89 2f       	mov	r24, r25
    1168:	88 0f       	add	r24, r24
    116a:	82 2b       	or	r24, r18
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	99 1f       	adc	r25, r25
    1172:	99 27       	eor	r25, r25
    1174:	99 1f       	adc	r25, r25
    1176:	11 96       	adiw	r26, 0x01	; 1
    1178:	9c 93       	st	X, r25
    117a:	11 97       	sbiw	r26, 0x01	; 1
    117c:	21 15       	cp	r18, r1
    117e:	31 05       	cpc	r19, r1
    1180:	a9 f5       	brne	.+106    	; 0x11ec <__unpack_f+0x9e>
    1182:	41 15       	cp	r20, r1
    1184:	51 05       	cpc	r21, r1
    1186:	61 05       	cpc	r22, r1
    1188:	71 05       	cpc	r23, r1
    118a:	11 f4       	brne	.+4      	; 0x1190 <__unpack_f+0x42>
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	37 c0       	rjmp	.+110    	; 0x11fe <__unpack_f+0xb0>
    1190:	82 e8       	ldi	r24, 0x82	; 130
    1192:	9f ef       	ldi	r25, 0xFF	; 255
    1194:	13 96       	adiw	r26, 0x03	; 3
    1196:	9c 93       	st	X, r25
    1198:	8e 93       	st	-X, r24
    119a:	12 97       	sbiw	r26, 0x02	; 2
    119c:	9a 01       	movw	r18, r20
    119e:	ab 01       	movw	r20, r22
    11a0:	67 e0       	ldi	r22, 0x07	; 7
    11a2:	22 0f       	add	r18, r18
    11a4:	33 1f       	adc	r19, r19
    11a6:	44 1f       	adc	r20, r20
    11a8:	55 1f       	adc	r21, r21
    11aa:	6a 95       	dec	r22
    11ac:	d1 f7       	brne	.-12     	; 0x11a2 <__unpack_f+0x54>
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	8c 93       	st	X, r24
    11b2:	0d c0       	rjmp	.+26     	; 0x11ce <__unpack_f+0x80>
    11b4:	22 0f       	add	r18, r18
    11b6:	33 1f       	adc	r19, r19
    11b8:	44 1f       	adc	r20, r20
    11ba:	55 1f       	adc	r21, r21
    11bc:	12 96       	adiw	r26, 0x02	; 2
    11be:	8d 91       	ld	r24, X+
    11c0:	9c 91       	ld	r25, X
    11c2:	13 97       	sbiw	r26, 0x03	; 3
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	13 96       	adiw	r26, 0x03	; 3
    11c8:	9c 93       	st	X, r25
    11ca:	8e 93       	st	-X, r24
    11cc:	12 97       	sbiw	r26, 0x02	; 2
    11ce:	20 30       	cpi	r18, 0x00	; 0
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	38 07       	cpc	r19, r24
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	48 07       	cpc	r20, r24
    11d8:	80 e4       	ldi	r24, 0x40	; 64
    11da:	58 07       	cpc	r21, r24
    11dc:	58 f3       	brcs	.-42     	; 0x11b4 <__unpack_f+0x66>
    11de:	14 96       	adiw	r26, 0x04	; 4
    11e0:	2d 93       	st	X+, r18
    11e2:	3d 93       	st	X+, r19
    11e4:	4d 93       	st	X+, r20
    11e6:	5c 93       	st	X, r21
    11e8:	17 97       	sbiw	r26, 0x07	; 7
    11ea:	08 95       	ret
    11ec:	2f 3f       	cpi	r18, 0xFF	; 255
    11ee:	31 05       	cpc	r19, r1
    11f0:	79 f4       	brne	.+30     	; 0x1210 <__unpack_f+0xc2>
    11f2:	41 15       	cp	r20, r1
    11f4:	51 05       	cpc	r21, r1
    11f6:	61 05       	cpc	r22, r1
    11f8:	71 05       	cpc	r23, r1
    11fa:	19 f4       	brne	.+6      	; 0x1202 <__unpack_f+0xb4>
    11fc:	84 e0       	ldi	r24, 0x04	; 4
    11fe:	8c 93       	st	X, r24
    1200:	08 95       	ret
    1202:	64 ff       	sbrs	r22, 4
    1204:	03 c0       	rjmp	.+6      	; 0x120c <__unpack_f+0xbe>
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	8c 93       	st	X, r24
    120a:	12 c0       	rjmp	.+36     	; 0x1230 <__unpack_f+0xe2>
    120c:	1c 92       	st	X, r1
    120e:	10 c0       	rjmp	.+32     	; 0x1230 <__unpack_f+0xe2>
    1210:	2f 57       	subi	r18, 0x7F	; 127
    1212:	30 40       	sbci	r19, 0x00	; 0
    1214:	13 96       	adiw	r26, 0x03	; 3
    1216:	3c 93       	st	X, r19
    1218:	2e 93       	st	-X, r18
    121a:	12 97       	sbiw	r26, 0x02	; 2
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	8c 93       	st	X, r24
    1220:	87 e0       	ldi	r24, 0x07	; 7
    1222:	44 0f       	add	r20, r20
    1224:	55 1f       	adc	r21, r21
    1226:	66 1f       	adc	r22, r22
    1228:	77 1f       	adc	r23, r23
    122a:	8a 95       	dec	r24
    122c:	d1 f7       	brne	.-12     	; 0x1222 <__unpack_f+0xd4>
    122e:	70 64       	ori	r23, 0x40	; 64
    1230:	14 96       	adiw	r26, 0x04	; 4
    1232:	4d 93       	st	X+, r20
    1234:	5d 93       	st	X+, r21
    1236:	6d 93       	st	X+, r22
    1238:	7c 93       	st	X, r23
    123a:	17 97       	sbiw	r26, 0x07	; 7
    123c:	08 95       	ret

0000123e <__fpcmp_parts_f>:
    123e:	1f 93       	push	r17
    1240:	dc 01       	movw	r26, r24
    1242:	fb 01       	movw	r30, r22
    1244:	9c 91       	ld	r25, X
    1246:	92 30       	cpi	r25, 0x02	; 2
    1248:	08 f4       	brcc	.+2      	; 0x124c <__fpcmp_parts_f+0xe>
    124a:	47 c0       	rjmp	.+142    	; 0x12da <__fpcmp_parts_f+0x9c>
    124c:	80 81       	ld	r24, Z
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	08 f4       	brcc	.+2      	; 0x1254 <__fpcmp_parts_f+0x16>
    1252:	43 c0       	rjmp	.+134    	; 0x12da <__fpcmp_parts_f+0x9c>
    1254:	94 30       	cpi	r25, 0x04	; 4
    1256:	51 f4       	brne	.+20     	; 0x126c <__fpcmp_parts_f+0x2e>
    1258:	11 96       	adiw	r26, 0x01	; 1
    125a:	1c 91       	ld	r17, X
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	99 f5       	brne	.+102    	; 0x12c6 <__fpcmp_parts_f+0x88>
    1260:	81 81       	ldd	r24, Z+1	; 0x01
    1262:	68 2f       	mov	r22, r24
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	61 1b       	sub	r22, r17
    1268:	71 09       	sbc	r23, r1
    126a:	3f c0       	rjmp	.+126    	; 0x12ea <__fpcmp_parts_f+0xac>
    126c:	84 30       	cpi	r24, 0x04	; 4
    126e:	21 f0       	breq	.+8      	; 0x1278 <__fpcmp_parts_f+0x3a>
    1270:	92 30       	cpi	r25, 0x02	; 2
    1272:	31 f4       	brne	.+12     	; 0x1280 <__fpcmp_parts_f+0x42>
    1274:	82 30       	cpi	r24, 0x02	; 2
    1276:	b9 f1       	breq	.+110    	; 0x12e6 <__fpcmp_parts_f+0xa8>
    1278:	81 81       	ldd	r24, Z+1	; 0x01
    127a:	88 23       	and	r24, r24
    127c:	89 f1       	breq	.+98     	; 0x12e0 <__fpcmp_parts_f+0xa2>
    127e:	2d c0       	rjmp	.+90     	; 0x12da <__fpcmp_parts_f+0x9c>
    1280:	11 96       	adiw	r26, 0x01	; 1
    1282:	1c 91       	ld	r17, X
    1284:	11 97       	sbiw	r26, 0x01	; 1
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	f1 f0       	breq	.+60     	; 0x12c6 <__fpcmp_parts_f+0x88>
    128a:	81 81       	ldd	r24, Z+1	; 0x01
    128c:	18 17       	cp	r17, r24
    128e:	d9 f4       	brne	.+54     	; 0x12c6 <__fpcmp_parts_f+0x88>
    1290:	12 96       	adiw	r26, 0x02	; 2
    1292:	2d 91       	ld	r18, X+
    1294:	3c 91       	ld	r19, X
    1296:	13 97       	sbiw	r26, 0x03	; 3
    1298:	82 81       	ldd	r24, Z+2	; 0x02
    129a:	93 81       	ldd	r25, Z+3	; 0x03
    129c:	82 17       	cp	r24, r18
    129e:	93 07       	cpc	r25, r19
    12a0:	94 f0       	brlt	.+36     	; 0x12c6 <__fpcmp_parts_f+0x88>
    12a2:	28 17       	cp	r18, r24
    12a4:	39 07       	cpc	r19, r25
    12a6:	bc f0       	brlt	.+46     	; 0x12d6 <__fpcmp_parts_f+0x98>
    12a8:	14 96       	adiw	r26, 0x04	; 4
    12aa:	8d 91       	ld	r24, X+
    12ac:	9d 91       	ld	r25, X+
    12ae:	0d 90       	ld	r0, X+
    12b0:	bc 91       	ld	r27, X
    12b2:	a0 2d       	mov	r26, r0
    12b4:	24 81       	ldd	r18, Z+4	; 0x04
    12b6:	35 81       	ldd	r19, Z+5	; 0x05
    12b8:	46 81       	ldd	r20, Z+6	; 0x06
    12ba:	57 81       	ldd	r21, Z+7	; 0x07
    12bc:	28 17       	cp	r18, r24
    12be:	39 07       	cpc	r19, r25
    12c0:	4a 07       	cpc	r20, r26
    12c2:	5b 07       	cpc	r21, r27
    12c4:	18 f4       	brcc	.+6      	; 0x12cc <__fpcmp_parts_f+0x8e>
    12c6:	11 23       	and	r17, r17
    12c8:	41 f0       	breq	.+16     	; 0x12da <__fpcmp_parts_f+0x9c>
    12ca:	0a c0       	rjmp	.+20     	; 0x12e0 <__fpcmp_parts_f+0xa2>
    12cc:	82 17       	cp	r24, r18
    12ce:	93 07       	cpc	r25, r19
    12d0:	a4 07       	cpc	r26, r20
    12d2:	b5 07       	cpc	r27, r21
    12d4:	40 f4       	brcc	.+16     	; 0x12e6 <__fpcmp_parts_f+0xa8>
    12d6:	11 23       	and	r17, r17
    12d8:	19 f0       	breq	.+6      	; 0x12e0 <__fpcmp_parts_f+0xa2>
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	05 c0       	rjmp	.+10     	; 0x12ea <__fpcmp_parts_f+0xac>
    12e0:	6f ef       	ldi	r22, 0xFF	; 255
    12e2:	7f ef       	ldi	r23, 0xFF	; 255
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <__fpcmp_parts_f+0xac>
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	cb 01       	movw	r24, r22
    12ec:	1f 91       	pop	r17
    12ee:	08 95       	ret

000012f0 <__udivmodhi4>:
    12f0:	aa 1b       	sub	r26, r26
    12f2:	bb 1b       	sub	r27, r27
    12f4:	51 e1       	ldi	r21, 0x11	; 17
    12f6:	07 c0       	rjmp	.+14     	; 0x1306 <__udivmodhi4_ep>

000012f8 <__udivmodhi4_loop>:
    12f8:	aa 1f       	adc	r26, r26
    12fa:	bb 1f       	adc	r27, r27
    12fc:	a6 17       	cp	r26, r22
    12fe:	b7 07       	cpc	r27, r23
    1300:	10 f0       	brcs	.+4      	; 0x1306 <__udivmodhi4_ep>
    1302:	a6 1b       	sub	r26, r22
    1304:	b7 0b       	sbc	r27, r23

00001306 <__udivmodhi4_ep>:
    1306:	88 1f       	adc	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	5a 95       	dec	r21
    130c:	a9 f7       	brne	.-22     	; 0x12f8 <__udivmodhi4_loop>
    130e:	80 95       	com	r24
    1310:	90 95       	com	r25
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	08 95       	ret

00001318 <__prologue_saves__>:
    1318:	2f 92       	push	r2
    131a:	3f 92       	push	r3
    131c:	4f 92       	push	r4
    131e:	5f 92       	push	r5
    1320:	6f 92       	push	r6
    1322:	7f 92       	push	r7
    1324:	8f 92       	push	r8
    1326:	9f 92       	push	r9
    1328:	af 92       	push	r10
    132a:	bf 92       	push	r11
    132c:	cf 92       	push	r12
    132e:	df 92       	push	r13
    1330:	ef 92       	push	r14
    1332:	ff 92       	push	r15
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	ca 1b       	sub	r28, r26
    1342:	db 0b       	sbc	r29, r27
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	19 94       	eijmp

00001350 <__epilogue_restores__>:
    1350:	2a 88       	ldd	r2, Y+18	; 0x12
    1352:	39 88       	ldd	r3, Y+17	; 0x11
    1354:	48 88       	ldd	r4, Y+16	; 0x10
    1356:	5f 84       	ldd	r5, Y+15	; 0x0f
    1358:	6e 84       	ldd	r6, Y+14	; 0x0e
    135a:	7d 84       	ldd	r7, Y+13	; 0x0d
    135c:	8c 84       	ldd	r8, Y+12	; 0x0c
    135e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1360:	aa 84       	ldd	r10, Y+10	; 0x0a
    1362:	b9 84       	ldd	r11, Y+9	; 0x09
    1364:	c8 84       	ldd	r12, Y+8	; 0x08
    1366:	df 80       	ldd	r13, Y+7	; 0x07
    1368:	ee 80       	ldd	r14, Y+6	; 0x06
    136a:	fd 80       	ldd	r15, Y+5	; 0x05
    136c:	0c 81       	ldd	r16, Y+4	; 0x04
    136e:	1b 81       	ldd	r17, Y+3	; 0x03
    1370:	aa 81       	ldd	r26, Y+2	; 0x02
    1372:	b9 81       	ldd	r27, Y+1	; 0x01
    1374:	ce 0f       	add	r28, r30
    1376:	d1 1d       	adc	r29, r1
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	ed 01       	movw	r28, r26
    1384:	08 95       	ret

00001386 <_exit>:
    1386:	f8 94       	cli

00001388 <__stop_program>:
    1388:	ff cf       	rjmp	.-2      	; 0x1388 <__stop_program>
