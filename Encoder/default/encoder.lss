
encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000346  00800200  000024bc  00002550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006ba  00800546  00800546  00002896  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002896  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004a7  00000000  00000000  000028b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bcc  00000000  00000000  00002d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000036a  00000000  00000000  00004929  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001557  00000000  00000000  00004c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000370  00000000  00000000  000061ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000525  00000000  00000000  0000655c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f51  00000000  00000000  00006a81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000079d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__vector_5>
      18:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	15 e0       	ldi	r17, 0x05	; 5
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec eb       	ldi	r30, 0xBC	; 188
      fc:	f4 e2       	ldi	r31, 0x24	; 36
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 34       	cpi	r26, 0x46	; 70
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	1c e0       	ldi	r17, 0x0C	; 12
     110:	a6 e4       	ldi	r26, 0x46	; 70
     112:	b5 e0       	ldi	r27, 0x05	; 5
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a0 30       	cpi	r26, 0x00	; 0
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 84 0b 	call	0x1708	; 0x1708 <main>
     122:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     12a:	86 e6       	ldi	r24, 0x66	; 102
     12c:	9e e0       	ldi	r25, 0x0E	; 14
     12e:	fc 01       	movw	r30, r24
     130:	31 97       	sbiw	r30, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcd_set_4bit+0x6>
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     138:	40 e3       	ldi	r20, 0x30	; 48
     13a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     13c:	42 9a       	sbi	0x08, 2	; 8
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	38 e4       	ldi	r19, 0x48	; 72
     142:	f9 01       	movw	r30, r18
     144:	31 97       	sbiw	r30, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	fc 01       	movw	r30, r24
     14c:	31 97       	sbiw	r30, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     150:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     152:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     154:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     156:	42 9a       	sbi	0x08, 2	; 8
     158:	f9 01       	movw	r30, r18
     15a:	31 97       	sbiw	r30, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     15e:	42 98       	cbi	0x08, 2	; 8
     160:	fc 01       	movw	r30, r24
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     166:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     168:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     16a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     16c:	42 9a       	sbi	0x08, 2	; 8
     16e:	f9 01       	movw	r30, r18
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     174:	42 98       	cbi	0x08, 2	; 8
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     17a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     17c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     17e:	80 e2       	ldi	r24, 0x20	; 32
     180:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     182:	42 9a       	sbi	0x08, 2	; 8
     184:	c9 01       	movw	r24, r18
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     18a:	42 98       	cbi	0x08, 2	; 8

	
}
     18c:	08 95       	ret

0000018e <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     18e:	98 b1       	in	r25, 0x08	; 8
     190:	9f 70       	andi	r25, 0x0F	; 15
     192:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     194:	28 b1       	in	r18, 0x08	; 8
     196:	98 2f       	mov	r25, r24
     198:	90 7f       	andi	r25, 0xF0	; 240
     19a:	92 2b       	or	r25, r18
     19c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     19e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1a0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1a2:	42 9a       	sbi	0x08, 2	; 8
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	38 e4       	ldi	r19, 0x48	; 72
     1a8:	f9 01       	movw	r30, r18
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1ae:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 70       	andi	r25, 0x0F	; 15
     1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     1b6:	98 b1       	in	r25, 0x08	; 8
     1b8:	82 95       	swap	r24
     1ba:	80 7f       	andi	r24, 0xF0	; 240
     1bc:	98 2b       	or	r25, r24
     1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1c4:	42 9a       	sbi	0x08, 2	; 8
     1c6:	c9 01       	movw	r24, r18
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1cc:	42 98       	cbi	0x08, 2	; 8
}
     1ce:	08 95       	ret

000001d0 <lcd_init>:
     1d0:	86 e6       	ldi	r24, 0x66	; 102
     1d2:	9e e0       	ldi	r25, 0x0E	; 14
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x4>
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     1d8:	88 e2       	ldi	r24, 0x28	; 40
     1da:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x01);
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x06);
     1e4:	86 e0       	ldi	r24, 0x06	; 6
     1e6:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x0E);
     1ea:	8e e0       	ldi	r24, 0x0E	; 14
     1ec:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x80);
     1f0:	80 e8       	ldi	r24, 0x80	; 128
     1f2:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
		
}
     1f6:	08 95       	ret

000001f8 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     1f8:	98 b1       	in	r25, 0x08	; 8
     1fa:	9f 70       	andi	r25, 0x0F	; 15
     1fc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     1fe:	28 b1       	in	r18, 0x08	; 8
     200:	98 2f       	mov	r25, r24
     202:	90 7f       	andi	r25, 0xF0	; 240
     204:	92 2b       	or	r25, r18
     206:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     208:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     20a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     20c:	42 9a       	sbi	0x08, 2	; 8
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	38 e4       	ldi	r19, 0x48	; 72
     212:	f9 01       	movw	r30, r18
     214:	31 97       	sbiw	r30, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     218:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     21a:	98 b1       	in	r25, 0x08	; 8
     21c:	9f 70       	andi	r25, 0x0F	; 15
     21e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     220:	98 b1       	in	r25, 0x08	; 8
     222:	82 95       	swap	r24
     224:	80 7f       	andi	r24, 0xF0	; 240
     226:	98 2b       	or	r25, r24
     228:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     22a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     22c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     22e:	42 9a       	sbi	0x08, 2	; 8
     230:	c9 01       	movw	r24, r18
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     236:	42 98       	cbi	0x08, 2	; 8
}
     238:	08 95       	ret

0000023a <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     23a:	80 e8       	ldi	r24, 0x80	; 128
     23c:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
}
     240:	08 95       	ret

00000242 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	ec 01       	movw	r28, r24
     248:	03 c0       	rjmp	.+6      	; 0x250 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     24a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
		str++;
     24e:	21 96       	adiw	r28, 0x01	; 1


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     250:	88 81       	ld	r24, Y
     252:	88 23       	and	r24, r24
     254:	d1 f7       	brne	.-12     	; 0x24a <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	69 f0       	breq	.+26     	; 0x27a <lcd_cursor+0x1e>
     260:	83 30       	cpi	r24, 0x03	; 3
     262:	18 f4       	brcc	.+6      	; 0x26a <lcd_cursor+0xe>
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	a9 f4       	brne	.+42     	; 0x292 <lcd_cursor+0x36>
     268:	05 c0       	rjmp	.+10     	; 0x274 <lcd_cursor+0x18>
     26a:	83 30       	cpi	r24, 0x03	; 3
     26c:	49 f0       	breq	.+18     	; 0x280 <lcd_cursor+0x24>
     26e:	84 30       	cpi	r24, 0x04	; 4
     270:	81 f4       	brne	.+32     	; 0x292 <lcd_cursor+0x36>
     272:	0b c0       	rjmp	.+22     	; 0x28a <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     274:	86 2f       	mov	r24, r22
     276:	81 58       	subi	r24, 0x81	; 129
     278:	05 c0       	rjmp	.+10     	; 0x284 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     27a:	86 2f       	mov	r24, r22
     27c:	81 54       	subi	r24, 0x41	; 65
     27e:	02 c0       	rjmp	.+4      	; 0x284 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     280:	86 2f       	mov	r24, r22
     282:	8d 56       	subi	r24, 0x6D	; 109
     284:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     288:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     28a:	86 2f       	mov	r24, r22
     28c:	8d 52       	subi	r24, 0x2D	; 45
     28e:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     292:	08 95       	ret

00000294 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	8a 01       	movw	r16, r20
     29e:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2a0:	88 23       	and	r24, r24
     2a2:	11 f0       	breq	.+4      	; 0x2a8 <lcd_print+0x14>
     2a4:	66 23       	and	r22, r22
     2a6:	19 f4       	brne	.+6      	; 0x2ae <lcd_print+0x1a>
	{
		lcd_home();
     2a8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_home>
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     2ae:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_cursor>
	}
	if(digits==5 || flag==1)
     2b2:	c5 30       	cpi	r28, 0x05	; 5
     2b4:	d1 05       	cpc	r29, r1
     2b6:	71 f4       	brne	.+28     	; 0x2d4 <lcd_print+0x40>
	{
		million=value/10000+48;
     2b8:	c8 01       	movw	r24, r16
     2ba:	60 e1       	ldi	r22, 0x10	; 16
     2bc:	77 e2       	ldi	r23, 0x27	; 39
     2be:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__udivmodhi4>
     2c2:	cb 01       	movw	r24, r22
     2c4:	c0 96       	adiw	r24, 0x30	; 48
     2c6:	90 93 a4 05 	sts	0x05A4, r25
     2ca:	80 93 a3 05 	sts	0x05A3, r24
		lcd_wr_char(million);
     2ce:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     2d2:	05 c0       	rjmp	.+10     	; 0x2de <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     2d4:	c4 30       	cpi	r28, 0x04	; 4
     2d6:	d1 05       	cpc	r29, r1
     2d8:	11 f0       	breq	.+4      	; 0x2de <lcd_print+0x4a>
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	16 c0       	rjmp	.+44     	; 0x30a <lcd_print+0x76>
	{
		temp = value/1000;
     2de:	c8 01       	movw	r24, r16
     2e0:	68 ee       	ldi	r22, 0xE8	; 232
     2e2:	73 e0       	ldi	r23, 0x03	; 3
     2e4:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__udivmodhi4>
     2e8:	cb 01       	movw	r24, r22
     2ea:	60 93 1b 08 	sts	0x081B, r22
     2ee:	90 93 1c 08 	sts	0x081C, r25
		thousand = temp%10 + 48;
     2f2:	6a e0       	ldi	r22, 0x0A	; 10
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__udivmodhi4>
     2fa:	c0 96       	adiw	r24, 0x30	; 48
     2fc:	90 93 27 08 	sts	0x0827, r25
     300:	80 93 26 08 	sts	0x0826, r24
		lcd_wr_char(thousand);
     304:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     308:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     30a:	c3 30       	cpi	r28, 0x03	; 3
     30c:	d1 05       	cpc	r29, r1
     30e:	21 f0       	breq	.+8      	; 0x318 <lcd_print+0x84>
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	11 f0       	breq	.+4      	; 0x318 <lcd_print+0x84>
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	16 c0       	rjmp	.+44     	; 0x344 <lcd_print+0xb0>
	{
		temp = value/100;
     318:	c8 01       	movw	r24, r16
     31a:	64 e6       	ldi	r22, 0x64	; 100
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__udivmodhi4>
     322:	cb 01       	movw	r24, r22
     324:	60 93 1b 08 	sts	0x081B, r22
     328:	90 93 1c 08 	sts	0x081C, r25
		hundred = temp%10 + 48;
     32c:	6a e0       	ldi	r22, 0x0A	; 10
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__udivmodhi4>
     334:	c0 96       	adiw	r24, 0x30	; 48
     336:	90 93 23 08 	sts	0x0823, r25
     33a:	80 93 22 08 	sts	0x0822, r24
		lcd_wr_char(hundred);
     33e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     342:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     344:	c2 30       	cpi	r28, 0x02	; 2
     346:	d1 05       	cpc	r29, r1
     348:	21 f0       	breq	.+8      	; 0x352 <lcd_print+0xbe>
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	11 f0       	breq	.+4      	; 0x352 <lcd_print+0xbe>
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	16 c0       	rjmp	.+44     	; 0x37e <lcd_print+0xea>
	{
		temp = value/10;
     352:	c8 01       	movw	r24, r16
     354:	6a e0       	ldi	r22, 0x0A	; 10
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__udivmodhi4>
     35c:	cb 01       	movw	r24, r22
     35e:	60 93 1b 08 	sts	0x081B, r22
     362:	90 93 1c 08 	sts	0x081C, r25
		tens = temp%10 + 48;
     366:	6a e0       	ldi	r22, 0x0A	; 10
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__udivmodhi4>
     36e:	c0 96       	adiw	r24, 0x30	; 48
     370:	90 93 21 08 	sts	0x0821, r25
     374:	80 93 20 08 	sts	0x0820, r24
		lcd_wr_char(tens);
     378:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     37c:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     37e:	c1 30       	cpi	r28, 0x01	; 1
     380:	d1 05       	cpc	r29, r1
     382:	11 f0       	breq	.+4      	; 0x388 <lcd_print+0xf4>
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	61 f4       	brne	.+24     	; 0x3a0 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     388:	c8 01       	movw	r24, r16
     38a:	6a e0       	ldi	r22, 0x0A	; 10
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__udivmodhi4>
     392:	c0 96       	adiw	r24, 0x30	; 48
     394:	90 93 25 08 	sts	0x0825, r25
     398:	80 93 24 08 	sts	0x0824, r24
		lcd_wr_char(unit);
     39c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
	}
	if(digits>5)
     3a0:	26 97       	sbiw	r28, 0x06	; 6
     3a2:	1c f0       	brlt	.+6      	; 0x3aa <lcd_print+0x116>
	{
		lcd_wr_char('E');
     3a4:	85 e4       	ldi	r24, 0x45	; 69
     3a6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
	}
	
}
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	08 95       	ret

000003b4 <motion_pin_config>:
volatile unsigned int Degrees; //to accept angle in degrees for turning

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     3b4:	81 b1       	in	r24, 0x01	; 1
     3b6:	8f 60       	ori	r24, 0x0F	; 15
     3b8:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     3ba:	82 b1       	in	r24, 0x02	; 2
     3bc:	80 7f       	andi	r24, 0xF0	; 240
     3be:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     3c0:	ea e0       	ldi	r30, 0x0A	; 10
     3c2:	f1 e0       	ldi	r31, 0x01	; 1
     3c4:	80 81       	ld	r24, Z
     3c6:	88 61       	ori	r24, 0x18	; 24
     3c8:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     3ca:	eb e0       	ldi	r30, 0x0B	; 11
     3cc:	f1 e0       	ldi	r31, 0x01	; 1
     3ce:	80 81       	ld	r24, Z
     3d0:	88 61       	ori	r24, 0x18	; 24
     3d2:	80 83       	st	Z, r24
}
     3d4:	08 95       	ret

000003d6 <init_timer5>:
void init_timer5(void)	//Timer For PWM
{
	TCCR5B = 0x00;	//stop
     3d6:	a1 e2       	ldi	r26, 0x21	; 33
     3d8:	b1 e0       	ldi	r27, 0x01	; 1
     3da:	1c 92       	st	X, r1
	TCNT5H = 0xFF;	//counter higher 8 bit value to which OCRxH is compared with
     3dc:	2f ef       	ldi	r18, 0xFF	; 255
     3de:	20 93 25 01 	sts	0x0125, r18
	TCNT5L = 0x01;	//counter higher 8 bit value to which OCRxH is compared with
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high for left motor
     3e8:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low for left motor
     3ec:	20 93 28 01 	sts	0x0128, r18
	OCR5BH = 0x00;	//Output compare register high for right motor	
     3f0:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register high for right motor
     3f4:	20 93 2a 01 	sts	0x012A, r18
	OCR5C  = 0xFF;	//Motor C1
     3f8:	ec e2       	ldi	r30, 0x2C	; 44
     3fa:	f1 e0       	ldi	r31, 0x01	; 1
     3fc:	8f ef       	ldi	r24, 0xFF	; 255
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Motor C1
     404:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;
     408:	20 83       	st	Z, r18
	TCCR5A = 0xA9;
     40a:	89 ea       	ldi	r24, 0xA9	; 169
     40c:	80 93 20 01 	sts	0x0120, r24
/* COM5A1=1,COM5A0=0,COM5B1=1,COM5B0=0,COM5C1=1,COM5C0=0
For Overriding normal port functionality to OCRnA ouputs
WGM51=0,WGM50=1 along with WGM52 in TCCRB for selecting fast PWM 8 bit mode
*/

	TCCR5B = 0x0B;	//WGM12=1,CS12=0,CS11=1,CS10=1	(Prescaler=64)
     410:	8b e0       	ldi	r24, 0x0B	; 11
     412:	8c 93       	st	X, r24

}
     414:	08 95       	ret

00000416 <lcd_port_config>:

void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     416:	87 b1       	in	r24, 0x07	; 7
     418:	87 6f       	ori	r24, 0xF7	; 247
     41a:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     41c:	88 b1       	in	r24, 0x08	; 8
     41e:	80 78       	andi	r24, 0x80	; 128
     420:	88 b9       	out	0x08, r24	; 8
}
     422:	08 95       	ret

00000424 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     424:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     426:	74 9a       	sbi	0x0e, 4	; 14
}
     428:	08 95       	ret

0000042a <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     42a:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     42c:	75 9a       	sbi	0x0e, 5	; 14
}
     42e:	08 95       	ret

00000430 <left_position_encoder_interrupt_init>:

//Function to initialize ports
void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     430:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     432:	ea e6       	ldi	r30, 0x6A	; 106
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	82 60       	ori	r24, 0x02	; 2
     43a:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     43c:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     43e:	78 94       	sei
}
     440:	08 95       	ret

00000442 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     442:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     444:	ea e6       	ldi	r30, 0x6A	; 106
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	80 81       	ld	r24, Z
     44a:	88 60       	ori	r24, 0x08	; 8
     44c:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     44e:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     450:	78 94       	sei
}
     452:	08 95       	ret

00000454 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
     454:	1f 92       	push	r1
     456:	0f 92       	push	r0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	0f 92       	push	r0
     45c:	11 24       	eor	r1, r1
     45e:	8f 93       	push	r24
     460:	9f 93       	push	r25
     462:	af 93       	push	r26
     464:	bf 93       	push	r27
 ShaftCountRight++;  //increment right shaft position count
     466:	80 91 4d 05 	lds	r24, 0x054D
     46a:	90 91 4e 05 	lds	r25, 0x054E
     46e:	a0 91 4f 05 	lds	r26, 0x054F
     472:	b0 91 50 05 	lds	r27, 0x0550
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	a1 1d       	adc	r26, r1
     47a:	b1 1d       	adc	r27, r1
     47c:	80 93 4d 05 	sts	0x054D, r24
     480:	90 93 4e 05 	sts	0x054E, r25
     484:	a0 93 4f 05 	sts	0x054F, r26
     488:	b0 93 50 05 	sts	0x0550, r27
}
     48c:	bf 91       	pop	r27
     48e:	af 91       	pop	r26
     490:	9f 91       	pop	r25
     492:	8f 91       	pop	r24
     494:	0f 90       	pop	r0
     496:	0f be       	out	0x3f, r0	; 63
     498:	0f 90       	pop	r0
     49a:	1f 90       	pop	r1
     49c:	18 95       	reti

0000049e <__vector_5>:
//ISR for left position encoder
ISR(INT4_vect)
{
     49e:	1f 92       	push	r1
     4a0:	0f 92       	push	r0
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	0f 92       	push	r0
     4a6:	11 24       	eor	r1, r1
     4a8:	8f 93       	push	r24
     4aa:	9f 93       	push	r25
     4ac:	af 93       	push	r26
     4ae:	bf 93       	push	r27
 ShaftCountLeft++;  //increment left shaft position count
     4b0:	80 91 49 05 	lds	r24, 0x0549
     4b4:	90 91 4a 05 	lds	r25, 0x054A
     4b8:	a0 91 4b 05 	lds	r26, 0x054B
     4bc:	b0 91 4c 05 	lds	r27, 0x054C
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	a1 1d       	adc	r26, r1
     4c4:	b1 1d       	adc	r27, r1
     4c6:	80 93 49 05 	sts	0x0549, r24
     4ca:	90 93 4a 05 	sts	0x054A, r25
     4ce:	a0 93 4b 05 	sts	0x054B, r26
     4d2:	b0 93 4c 05 	sts	0x054C, r27
}
     4d6:	bf 91       	pop	r27
     4d8:	af 91       	pop	r26
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <motion_set>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     4e8:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     4ea:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     4ec:	8f 70       	andi	r24, 0x0F	; 15
     4ee:	89 2b       	or	r24, r25
 PORTA = PortARestore; 		// executing the command
     4f0:	82 b9       	out	0x02, r24	; 2
}
     4f2:	08 95       	ret

000004f4 <forward>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     4f4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     4f6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     4f8:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     4fa:	82 b9       	out	0x02, r24	; 2
}

void forward (void) //both wheels forward
{
  motion_set(0x06);
}
     4fc:	08 95       	ret

000004fe <back>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     4fe:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     500:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     502:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     504:	82 b9       	out	0x02, r24	; 2
}

void back (void) //both wheels backward
{
  motion_set(0x09);
}
     506:	08 95       	ret

00000508 <left>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     508:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     50a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     50c:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     50e:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     510:	08 95       	ret

00000512 <right>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     512:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     514:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     516:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     518:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     51a:	08 95       	ret

0000051c <soft_left>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     51c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     51e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     520:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     522:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     524:	08 95       	ret

00000526 <soft_right>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     526:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     528:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     52a:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     52c:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     52e:	08 95       	ret

00000530 <soft_left_2>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     530:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     532:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     534:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     536:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     538:	08 95       	ret

0000053a <soft_right_2>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     53a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     53c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     53e:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     540:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     542:	08 95       	ret

00000544 <stop>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     544:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     546:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     548:	82 b9       	out	0x02, r24	; 2
}

void stop (void)
{
  motion_set(0x00);
}
     54a:	08 95       	ret

0000054c <angle_rotate>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;
 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     554:	a0 e0       	ldi	r26, 0x00	; 0
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	bc 01       	movw	r22, r24
     55a:	cd 01       	movw	r24, r26
     55c:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__floatunsisf>
     560:	28 e4       	ldi	r18, 0x48	; 72
     562:	31 ee       	ldi	r19, 0xE1	; 225
     564:	42 e8       	ldi	r20, 0x82	; 130
     566:	50 e4       	ldi	r21, 0x40	; 64
     568:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__divsf3>
     56c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
     570:	7b 01       	movw	r14, r22
     572:	8c 01       	movw	r16, r24
 ShaftCountRight = 0; 
     574:	10 92 4d 05 	sts	0x054D, r1
     578:	10 92 4e 05 	sts	0x054E, r1
     57c:	10 92 4f 05 	sts	0x054F, r1
     580:	10 92 50 05 	sts	0x0550, r1
 ShaftCountLeft = 0; 
     584:	10 92 49 05 	sts	0x0549, r1
     588:	10 92 4a 05 	sts	0x054A, r1
     58c:	10 92 4b 05 	sts	0x054B, r1
     590:	10 92 4c 05 	sts	0x054C, r1
 while (1)
 {
  //lcd_print(2,8,ShaftCountLeft,2);
  //lcd_print(2,5,ShaftCountRight,2);
  //lcd_print(2,1,ReqdShaftCountInt,3);
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     594:	80 91 4d 05 	lds	r24, 0x054D
     598:	90 91 4e 05 	lds	r25, 0x054E
     59c:	a0 91 4f 05 	lds	r26, 0x054F
     5a0:	b0 91 50 05 	lds	r27, 0x0550
     5a4:	20 91 49 05 	lds	r18, 0x0549
     5a8:	30 91 4a 05 	lds	r19, 0x054A
     5ac:	40 91 4b 05 	lds	r20, 0x054B
     5b0:	50 91 4c 05 	lds	r21, 0x054C
     5b4:	8e 15       	cp	r24, r14
     5b6:	9f 05       	cpc	r25, r15
     5b8:	a0 07       	cpc	r26, r16
     5ba:	b1 07       	cpc	r27, r17
     5bc:	28 f4       	brcc	.+10     	; 0x5c8 <angle_rotate+0x7c>
     5be:	2e 15       	cp	r18, r14
     5c0:	3f 05       	cpc	r19, r15
     5c2:	40 07       	cpc	r20, r16
     5c4:	51 07       	cpc	r21, r17
     5c6:	30 f3       	brcs	.-52     	; 0x594 <angle_rotate+0x48>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     5c8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     5ca:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     5cc:	82 b9       	out	0x02, r24	; 2
  //lcd_print(2,1,ReqdShaftCountInt,3);
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
  			break;
 }
 stop(); //Stop robot
}
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	08 95       	ret

000005d8 <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
     5d8:	ef 92       	push	r14
     5da:	ff 92       	push	r15
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount =(float) DistanceInMM / 5.338; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     5e0:	a0 e0       	ldi	r26, 0x00	; 0
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	bc 01       	movw	r22, r24
     5e6:	cd 01       	movw	r24, r26
     5e8:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__floatunsisf>
     5ec:	25 ee       	ldi	r18, 0xE5	; 229
     5ee:	30 ed       	ldi	r19, 0xD0	; 208
     5f0:	4a ea       	ldi	r20, 0xAA	; 170
     5f2:	50 e4       	ldi	r21, 0x40	; 64
     5f4:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__divsf3>
     5f8:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fixunssfsi>
     5fc:	7b 01       	movw	r14, r22
     5fe:	8c 01       	movw	r16, r24
 ShaftCountLeft = ShaftCountRight = 0;
     600:	10 92 4d 05 	sts	0x054D, r1
     604:	10 92 4e 05 	sts	0x054E, r1
     608:	10 92 4f 05 	sts	0x054F, r1
     60c:	10 92 50 05 	sts	0x0550, r1
     610:	80 91 4d 05 	lds	r24, 0x054D
     614:	90 91 4e 05 	lds	r25, 0x054E
     618:	a0 91 4f 05 	lds	r26, 0x054F
     61c:	b0 91 50 05 	lds	r27, 0x0550
     620:	80 93 49 05 	sts	0x0549, r24
     624:	90 93 4a 05 	sts	0x054A, r25
     628:	a0 93 4b 05 	sts	0x054B, r26
     62c:	b0 93 4c 05 	sts	0x054C, r27
 while(1)
 {
  //lcd_print(2,1,ShaftCountLeft,2);
  //lcd_print(2,1,ShaftCountRight,5);
  //lcd_print(2,7,ReqdShaftCountInt,5);
  if((ShaftCountLeft > ReqdShaftCountInt) | (ShaftCountRight > ReqdShaftCountInt))
     630:	80 91 49 05 	lds	r24, 0x0549
     634:	90 91 4a 05 	lds	r25, 0x054A
     638:	a0 91 4b 05 	lds	r26, 0x054B
     63c:	b0 91 4c 05 	lds	r27, 0x054C
     640:	20 91 4d 05 	lds	r18, 0x054D
     644:	30 91 4e 05 	lds	r19, 0x054E
     648:	40 91 4f 05 	lds	r20, 0x054F
     64c:	50 91 50 05 	lds	r21, 0x0550
     650:	e8 16       	cp	r14, r24
     652:	f9 06       	cpc	r15, r25
     654:	0a 07       	cpc	r16, r26
     656:	1b 07       	cpc	r17, r27
     658:	28 f0       	brcs	.+10     	; 0x664 <linear_distance_mm+0x8c>
     65a:	e2 16       	cp	r14, r18
     65c:	f3 06       	cpc	r15, r19
     65e:	04 07       	cpc	r16, r20
     660:	15 07       	cpc	r17, r21
     662:	30 f7       	brcc	.-52     	; 0x630 <linear_distance_mm+0x58>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     664:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     666:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     668:	82 b9       	out	0x02, r24	; 2
  {
  	break;
  }
 } 
 stop(); //Stop robot
}
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	08 95       	ret

00000674 <forward_mm>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     674:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     676:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     678:	26 60       	ori	r18, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     67a:	22 b9       	out	0x02, r18	; 2
}

void forward_mm(unsigned int DistanceInMM)
{
 forward();
 linear_distance_mm(DistanceInMM);
     67c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <linear_distance_mm>
}
     680:	08 95       	ret

00000682 <back_mm>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     682:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     684:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     686:	29 60       	ori	r18, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     688:	22 b9       	out	0x02, r18	; 2
}

void back_mm(unsigned int DistanceInMM)
{
 back();
 linear_distance_mm(DistanceInMM);
     68a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <linear_distance_mm>
}
     68e:	08 95       	ret

00000690 <left_degrees>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     690:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     692:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     694:	25 60       	ori	r18, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     696:	22 b9       	out	0x02, r18	; 2

void left_degrees(unsigned int Degrees) 
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
 angle_rotate(Degrees);
     698:	0e 94 a6 02 	call	0x54c	; 0x54c <angle_rotate>
}
     69c:	08 95       	ret

0000069e <right_degrees>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     69e:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6a0:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6a2:	2a 60       	ori	r18, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     6a4:	22 b9       	out	0x02, r18	; 2

void right_degrees(unsigned int Degrees)
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
 angle_rotate(Degrees);
     6a6:	0e 94 a6 02 	call	0x54c	; 0x54c <angle_rotate>
}
     6aa:	08 95       	ret

000006ac <soft_left_degrees>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6ac:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6ae:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6b0:	24 60       	ori	r18, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     6b2:	22 b9       	out	0x02, r18	; 2
void soft_left_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	0e 94 a6 02 	call	0x54c	; 0x54c <angle_rotate>
}
     6bc:	08 95       	ret

000006be <soft_right_degrees>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6be:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6c0:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6c2:	22 60       	ori	r18, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     6c4:	22 b9       	out	0x02, r18	; 2
void soft_right_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	0e 94 a6 02 	call	0x54c	; 0x54c <angle_rotate>
}
     6ce:	08 95       	ret

000006d0 <soft_left_2_degrees>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6d0:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6d2:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6d4:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     6d6:	22 b9       	out	0x02, r18	; 2
void soft_left_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left_2(); //Turn reverse soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	0e 94 a6 02 	call	0x54c	; 0x54c <angle_rotate>
}
     6e0:	08 95       	ret

000006e2 <soft_right_2_degrees>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     6e2:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     6e4:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     6e6:	28 60       	ori	r18, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     6e8:	22 b9       	out	0x02, r18	; 2
void soft_right_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right_2();  //Turn reverse soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	0e 94 a6 02 	call	0x54c	; 0x54c <angle_rotate>
}
     6f2:	08 95       	ret

000006f4 <adc_pin_config>:
void adc_pin_config(void)
{
	DDRF=0x00;
     6f4:	10 ba       	out	0x10, r1	; 16
	PORTF=0x00;
     6f6:	11 ba       	out	0x11, r1	; 17
	DDRK=0x00;
     6f8:	10 92 07 01 	sts	0x0107, r1
	PORTK=0x00;
     6fc:	10 92 08 01 	sts	0x0108, r1
}
     700:	08 95       	ret

00000702 <adc_init>:

void adc_init(void)
{
	ADCSRA=0x00;
     702:	ea e7       	ldi	r30, 0x7A	; 122
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	10 82       	st	Z, r1
	ADCSRB=0x00;
     708:	10 92 7b 00 	sts	0x007B, r1
	ADMUX=0x00;
     70c:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA=0x86;	//ADEN=1 ADIE=1....
     710:	86 e8       	ldi	r24, 0x86	; 134
     712:	80 83       	st	Z, r24
	ACSR=0x80;
     714:	80 e8       	ldi	r24, 0x80	; 128
     716:	80 bf       	out	0x30, r24	; 48
}
     718:	08 95       	ret

0000071a <velocity>:
void velocity(unsigned char left,unsigned char right)	//Set PWM Velocity
{
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	18 2f       	mov	r17, r24
     720:	06 2f       	mov	r16, r22
	lcd_print(2,1,left,3);
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	41 2f       	mov	r20, r17
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	23 e0       	ldi	r18, 0x03	; 3
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
	lcd_print(2,5,right,3);
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	65 e0       	ldi	r22, 0x05	; 5
     736:	40 2f       	mov	r20, r16
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	23 e0       	ldi	r18, 0x03	; 3
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
	OCR5AL = (unsigned char) left;
     742:	10 93 28 01 	sts	0x0128, r17
	OCR5BL = (unsigned char) right;
     746:	00 93 2a 01 	sts	0x012A, r16
}
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	08 95       	ret

00000750 <port_init>:
volatile unsigned int Degrees; //to accept angle in degrees for turning

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     750:	81 b1       	in	r24, 0x01	; 1
     752:	8f 60       	ori	r24, 0x0F	; 15
     754:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     756:	82 b1       	in	r24, 0x02	; 2
     758:	80 7f       	andi	r24, 0xF0	; 240
     75a:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     75c:	ea e0       	ldi	r30, 0x0A	; 10
     75e:	f1 e0       	ldi	r31, 0x01	; 1
     760:	80 81       	ld	r24, Z
     762:	88 61       	ori	r24, 0x18	; 24
     764:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     766:	eb e0       	ldi	r30, 0x0B	; 11
     768:	f1 e0       	ldi	r31, 0x01	; 1
     76a:	80 81       	ld	r24, Z
     76c:	88 61       	ori	r24, 0x18	; 24
     76e:	80 83       	st	Z, r24
}

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     770:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     772:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     774:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     776:	75 9a       	sbi	0x0e, 5	; 14
void port_init()
{
 motion_pin_config(); //robot motion pins config
 left_encoder_pin_config(); //left encoder pin config
 right_encoder_pin_config(); //right encoder pin config	
}
     778:	08 95       	ret

0000077a <init_devices>:
void init_devices()
{
 cli(); //Clears the global interrupt
     77a:	f8 94       	cli
 port_init();  //Initializes all the ports
     77c:	0e 94 a8 03 	call	0x750	; 0x750 <port_init>

}

void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     780:	87 b1       	in	r24, 0x07	; 7
     782:	87 6f       	ori	r24, 0xF7	; 247
     784:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     786:	88 b1       	in	r24, 0x08	; 8
     788:	80 78       	andi	r24, 0x80	; 128
     78a:	88 b9       	out	0x08, r24	; 8
 Degrees=Degrees*2;
 angle_rotate(Degrees);
}
void adc_pin_config(void)
{
	DDRF=0x00;
     78c:	10 ba       	out	0x10, r1	; 16
	PORTF=0x00;
     78e:	11 ba       	out	0x11, r1	; 17
	DDRK=0x00;
     790:	10 92 07 01 	sts	0x0107, r1
	PORTK=0x00;
     794:	10 92 08 01 	sts	0x0108, r1
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
}
void init_timer5(void)	//Timer For PWM
{
	TCCR5B = 0x00;	//stop
     798:	a1 e2       	ldi	r26, 0x21	; 33
     79a:	b1 e0       	ldi	r27, 0x01	; 1
     79c:	1c 92       	st	X, r1
	TCNT5H = 0xFF;	//counter higher 8 bit value to which OCRxH is compared with
     79e:	2f ef       	ldi	r18, 0xFF	; 255
     7a0:	20 93 25 01 	sts	0x0125, r18
	TCNT5L = 0x01;	//counter higher 8 bit value to which OCRxH is compared with
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high for left motor
     7aa:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low for left motor
     7ae:	20 93 28 01 	sts	0x0128, r18
	OCR5BH = 0x00;	//Output compare register high for right motor	
     7b2:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register high for right motor
     7b6:	20 93 2a 01 	sts	0x012A, r18
	OCR5C  = 0xFF;	//Motor C1
     7ba:	ec e2       	ldi	r30, 0x2C	; 44
     7bc:	f1 e0       	ldi	r31, 0x01	; 1
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	91 83       	std	Z+1, r25	; 0x01
     7c4:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Motor C1
     7c6:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;
     7ca:	20 83       	st	Z, r18
	TCCR5A = 0xA9;
     7cc:	89 ea       	ldi	r24, 0xA9	; 169
     7ce:	80 93 20 01 	sts	0x0120, r24
/* COM5A1=1,COM5A0=0,COM5B1=1,COM5B0=0,COM5C1=1,COM5C0=0
For Overriding normal port functionality to OCRnA ouputs
WGM51=0,WGM50=1 along with WGM52 in TCCRB for selecting fast PWM 8 bit mode
*/

	TCCR5B = 0x0B;	//WGM12=1,CS12=0,CS11=1,CS10=1	(Prescaler=64)
     7d2:	8b e0       	ldi	r24, 0x0B	; 11
     7d4:	8c 93       	st	X, r24
}

//Function to initialize ports
void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     7d6:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     7d8:	ea e6       	ldi	r30, 0x6A	; 106
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	82 60       	ori	r24, 0x02	; 2
     7e0:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     7e2:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     7e4:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     7e6:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     7e8:	ea e6       	ldi	r30, 0x6A	; 106
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	88 60       	ori	r24, 0x08	; 8
     7f0:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     7f2:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     7f4:	78 94       	sei
	PORTK=0x00;
}

void adc_init(void)
{
	ADCSRA=0x00;
     7f6:	ea e7       	ldi	r30, 0x7A	; 122
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	10 82       	st	Z, r1
	ADCSRB=0x00;
     7fc:	10 92 7b 00 	sts	0x007B, r1
	ADMUX=0x00;
     800:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA=0x86;	//ADEN=1 ADIE=1....
     804:	86 e8       	ldi	r24, 0x86	; 134
     806:	80 83       	st	Z, r24
	ACSR=0x80;
     808:	80 e8       	ldi	r24, 0x80	; 128
     80a:	80 bf       	out	0x30, r24	; 48
 adc_pin_config();
 init_timer5();
 left_position_encoder_interrupt_init();
 right_position_encoder_interrupt_init();
 adc_init();
 sei();   // Enables the global interrupt 
     80c:	78 94       	sei
}
     80e:	08 95       	ret

00000810 <ADC_Conversion>:

unsigned char ADC_Conversion(unsigned char ch)
{
     810:	98 2f       	mov	r25, r24
	unsigned char a;
	if(ch>7)
     812:	88 30       	cpi	r24, 0x08	; 8
     814:	18 f0       	brcs	.+6      	; 0x81c <ADC_Conversion+0xc>
	{
		ADCSRB=0x08;
     816:	88 e0       	ldi	r24, 0x08	; 8
     818:	80 93 7b 00 	sts	0x007B, r24
	}
	ch=ch & 0x07;
	ADMUX=0x20 | ch;
     81c:	97 70       	andi	r25, 0x07	; 7
     81e:	90 62       	ori	r25, 0x20	; 32
     820:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA =ADCSRA | 0x40;		//set start conv bit
     824:	80 91 7a 00 	lds	r24, 0x007A
     828:	80 64       	ori	r24, 0x40	; 64
     82a:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA & 0x10)==0);	//wait for adc conv to complete
     82e:	80 91 7a 00 	lds	r24, 0x007A
     832:	84 ff       	sbrs	r24, 4
     834:	fc cf       	rjmp	.-8      	; 0x82e <ADC_Conversion+0x1e>
	a=ADCH;						//Result stored here after convo
     836:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA=ADCSRA | 0x10;		//Clear ADIF by setting it to 1
     83a:	90 91 7a 00 	lds	r25, 0x007A
     83e:	90 61       	ori	r25, 0x10	; 16
     840:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB=0x00;
     844:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     848:	08 95       	ret

0000084a <print_sensor>:

void print_sensor(char row,char col,unsigned char channel)
{
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	18 2f       	mov	r17, r24
     850:	06 2f       	mov	r16, r22
     852:	84 2f       	mov	r24, r20
	ADC_Value=ADC_Conversion(channel);
     854:	0e 94 08 04 	call	0x810	; 0x810 <ADC_Conversion>
     858:	48 2f       	mov	r20, r24
     85a:	80 93 1d 08 	sts	0x081D, r24
	lcd_print(row,col,ADC_Value,3);
     85e:	81 2f       	mov	r24, r17
     860:	60 2f       	mov	r22, r16
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	23 e0       	ldi	r18, 0x03	; 3
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
}
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	08 95       	ret

00000872 <isqrt>:
int isqrt(int i) {
	int x =
	(verticeList[edgeList[i].endB].y - verticeList[edgeList[i].endA].y) *
	(verticeList[edgeList[i].endB].y - verticeList[edgeList[i].endA].y) +
	(verticeList[edgeList[i].endB].x - verticeList[edgeList[i].endA].x) *
	(verticeList[edgeList[i].endB].x - verticeList[edgeList[i].endA].x);
     872:	9c 01       	movw	r18, r24
     874:	fc 01       	movw	r30, r24
     876:	b3 e0       	ldi	r27, 0x03	; 3
     878:	ee 0f       	add	r30, r30
     87a:	ff 1f       	adc	r31, r31
     87c:	ba 95       	dec	r27
     87e:	e1 f7       	brne	.-8      	; 0x878 <isqrt+0x6>
     880:	22 0f       	add	r18, r18
     882:	33 1f       	adc	r19, r19
     884:	e2 0f       	add	r30, r18
     886:	f3 1f       	adc	r31, r19
     888:	eb 55       	subi	r30, 0x5B	; 91
     88a:	fa 4f       	sbci	r31, 0xFA	; 250
     88c:	46 81       	ldd	r20, Z+6	; 0x06
     88e:	57 81       	ldd	r21, Z+7	; 0x07
     890:	9c 01       	movw	r18, r24
     892:	fc 01       	movw	r30, r24
     894:	73 e0       	ldi	r23, 0x03	; 3
     896:	ee 0f       	add	r30, r30
     898:	ff 1f       	adc	r31, r31
     89a:	7a 95       	dec	r23
     89c:	e1 f7       	brne	.-8      	; 0x896 <isqrt+0x24>
     89e:	22 0f       	add	r18, r18
     8a0:	33 1f       	adc	r19, r19
     8a2:	e2 0f       	add	r30, r18
     8a4:	f3 1f       	adc	r31, r19
     8a6:	eb 55       	subi	r30, 0x5B	; 91
     8a8:	fa 4f       	sbci	r31, 0xFA	; 250
     8aa:	24 81       	ldd	r18, Z+4	; 0x04
     8ac:	35 81       	ldd	r19, Z+5	; 0x05
     8ae:	84 e1       	ldi	r24, 0x14	; 20
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	48 9f       	mul	r20, r24
     8b4:	d0 01       	movw	r26, r0
     8b6:	49 9f       	mul	r20, r25
     8b8:	b0 0d       	add	r27, r0
     8ba:	58 9f       	mul	r21, r24
     8bc:	b0 0d       	add	r27, r0
     8be:	11 24       	eor	r1, r1
     8c0:	a6 5d       	subi	r26, 0xD6	; 214
     8c2:	b7 4f       	sbci	r27, 0xF7	; 247
     8c4:	28 9f       	mul	r18, r24
     8c6:	f0 01       	movw	r30, r0
     8c8:	29 9f       	mul	r18, r25
     8ca:	f0 0d       	add	r31, r0
     8cc:	38 9f       	mul	r19, r24
     8ce:	f0 0d       	add	r31, r0
     8d0:	11 24       	eor	r1, r1
     8d2:	e6 5d       	subi	r30, 0xD6	; 214
     8d4:	f7 4f       	sbci	r31, 0xF7	; 247
     8d6:	14 96       	adiw	r26, 0x04	; 4
     8d8:	4d 91       	ld	r20, X+
     8da:	5c 91       	ld	r21, X
     8dc:	15 97       	sbiw	r26, 0x05	; 5
     8de:	84 81       	ldd	r24, Z+4	; 0x04
     8e0:	95 81       	ldd	r25, Z+5	; 0x05
     8e2:	48 1b       	sub	r20, r24
     8e4:	59 0b       	sbc	r21, r25
     8e6:	12 96       	adiw	r26, 0x02	; 2
     8e8:	8d 91       	ld	r24, X+
     8ea:	9c 91       	ld	r25, X
     8ec:	13 97       	sbiw	r26, 0x03	; 3
     8ee:	22 81       	ldd	r18, Z+2	; 0x02
     8f0:	33 81       	ldd	r19, Z+3	; 0x03
     8f2:	82 1b       	sub	r24, r18
     8f4:	93 0b       	sbc	r25, r19
	int op = x, res = 0, one = 1 << 30;
	while (one > op) one >>= 2;
     8f6:	9c 01       	movw	r18, r24
     8f8:	22 9f       	mul	r18, r18
     8fa:	c0 01       	movw	r24, r0
     8fc:	23 9f       	mul	r18, r19
     8fe:	90 0d       	add	r25, r0
     900:	32 9f       	mul	r19, r18
     902:	90 0d       	add	r25, r0
     904:	11 24       	eor	r1, r1
     906:	44 9f       	mul	r20, r20
     908:	90 01       	movw	r18, r0
     90a:	45 9f       	mul	r20, r21
     90c:	30 0d       	add	r19, r0
     90e:	54 9f       	mul	r21, r20
     910:	30 0d       	add	r19, r0
     912:	11 24       	eor	r1, r1
     914:	82 0f       	add	r24, r18
     916:	93 1f       	adc	r25, r19
     918:	97 fd       	sbrc	r25, 7
     91a:	03 c0       	rjmp	.+6      	; 0x922 <isqrt+0xb0>
		}
		res >>= 1;
		one >>= 2;
	}
	return res;
}
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	08 95       	ret
     922:	ff cf       	rjmp	.-2      	; 0x922 <isqrt+0xb0>

00000924 <addToArr>:

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
     924:	cf 92       	push	r12
     926:	df 92       	push	r13
     928:	ef 92       	push	r14
     92a:	ff 92       	push	r15
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	fc 01       	movw	r30, r24
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     932:	71 83       	std	Z+1, r23	; 0x01
     934:	60 83       	st	Z, r22
     936:	53 83       	std	Z+3, r21	; 0x03
     938:	42 83       	std	Z+2, r20	; 0x02
     93a:	35 83       	std	Z+5, r19	; 0x05
     93c:	24 83       	std	Z+4, r18	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     93e:	17 83       	std	Z+7, r17	; 0x07
     940:	06 83       	std	Z+6, r16	; 0x06
     942:	f1 86       	std	Z+9, r15	; 0x09
     944:	e0 86       	std	Z+8, r14	; 0x08
     946:	d3 86       	std	Z+11, r13	; 0x0b
     948:	c2 86       	std	Z+10, r12	; 0x0a
}
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	df 90       	pop	r13
     954:	cf 90       	pop	r12
     956:	08 95       	ret

00000958 <getFinalDest>:

int getFinalDest(int dest, int finalDest[]) {
     958:	9c 01       	movw	r18, r24
     95a:	fb 01       	movw	r30, r22
	if (dest < 25) {
     95c:	89 31       	cpi	r24, 0x19	; 25
     95e:	91 05       	cpc	r25, r1
     960:	2c f4       	brge	.+10     	; 0x96c <getFinalDest+0x14>
		finalDest[0] = dest;
     962:	91 83       	std	Z+1, r25	; 0x01
     964:	80 83       	st	Z, r24
     966:	21 e0       	ldi	r18, 0x01	; 1
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	fa c0       	rjmp	.+500    	; 0xb60 <getFinalDest+0x208>
		return 1;
	} else {
		switch(dest) {
     96c:	8d 31       	cpi	r24, 0x1D	; 29
     96e:	91 05       	cpc	r25, r1
     970:	09 f4       	brne	.+2      	; 0x974 <getFinalDest+0x1c>
     972:	80 c0       	rjmp	.+256    	; 0xa74 <getFinalDest+0x11c>
     974:	8e 31       	cpi	r24, 0x1E	; 30
     976:	91 05       	cpc	r25, r1
     978:	a4 f4       	brge	.+40     	; 0x9a2 <getFinalDest+0x4a>
     97a:	8a 31       	cpi	r24, 0x1A	; 26
     97c:	91 05       	cpc	r25, r1
     97e:	b9 f1       	breq	.+110    	; 0x9ee <getFinalDest+0x96>
     980:	8b 31       	cpi	r24, 0x1B	; 27
     982:	91 05       	cpc	r25, r1
     984:	2c f4       	brge	.+10     	; 0x990 <getFinalDest+0x38>
     986:	89 31       	cpi	r24, 0x19	; 25
     988:	91 05       	cpc	r25, r1
     98a:	09 f0       	breq	.+2      	; 0x98e <getFinalDest+0x36>
     98c:	e7 c0       	rjmp	.+462    	; 0xb5c <getFinalDest+0x204>
     98e:	1a c0       	rjmp	.+52     	; 0x9c4 <getFinalDest+0x6c>
     990:	8b 31       	cpi	r24, 0x1B	; 27
     992:	91 05       	cpc	r25, r1
     994:	09 f4       	brne	.+2      	; 0x998 <getFinalDest+0x40>
     996:	40 c0       	rjmp	.+128    	; 0xa18 <getFinalDest+0xc0>
     998:	8c 31       	cpi	r24, 0x1C	; 28
     99a:	91 05       	cpc	r25, r1
     99c:	09 f0       	breq	.+2      	; 0x9a0 <getFinalDest+0x48>
     99e:	de c0       	rjmp	.+444    	; 0xb5c <getFinalDest+0x204>
     9a0:	52 c0       	rjmp	.+164    	; 0xa46 <getFinalDest+0xee>
     9a2:	8f 31       	cpi	r24, 0x1F	; 31
     9a4:	91 05       	cpc	r25, r1
     9a6:	09 f4       	brne	.+2      	; 0x9aa <getFinalDest+0x52>
     9a8:	93 c0       	rjmp	.+294    	; 0xad0 <getFinalDest+0x178>
     9aa:	8f 31       	cpi	r24, 0x1F	; 31
     9ac:	91 05       	cpc	r25, r1
     9ae:	0c f4       	brge	.+2      	; 0x9b2 <getFinalDest+0x5a>
     9b0:	78 c0       	rjmp	.+240    	; 0xaa2 <getFinalDest+0x14a>
     9b2:	80 32       	cpi	r24, 0x20	; 32
     9b4:	91 05       	cpc	r25, r1
     9b6:	09 f4       	brne	.+2      	; 0x9ba <getFinalDest+0x62>
     9b8:	a2 c0       	rjmp	.+324    	; 0xafe <getFinalDest+0x1a6>
     9ba:	81 32       	cpi	r24, 0x21	; 33
     9bc:	91 05       	cpc	r25, r1
     9be:	09 f0       	breq	.+2      	; 0x9c2 <getFinalDest+0x6a>
     9c0:	cd c0       	rjmp	.+410    	; 0xb5c <getFinalDest+0x204>
     9c2:	b4 c0       	rjmp	.+360    	; 0xb2c <getFinalDest+0x1d4>
	}
	return res;
}

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	91 83       	std	Z+1, r25	; 0x01
     9ca:	80 83       	st	Z, r24
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	93 83       	std	Z+3, r25	; 0x03
     9d2:	82 83       	std	Z+2, r24	; 0x02
     9d4:	88 e1       	ldi	r24, 0x18	; 24
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	95 83       	std	Z+5, r25	; 0x05
     9da:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     9dc:	37 83       	std	Z+7, r19	; 0x07
     9de:	26 83       	std	Z+6, r18	; 0x06
     9e0:	8a e1       	ldi	r24, 0x1A	; 26
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	91 87       	std	Z+9, r25	; 0x09
     9e6:	80 87       	std	Z+8, r24	; 0x08
     9e8:	8b e1       	ldi	r24, 0x1B	; 27
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	b5 c0       	rjmp	.+362    	; 0xb58 <getFinalDest+0x200>
	}
	return res;
}

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     9ee:	89 e1       	ldi	r24, 0x19	; 25
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	91 83       	std	Z+1, r25	; 0x01
     9f4:	80 83       	st	Z, r24
     9f6:	33 83       	std	Z+3, r19	; 0x03
     9f8:	22 83       	std	Z+2, r18	; 0x02
     9fa:	8c e1       	ldi	r24, 0x1C	; 28
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	95 83       	std	Z+5, r25	; 0x05
     a00:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     a02:	8d e1       	ldi	r24, 0x1D	; 29
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	97 83       	std	Z+7, r25	; 0x07
     a08:	86 83       	std	Z+6, r24	; 0x06
     a0a:	8e e1       	ldi	r24, 0x1E	; 30
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	91 87       	std	Z+9, r25	; 0x09
     a10:	80 87       	std	Z+8, r24	; 0x08
     a12:	8f e1       	ldi	r24, 0x1F	; 31
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	a0 c0       	rjmp	.+320    	; 0xb58 <getFinalDest+0x200>
	}
	return res;
}

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     a18:	84 e0       	ldi	r24, 0x04	; 4
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	91 83       	std	Z+1, r25	; 0x01
     a1e:	80 83       	st	Z, r24
     a20:	85 e0       	ldi	r24, 0x05	; 5
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	93 83       	std	Z+3, r25	; 0x03
     a26:	82 83       	std	Z+2, r24	; 0x02
     a28:	86 e0       	ldi	r24, 0x06	; 6
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	95 83       	std	Z+5, r25	; 0x05
     a2e:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     a30:	8c e1       	ldi	r24, 0x1C	; 28
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	97 83       	std	Z+7, r25	; 0x07
     a36:	86 83       	std	Z+6, r24	; 0x06
     a38:	8d e1       	ldi	r24, 0x1D	; 29
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	91 87       	std	Z+9, r25	; 0x09
     a3e:	80 87       	std	Z+8, r24	; 0x08
     a40:	80 e2       	ldi	r24, 0x20	; 32
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	89 c0       	rjmp	.+274    	; 0xb58 <getFinalDest+0x200>
	}
	return res;
}

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     a46:	88 e0       	ldi	r24, 0x08	; 8
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	91 83       	std	Z+1, r25	; 0x01
     a4c:	80 83       	st	Z, r24
     a4e:	89 e0       	ldi	r24, 0x09	; 9
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	93 83       	std	Z+3, r25	; 0x03
     a54:	82 83       	std	Z+2, r24	; 0x02
     a56:	8a e0       	ldi	r24, 0x0A	; 10
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	95 83       	std	Z+5, r25	; 0x05
     a5c:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     a5e:	81 e2       	ldi	r24, 0x21	; 33
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	97 83       	std	Z+7, r25	; 0x07
     a64:	86 83       	std	Z+6, r24	; 0x06
     a66:	82 e2       	ldi	r24, 0x22	; 34
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	91 87       	std	Z+9, r25	; 0x09
     a6c:	80 87       	std	Z+8, r24	; 0x08
     a6e:	83 e2       	ldi	r24, 0x23	; 35
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	72 c0       	rjmp	.+228    	; 0xb58 <getFinalDest+0x200>
	}
	return res;
}

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     a74:	81 e2       	ldi	r24, 0x21	; 33
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	91 83       	std	Z+1, r25	; 0x01
     a7a:	80 83       	st	Z, r24
     a7c:	82 e2       	ldi	r24, 0x22	; 34
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	93 83       	std	Z+3, r25	; 0x03
     a82:	82 83       	std	Z+2, r24	; 0x02
     a84:	84 e2       	ldi	r24, 0x24	; 36
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	95 83       	std	Z+5, r25	; 0x05
     a8a:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     a8c:	85 e2       	ldi	r24, 0x25	; 37
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	97 83       	std	Z+7, r25	; 0x07
     a92:	86 83       	std	Z+6, r24	; 0x06
     a94:	86 e2       	ldi	r24, 0x26	; 38
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	91 87       	std	Z+9, r25	; 0x09
     a9a:	80 87       	std	Z+8, r24	; 0x08
     a9c:	87 e2       	ldi	r24, 0x27	; 39
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	5b c0       	rjmp	.+182    	; 0xb58 <getFinalDest+0x200>
	}
	return res;
}

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     aa2:	8c e0       	ldi	r24, 0x0C	; 12
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	91 83       	std	Z+1, r25	; 0x01
     aa8:	80 83       	st	Z, r24
     aaa:	8d e0       	ldi	r24, 0x0D	; 13
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	93 83       	std	Z+3, r25	; 0x03
     ab0:	82 83       	std	Z+2, r24	; 0x02
     ab2:	8e e0       	ldi	r24, 0x0E	; 14
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	95 83       	std	Z+5, r25	; 0x05
     ab8:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     aba:	84 e2       	ldi	r24, 0x24	; 36
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	97 83       	std	Z+7, r25	; 0x07
     ac0:	86 83       	std	Z+6, r24	; 0x06
     ac2:	85 e2       	ldi	r24, 0x25	; 37
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	91 87       	std	Z+9, r25	; 0x09
     ac8:	80 87       	std	Z+8, r24	; 0x08
     aca:	88 e2       	ldi	r24, 0x28	; 40
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	44 c0       	rjmp	.+136    	; 0xb58 <getFinalDest+0x200>
	}
	return res;
}

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     ad0:	80 e1       	ldi	r24, 0x10	; 16
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	91 83       	std	Z+1, r25	; 0x01
     ad6:	80 83       	st	Z, r24
     ad8:	81 e1       	ldi	r24, 0x11	; 17
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	93 83       	std	Z+3, r25	; 0x03
     ade:	82 83       	std	Z+2, r24	; 0x02
     ae0:	82 e1       	ldi	r24, 0x12	; 18
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	95 83       	std	Z+5, r25	; 0x05
     ae6:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     ae8:	89 e2       	ldi	r24, 0x29	; 41
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	97 83       	std	Z+7, r25	; 0x07
     aee:	86 83       	std	Z+6, r24	; 0x06
     af0:	8a e2       	ldi	r24, 0x2A	; 42
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	91 87       	std	Z+9, r25	; 0x09
     af6:	80 87       	std	Z+8, r24	; 0x08
     af8:	8b e2       	ldi	r24, 0x2B	; 43
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	2d c0       	rjmp	.+90     	; 0xb58 <getFinalDest+0x200>
	}
	return res;
}

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     afe:	89 e2       	ldi	r24, 0x29	; 41
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	91 83       	std	Z+1, r25	; 0x01
     b04:	80 83       	st	Z, r24
     b06:	8a e2       	ldi	r24, 0x2A	; 42
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	93 83       	std	Z+3, r25	; 0x03
     b0c:	82 83       	std	Z+2, r24	; 0x02
     b0e:	8c e2       	ldi	r24, 0x2C	; 44
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	95 83       	std	Z+5, r25	; 0x05
     b14:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     b16:	8d e2       	ldi	r24, 0x2D	; 45
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	97 83       	std	Z+7, r25	; 0x07
     b1c:	86 83       	std	Z+6, r24	; 0x06
     b1e:	8e e2       	ldi	r24, 0x2E	; 46
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	91 87       	std	Z+9, r25	; 0x09
     b24:	80 87       	std	Z+8, r24	; 0x08
     b26:	8f e2       	ldi	r24, 0x2F	; 47
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	16 c0       	rjmp	.+44     	; 0xb58 <getFinalDest+0x200>
	}
	return res;
}

void addToArr(int finalDest[], int a, int b, int c, int d, int e, int f) {
	finalDest[0] = a; finalDest[1] = b; finalDest[2] = c;
     b2c:	84 e1       	ldi	r24, 0x14	; 20
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	91 83       	std	Z+1, r25	; 0x01
     b32:	80 83       	st	Z, r24
     b34:	85 e1       	ldi	r24, 0x15	; 21
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	93 83       	std	Z+3, r25	; 0x03
     b3a:	82 83       	std	Z+2, r24	; 0x02
     b3c:	86 e1       	ldi	r24, 0x16	; 22
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	95 83       	std	Z+5, r25	; 0x05
     b42:	84 83       	std	Z+4, r24	; 0x04
	finalDest[3] = d; finalDest[4] = e; finalDest[5] = f;
     b44:	8c e2       	ldi	r24, 0x2C	; 44
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	97 83       	std	Z+7, r25	; 0x07
     b4a:	86 83       	std	Z+6, r24	; 0x06
     b4c:	8d e2       	ldi	r24, 0x2D	; 45
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	91 87       	std	Z+9, r25	; 0x09
     b52:	80 87       	std	Z+8, r24	; 0x08
     b54:	80 e3       	ldi	r24, 0x30	; 48
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	93 87       	std	Z+11, r25	; 0x0b
     b5a:	82 87       	std	Z+10, r24	; 0x0a
     b5c:	26 e0       	ldi	r18, 0x06	; 6
     b5e:	30 e0       	ldi	r19, 0x00	; 0
			case 32: addToArr(finalDest,41,42,44,45,46,47); break;
			case 33: addToArr(finalDest,20,21,22,44,45,48); break;
		}
		return 6;
	}
}
     b60:	c9 01       	movw	r24, r18
     b62:	08 95       	ret

00000b64 <getOtherSide>:

int getOtherSide(int tempE, int tempG) {
     b64:	ac 01       	movw	r20, r24
	if (edgeList[tempE].endA != tempG) return edgeList[tempE].endA;
     b66:	fc 01       	movw	r30, r24
     b68:	b3 e0       	ldi	r27, 0x03	; 3
     b6a:	ee 0f       	add	r30, r30
     b6c:	ff 1f       	adc	r31, r31
     b6e:	ba 95       	dec	r27
     b70:	e1 f7       	brne	.-8      	; 0xb6a <getOtherSide+0x6>
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	e8 0f       	add	r30, r24
     b78:	f9 1f       	adc	r31, r25
     b7a:	eb 55       	subi	r30, 0x5B	; 91
     b7c:	fa 4f       	sbci	r31, 0xFA	; 250
     b7e:	24 81       	ldd	r18, Z+4	; 0x04
     b80:	35 81       	ldd	r19, Z+5	; 0x05
     b82:	26 17       	cp	r18, r22
     b84:	37 07       	cpc	r19, r23
     b86:	79 f4       	brne	.+30     	; 0xba6 <getOtherSide+0x42>
	return edgeList[tempE].endB;
     b88:	ca 01       	movw	r24, r20
     b8a:	fa 01       	movw	r30, r20
     b8c:	33 e0       	ldi	r19, 0x03	; 3
     b8e:	ee 0f       	add	r30, r30
     b90:	ff 1f       	adc	r31, r31
     b92:	3a 95       	dec	r19
     b94:	e1 f7       	brne	.-8      	; 0xb8e <getOtherSide+0x2a>
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	e8 0f       	add	r30, r24
     b9c:	f9 1f       	adc	r31, r25
     b9e:	eb 55       	subi	r30, 0x5B	; 91
     ba0:	fa 4f       	sbci	r31, 0xFA	; 250
     ba2:	26 81       	ldd	r18, Z+6	; 0x06
     ba4:	37 81       	ldd	r19, Z+7	; 0x07
}
     ba6:	c9 01       	movw	r24, r18
     ba8:	08 95       	ret

00000baa <dequeue>:

void dequeue(int q[],int qLen,int n) {
     baa:	9a 01       	movw	r18, r20
     bac:	fa 01       	movw	r30, r20
     bae:	31 96       	adiw	r30, 0x01	; 1
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	e8 0f       	add	r30, r24
     bb6:	f9 1f       	adc	r31, r25
     bb8:	d9 01       	movw	r26, r18
     bba:	aa 0f       	add	r26, r26
     bbc:	bb 1f       	adc	r27, r27
     bbe:	a8 0f       	add	r26, r24
     bc0:	b9 1f       	adc	r27, r25
	int i;
	for (i = n; i < qLen-1; i++) {
     bc2:	61 50       	subi	r22, 0x01	; 1
     bc4:	70 40       	sbci	r23, 0x00	; 0
     bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <dequeue+0x2a>
		q[i] = q[i+1];
     bc8:	81 91       	ld	r24, Z+
     bca:	91 91       	ld	r25, Z+
     bcc:	8d 93       	st	X+, r24
     bce:	9d 93       	st	X+, r25
	return edgeList[tempE].endB;
}

void dequeue(int q[],int qLen,int n) {
	int i;
	for (i = n; i < qLen-1; i++) {
     bd0:	2f 5f       	subi	r18, 0xFF	; 255
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	26 17       	cp	r18, r22
     bd6:	37 07       	cpc	r19, r23
     bd8:	bc f3       	brlt	.-18     	; 0xbc8 <dequeue+0x1e>
		q[i] = q[i+1];
	}
}
     bda:	08 95       	ret

00000bdc <enqueue>:

void enqueue(int q[],int qLen,int n,int x) {
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	ec 01       	movw	r28, r24
     be2:	fb 01       	movw	r30, r22
     be4:	31 97       	sbiw	r30, 0x01	; 1
     be6:	ee 0f       	add	r30, r30
     be8:	ff 1f       	adc	r31, r31
     bea:	ec 0f       	add	r30, r28
     bec:	fd 1f       	adc	r31, r29
     bee:	db 01       	movw	r26, r22
     bf0:	aa 0f       	add	r26, r26
     bf2:	bb 1f       	adc	r27, r27
     bf4:	ac 0f       	add	r26, r28
     bf6:	bd 1f       	adc	r27, r29
     bf8:	07 c0       	rjmp	.+14     	; 0xc08 <enqueue+0x2c>
	int i;
	for (i = qLen-1; i >= n; i--) {
		q[i+1] = q[i];
     bfa:	80 81       	ld	r24, Z
     bfc:	91 81       	ldd	r25, Z+1	; 0x01
     bfe:	11 96       	adiw	r26, 0x01	; 1
     c00:	9c 93       	st	X, r25
     c02:	8e 93       	st	-X, r24
     c04:	32 97       	sbiw	r30, 0x02	; 2
     c06:	12 97       	sbiw	r26, 0x02	; 2
     c08:	61 50       	subi	r22, 0x01	; 1
     c0a:	70 40       	sbci	r23, 0x00	; 0
	}
}

void enqueue(int q[],int qLen,int n,int x) {
	int i;
	for (i = qLen-1; i >= n; i--) {
     c0c:	64 17       	cp	r22, r20
     c0e:	75 07       	cpc	r23, r21
     c10:	a4 f7       	brge	.-24     	; 0xbfa <enqueue+0x1e>
		q[i+1] = q[i];
	}
	q[n] = x;
     c12:	44 0f       	add	r20, r20
     c14:	55 1f       	adc	r21, r21
     c16:	c4 0f       	add	r28, r20
     c18:	d5 1f       	adc	r29, r21
     c1a:	39 83       	std	Y+1, r19	; 0x01
     c1c:	28 83       	st	Y, r18
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <mainFun>:

void mainFun(int src,int dest) {
     c24:	2f 92       	push	r2
     c26:	3f 92       	push	r3
     c28:	4f 92       	push	r4
     c2a:	5f 92       	push	r5
     c2c:	6f 92       	push	r6
     c2e:	7f 92       	push	r7
     c30:	8f 92       	push	r8
     c32:	9f 92       	push	r9
     c34:	af 92       	push	r10
     c36:	bf 92       	push	r11
     c38:	cf 92       	push	r12
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	cc 58       	subi	r28, 0x8C	; 140
     c4e:	d3 40       	sbci	r29, 0x03	; 3
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	c5 57       	subi	r28, 0x75	; 117
     c5c:	dc 4f       	sbci	r29, 0xFC	; 252
     c5e:	99 83       	std	Y+1, r25	; 0x01
     c60:	88 83       	st	Y, r24
     c62:	cb 58       	subi	r28, 0x8B	; 139
     c64:	d3 40       	sbci	r29, 0x03	; 3
     c66:	1b 01       	movw	r2, r22
	//EXCEPT src,dest and finalDest, all will be counted from 0
	int verticeXY[98] = {57,275,63,219,84,169,117,121,164,89,216,65,271,59,328,63,381,88,426,125,463,168,480,221,489,276,480,330,458,384,425,425,381,458,328,484,273,489,214,485,161,461,116,428,83,382,63,333,116,223,146,278,114,329,147,167,209,167,241,217,206,272,240,112,397,164,333,166,302,115,429,225,397,277,336,276,304,223,430,329,305,439,334,382,398,386,241,437,214,382,240,333,302,328,145,382,271,275},
     c68:	de 01       	movw	r26, r28
     c6a:	a9 53       	subi	r26, 0x39	; 57
     c6c:	be 4f       	sbci	r27, 0xFE	; 254
     c6e:	ea e7       	ldi	r30, 0x7A	; 122
     c70:	f3 e0       	ldi	r31, 0x03	; 3
     c72:	84 ec       	ldi	r24, 0xC4	; 196
     c74:	01 90       	ld	r0, Z+
     c76:	0d 92       	st	X+, r0
     c78:	81 50       	subi	r24, 0x01	; 1
     c7a:	e1 f7       	brne	.-8      	; 0xc74 <mainFun+0x50>
	edgeEnds[126] = {1,2,1,24,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,3,25,25,26,26,27,27,23,25,28,28,29,29,30,30,31,31,26,3,28,32,7,32,29,7,35,35,34,34,33,33,11,33,36,36,37,37,38,38,39,39,34,11,36,37,40,40,15,43,15,43,42,41,42,41,19,42,47,47,46,46,45,45,44,44,41,19,44,45,48,48,23,26,45,29,34,37,42},
     c7c:	de 01       	movw	r26, r28
     c7e:	a5 57       	subi	r26, 0x75	; 117
     c80:	bd 4f       	sbci	r27, 0xFD	; 253
     c82:	ee e7       	ldi	r30, 0x7E	; 126
     c84:	f2 e0       	ldi	r31, 0x02	; 2
     c86:	8c ef       	ldi	r24, 0xFC	; 252
     c88:	01 90       	ld	r0, Z+
     c8a:	0d 92       	st	X+, r0
     c8c:	81 50       	subi	r24, 0x01	; 1
     c8e:	e1 f7       	brne	.-8      	; 0xc88 <mainFun+0x64>
	edgeAngles[63] = {82,-82,67,52,37,22,7,-7,-22,-37,-52,-67,-82,-97,-112,-127,-142,-157,-172,172,157,142,127,112,-60,-60,-120,-120,60,0,-60,-120,180,0,60,-120,-60,-60,0,0,-60,-120,180,120,60,-120,-60,-60,0,180,60,-120,120,180,-120,-60,0,120,180,180,-60,0,-120},
     c90:	de 01       	movw	r26, r28
     c92:	a7 5b       	subi	r26, 0xB7	; 183
     c94:	be 4f       	sbci	r27, 0xFE	; 254
     c96:	e0 e0       	ldi	r30, 0x00	; 0
     c98:	f2 e0       	ldi	r31, 0x02	; 2
     c9a:	8e e7       	ldi	r24, 0x7E	; 126
     c9c:	01 90       	ld	r0, Z+
     c9e:	0d 92       	st	X+, r0
     ca0:	81 50       	subi	r24, 0x01	; 1
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <mainFun+0x78>
     ca4:	ea e2       	ldi	r30, 0x2A	; 42
     ca6:	f8 e0       	ldi	r31, 0x08	; 8
     ca8:	de 01       	movw	r26, r28
     caa:	a9 53       	subi	r26, 0x39	; 57
     cac:	be 4f       	sbci	r27, 0xFE	; 254
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
	i, j, x, y, z = -1, finalDest[6], finalDestCount, prevPts[49], dist[49], q[50], qLen, compass;
	struct vertice tempV;
	//struct edge tempE;
	for (i = 0; i < 49; i++) { //Vertice Initialization
		verticeList[i].n = i;
     cb2:	31 83       	std	Z+1, r19	; 0x01
     cb4:	20 83       	st	Z, r18
		verticeList[i].x = verticeXY[2*i];
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	11 97       	sbiw	r26, 0x01	; 1
     cbc:	93 83       	std	Z+3, r25	; 0x03
     cbe:	82 83       	std	Z+2, r24	; 0x02
		verticeList[i].y = verticeXY[2*i+1];
     cc0:	12 96       	adiw	r26, 0x02	; 2
     cc2:	8d 91       	ld	r24, X+
     cc4:	9c 91       	ld	r25, X
     cc6:	13 97       	sbiw	r26, 0x03	; 3
     cc8:	95 83       	std	Z+5, r25	; 0x05
     cca:	84 83       	std	Z+4, r24	; 0x04
		verticeList[i].edgeCount = 0;
     ccc:	17 82       	std	Z+7, r1	; 0x07
     cce:	16 82       	std	Z+6, r1	; 0x06
	edgeEnds[126] = {1,2,1,24,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,3,25,25,26,26,27,27,23,25,28,28,29,29,30,30,31,31,26,3,28,32,7,32,29,7,35,35,34,34,33,33,11,33,36,36,37,37,38,38,39,39,34,11,36,37,40,40,15,43,15,43,42,41,42,41,19,42,47,47,46,46,45,45,44,44,41,19,44,45,48,48,23,26,45,29,34,37,42},
	edgeAngles[63] = {82,-82,67,52,37,22,7,-7,-22,-37,-52,-67,-82,-97,-112,-127,-142,-157,-172,172,157,142,127,112,-60,-60,-120,-120,60,0,-60,-120,180,0,60,-120,-60,-60,0,0,-60,-120,180,120,60,-120,-60,-60,0,180,60,-120,120,180,-120,-60,0,120,180,180,-60,0,-120},
	i, j, x, y, z = -1, finalDest[6], finalDestCount, prevPts[49], dist[49], q[50], qLen, compass;
	struct vertice tempV;
	//struct edge tempE;
	for (i = 0; i < 49; i++) { //Vertice Initialization
     cd0:	2f 5f       	subi	r18, 0xFF	; 255
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
     cd4:	74 96       	adiw	r30, 0x14	; 20
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	21 33       	cpi	r18, 0x31	; 49
     cda:	31 05       	cpc	r19, r1
     cdc:	51 f7       	brne	.-44     	; 0xcb2 <mainFun+0x8e>
     cde:	e5 ea       	ldi	r30, 0xA5	; 165
     ce0:	ee 2e       	mov	r14, r30
     ce2:	e5 e0       	ldi	r30, 0x05	; 5
     ce4:	fe 2e       	mov	r15, r30
     ce6:	79 e4       	ldi	r23, 0x49	; 73
     ce8:	67 2e       	mov	r6, r23
     cea:	71 e0       	ldi	r23, 0x01	; 1
     cec:	77 2e       	mov	r7, r23
     cee:	6c 0e       	add	r6, r28
     cf0:	7d 1e       	adc	r7, r29
     cf2:	6b e8       	ldi	r22, 0x8B	; 139
     cf4:	86 2e       	mov	r8, r22
     cf6:	62 e0       	ldi	r22, 0x02	; 2
     cf8:	96 2e       	mov	r9, r22
     cfa:	8c 0e       	add	r8, r28
     cfc:	9d 1e       	adc	r9, r29
     cfe:	aa 24       	eor	r10, r10
     d00:	bb 24       	eor	r11, r11
int isqrt(int i) {
	int x =
	(verticeList[edgeList[i].endB].y - verticeList[edgeList[i].endA].y) *
	(verticeList[edgeList[i].endB].y - verticeList[edgeList[i].endA].y) +
	(verticeList[edgeList[i].endB].x - verticeList[edgeList[i].endA].x) *
	(verticeList[edgeList[i].endB].x - verticeList[edgeList[i].endA].x);
     d02:	54 e1       	ldi	r21, 0x14	; 20
     d04:	45 2e       	mov	r4, r21
     d06:	51 2c       	mov	r5, r1
		verticeList[i].x = verticeXY[2*i];
		verticeList[i].y = verticeXY[2*i+1];
		verticeList[i].edgeCount = 0;
	}
	for (i = 0; i < 63; i++) { //Edge Initialization
		edgeList[i].obstacle = 0;
     d08:	d7 01       	movw	r26, r14
     d0a:	11 96       	adiw	r26, 0x01	; 1
     d0c:	1c 92       	st	X, r1
     d0e:	1e 92       	st	-X, r1
		edgeList[i].angle = edgeAngles[i];
     d10:	f3 01       	movw	r30, r6
     d12:	80 81       	ld	r24, Z
     d14:	91 81       	ldd	r25, Z+1	; 0x01
     d16:	13 96       	adiw	r26, 0x03	; 3
     d18:	9c 93       	st	X, r25
     d1a:	8e 93       	st	-X, r24
     d1c:	12 97       	sbiw	r26, 0x02	; 2
		edgeList[i].endA = edgeEnds[2*i]-1;
     d1e:	f4 01       	movw	r30, r8
     d20:	a0 81       	ld	r26, Z
     d22:	b1 81       	ldd	r27, Z+1	; 0x01
     d24:	11 97       	sbiw	r26, 0x01	; 1
     d26:	f7 01       	movw	r30, r14
     d28:	b5 83       	std	Z+5, r27	; 0x05
     d2a:	a4 83       	std	Z+4, r26	; 0x04
		edgeList[i].endB = edgeEnds[2*i+1]-1;
     d2c:	f4 01       	movw	r30, r8
     d2e:	62 81       	ldd	r22, Z+2	; 0x02
     d30:	73 81       	ldd	r23, Z+3	; 0x03
     d32:	61 50       	subi	r22, 0x01	; 1
     d34:	70 40       	sbci	r23, 0x00	; 0
     d36:	f7 01       	movw	r30, r14
     d38:	77 83       	std	Z+7, r23	; 0x07
     d3a:	66 83       	std	Z+6, r22	; 0x06
int isqrt(int i) {
	int x =
	(verticeList[edgeList[i].endB].y - verticeList[edgeList[i].endA].y) *
	(verticeList[edgeList[i].endB].y - verticeList[edgeList[i].endA].y) +
	(verticeList[edgeList[i].endB].x - verticeList[edgeList[i].endA].x) *
	(verticeList[edgeList[i].endB].x - verticeList[edgeList[i].endA].x);
     d3c:	64 9d       	mul	r22, r4
     d3e:	60 01       	movw	r12, r0
     d40:	65 9d       	mul	r22, r5
     d42:	d0 0c       	add	r13, r0
     d44:	74 9d       	mul	r23, r4
     d46:	d0 0c       	add	r13, r0
     d48:	11 24       	eor	r1, r1
     d4a:	2a e2       	ldi	r18, 0x2A	; 42
     d4c:	38 e0       	ldi	r19, 0x08	; 8
     d4e:	c2 0e       	add	r12, r18
     d50:	d3 1e       	adc	r13, r19
     d52:	a4 9d       	mul	r26, r4
     d54:	80 01       	movw	r16, r0
     d56:	a5 9d       	mul	r26, r5
     d58:	10 0d       	add	r17, r0
     d5a:	b4 9d       	mul	r27, r4
     d5c:	10 0d       	add	r17, r0
     d5e:	11 24       	eor	r1, r1
     d60:	02 0f       	add	r16, r18
     d62:	13 1f       	adc	r17, r19
     d64:	f6 01       	movw	r30, r12
     d66:	44 81       	ldd	r20, Z+4	; 0x04
     d68:	55 81       	ldd	r21, Z+5	; 0x05
     d6a:	f8 01       	movw	r30, r16
     d6c:	84 81       	ldd	r24, Z+4	; 0x04
     d6e:	95 81       	ldd	r25, Z+5	; 0x05
     d70:	48 1b       	sub	r20, r24
     d72:	59 0b       	sbc	r21, r25
     d74:	f6 01       	movw	r30, r12
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	f8 01       	movw	r30, r16
     d7c:	22 81       	ldd	r18, Z+2	; 0x02
     d7e:	33 81       	ldd	r19, Z+3	; 0x03
     d80:	82 1b       	sub	r24, r18
     d82:	93 0b       	sbc	r25, r19
	int op = x, res = 0, one = 1 << 30;
	while (one > op) one >>= 2;
     d84:	9c 01       	movw	r18, r24
     d86:	22 9f       	mul	r18, r18
     d88:	c0 01       	movw	r24, r0
     d8a:	23 9f       	mul	r18, r19
     d8c:	90 0d       	add	r25, r0
     d8e:	32 9f       	mul	r19, r18
     d90:	90 0d       	add	r25, r0
     d92:	11 24       	eor	r1, r1
     d94:	44 9f       	mul	r20, r20
     d96:	90 01       	movw	r18, r0
     d98:	45 9f       	mul	r20, r21
     d9a:	30 0d       	add	r19, r0
     d9c:	54 9f       	mul	r21, r20
     d9e:	30 0d       	add	r19, r0
     da0:	11 24       	eor	r1, r1
     da2:	82 0f       	add	r24, r18
     da4:	93 1f       	adc	r25, r19
     da6:	97 fd       	sbrc	r25, 7
     da8:	61 c3       	rjmp	.+1730   	; 0x146c <mainFun+0x848>
	for (i = 0; i < 63; i++) { //Edge Initialization
		edgeList[i].obstacle = 0;
		edgeList[i].angle = edgeAngles[i];
		edgeList[i].endA = edgeEnds[2*i]-1;
		edgeList[i].endB = edgeEnds[2*i+1]-1;
		edgeList[i].distance = isqrt(i);
     daa:	f7 01       	movw	r30, r14
     dac:	11 86       	std	Z+9, r1	; 0x09
     dae:	10 86       	std	Z+8, r1	; 0x08
		verticeList[edgeList[i].endA].edgePoints[(verticeList[edgeList[i].endA].edgeCount)++] = i;
     db0:	f8 01       	movw	r30, r16
     db2:	86 81       	ldd	r24, Z+6	; 0x06
     db4:	97 81       	ldd	r25, Z+7	; 0x07
     db6:	fd 01       	movw	r30, r26
     db8:	43 e0       	ldi	r20, 0x03	; 3
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	4a 95       	dec	r20
     dc0:	e1 f7       	brne	.-8      	; 0xdba <mainFun+0x196>
     dc2:	aa 0f       	add	r26, r26
     dc4:	bb 1f       	adc	r27, r27
     dc6:	ea 0f       	add	r30, r26
     dc8:	fb 1f       	adc	r31, r27
     dca:	e8 0f       	add	r30, r24
     dcc:	f9 1f       	adc	r31, r25
     dce:	ee 0f       	add	r30, r30
     dd0:	ff 1f       	adc	r31, r31
     dd2:	e6 5d       	subi	r30, 0xD6	; 214
     dd4:	f7 4f       	sbci	r31, 0xF7	; 247
     dd6:	b1 86       	std	Z+9, r11	; 0x09
     dd8:	a0 86       	std	Z+8, r10	; 0x08
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	d8 01       	movw	r26, r16
     dde:	17 96       	adiw	r26, 0x07	; 7
     de0:	9c 93       	st	X, r25
     de2:	8e 93       	st	-X, r24
     de4:	16 97       	sbiw	r26, 0x06	; 6
		verticeList[edgeList[i].endB].edgePoints[(verticeList[edgeList[i].endB].edgeCount)++] = i;
     de6:	f6 01       	movw	r30, r12
     de8:	86 81       	ldd	r24, Z+6	; 0x06
     dea:	97 81       	ldd	r25, Z+7	; 0x07
     dec:	fb 01       	movw	r30, r22
     dee:	13 e0       	ldi	r17, 0x03	; 3
     df0:	ee 0f       	add	r30, r30
     df2:	ff 1f       	adc	r31, r31
     df4:	1a 95       	dec	r17
     df6:	e1 f7       	brne	.-8      	; 0xdf0 <mainFun+0x1cc>
     df8:	66 0f       	add	r22, r22
     dfa:	77 1f       	adc	r23, r23
     dfc:	e6 0f       	add	r30, r22
     dfe:	f7 1f       	adc	r31, r23
     e00:	e8 0f       	add	r30, r24
     e02:	f9 1f       	adc	r31, r25
     e04:	ee 0f       	add	r30, r30
     e06:	ff 1f       	adc	r31, r31
     e08:	e6 5d       	subi	r30, 0xD6	; 214
     e0a:	f7 4f       	sbci	r31, 0xF7	; 247
     e0c:	b1 86       	std	Z+9, r11	; 0x09
     e0e:	a0 86       	std	Z+8, r10	; 0x08
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	d6 01       	movw	r26, r12
     e14:	17 96       	adiw	r26, 0x07	; 7
     e16:	9c 93       	st	X, r25
     e18:	8e 93       	st	-X, r24
     e1a:	16 97       	sbiw	r26, 0x06	; 6
		verticeList[i].n = i;
		verticeList[i].x = verticeXY[2*i];
		verticeList[i].y = verticeXY[2*i+1];
		verticeList[i].edgeCount = 0;
	}
	for (i = 0; i < 63; i++) { //Edge Initialization
     e1c:	08 94       	sec
     e1e:	a1 1c       	adc	r10, r1
     e20:	b1 1c       	adc	r11, r1
     e22:	ea e0       	ldi	r30, 0x0A	; 10
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	ee 0e       	add	r14, r30
     e28:	ff 1e       	adc	r15, r31
     e2a:	22 e0       	ldi	r18, 0x02	; 2
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	62 0e       	add	r6, r18
     e30:	73 1e       	adc	r7, r19
     e32:	84 e0       	ldi	r24, 0x04	; 4
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	88 0e       	add	r8, r24
     e38:	99 1e       	adc	r9, r25
     e3a:	9f e3       	ldi	r25, 0x3F	; 63
     e3c:	a9 16       	cp	r10, r25
     e3e:	b1 04       	cpc	r11, r1
     e40:	09 f0       	breq	.+2      	; 0xe44 <mainFun+0x220>
     e42:	62 cf       	rjmp	.-316    	; 0xd08 <mainFun+0xe4>
		edgeList[i].endB = edgeEnds[2*i+1]-1;
		edgeList[i].distance = isqrt(i);
		verticeList[edgeList[i].endA].edgePoints[(verticeList[edgeList[i].endA].edgeCount)++] = i;
		verticeList[edgeList[i].endB].edgePoints[(verticeList[edgeList[i].endB].edgeCount)++] = i;
	}
	finalDestCount = getFinalDest(dest,finalDest);
     e44:	c1 01       	movw	r24, r2
     e46:	be 01       	movw	r22, r28
     e48:	6f 5f       	subi	r22, 0xFF	; 255
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255
     e4c:	0e 94 ac 04 	call	0x958	; 0x958 <getFinalDest>
     e50:	c9 57       	subi	r28, 0x79	; 121
     e52:	dc 4f       	sbci	r29, 0xFC	; 252
     e54:	99 83       	std	Y+1, r25	; 0x01
     e56:	88 83       	st	Y, r24
     e58:	c7 58       	subi	r28, 0x87	; 135
     e5a:	d3 40       	sbci	r29, 0x03	; 3
     e5c:	fe 01       	movw	r30, r28
     e5e:	b1 96       	adiw	r30, 0x21	; 33
			printf("\t\tEnd A : %d\n",tempE.endA);
			printf("\t\tEnd B : %d\n",tempE.endB);
		}
		printf("\n\n");
	}*/
	for (i = 0; i < 49; i++) prevPts[i] = -1;
     e60:	2f ef       	ldi	r18, 0xFF	; 255
     e62:	3f ef       	ldi	r19, 0xFF	; 255
     e64:	ce 01       	movw	r24, r28
     e66:	8d 57       	subi	r24, 0x7D	; 125
     e68:	9f 4f       	sbci	r25, 0xFF	; 255
     e6a:	21 93       	st	Z+, r18
     e6c:	31 93       	st	Z+, r19
     e6e:	e8 17       	cp	r30, r24
     e70:	f9 07       	cpc	r31, r25
     e72:	d9 f7       	brne	.-10     	; 0xe6a <mainFun+0x246>
     e74:	df 01       	movw	r26, r30
	for (i = 0; i < 49; i++) dist[i] = 20000;
     e76:	20 e2       	ldi	r18, 0x20	; 32
     e78:	3e e4       	ldi	r19, 0x4E	; 78
     e7a:	af 01       	movw	r20, r30
     e7c:	ce 01       	movw	r24, r28
     e7e:	8b 51       	subi	r24, 0x1B	; 27
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	2d 93       	st	X+, r18
     e84:	3d 93       	st	X+, r19
     e86:	a8 17       	cp	r26, r24
     e88:	b9 07       	cpc	r27, r25
     e8a:	d9 f7       	brne	.-10     	; 0xe82 <mainFun+0x25e>
	dist[src - 1] = 0;
     e8c:	c5 57       	subi	r28, 0x75	; 117
     e8e:	dc 4f       	sbci	r29, 0xFC	; 252
     e90:	88 81       	ld	r24, Y
     e92:	99 81       	ldd	r25, Y+1	; 0x01
     e94:	cb 58       	subi	r28, 0x8B	; 139
     e96:	d3 40       	sbci	r29, 0x03	; 3
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	fc 01       	movw	r30, r24
     e9c:	ee 0f       	add	r30, r30
     e9e:	ff 1f       	adc	r31, r31
     ea0:	e4 0f       	add	r30, r20
     ea2:	f5 1f       	adc	r31, r21
     ea4:	11 82       	std	Z+1, r1	; 0x01
     ea6:	10 82       	st	Z, r1
	qLen = 1; q[0] = src - 1;
     ea8:	8d 93       	st	X+, r24
     eaa:	9c 93       	st	X, r25
     eac:	01 e0       	ldi	r16, 0x01	; 1
     eae:	10 e0       	ldi	r17, 0x00	; 0
		////lcd_print(1,13,qLen,3);
		//_delay_ms(2000);
		for (i = 0; i < finalDestCount; i++)
			if (prevPts[finalDest[i]-1] != -1) {
				for (j = 0; j < qLen; j++) {
					if ( dist[q[j]] >= dist[finalDest[i]-1] ) {
     eb0:	63 e8       	ldi	r22, 0x83	; 131
     eb2:	26 2e       	mov	r2, r22
     eb4:	31 2c       	mov	r3, r1
     eb6:	2c 0e       	add	r2, r28
     eb8:	3d 1e       	adc	r3, r29
     eba:	55 ee       	ldi	r21, 0xE5	; 229
     ebc:	45 2e       	mov	r4, r21
     ebe:	51 2c       	mov	r5, r1
     ec0:	4c 0e       	add	r4, r28
     ec2:	5d 1e       	adc	r5, r29
     ec4:	2a c1       	rjmp	.+596    	; 0x111a <mainFun+0x4f6>
	while ( qLen>0 ) {
		////lcd_print(2,13,1,1);
		////lcd_print(1,13,qLen,3);
		//_delay_ms(2000);
		for (i = 0; i < finalDestCount; i++)
			if (prevPts[finalDest[i]-1] != -1) {
     ec6:	d6 01       	movw	r26, r12
     ec8:	2d 91       	ld	r18, X+
     eca:	3c 91       	ld	r19, X
     ecc:	21 50       	subi	r18, 0x01	; 1
     ece:	30 40       	sbci	r19, 0x00	; 0
     ed0:	22 0f       	add	r18, r18
     ed2:	33 1f       	adc	r19, r19
     ed4:	e1 e0       	ldi	r30, 0x01	; 1
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	ec 0f       	add	r30, r28
     eda:	fd 1f       	adc	r31, r29
     edc:	e2 0f       	add	r30, r18
     ede:	f3 1f       	adc	r31, r19
     ee0:	80 a1       	ldd	r24, Z+32	; 0x20
     ee2:	91 a1       	ldd	r25, Z+33	; 0x21
     ee4:	8f 5f       	subi	r24, 0xFF	; 255
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	d1 f1       	breq	.+116    	; 0xf5e <mainFun+0x33a>
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
				for (j = 0; j < qLen; j++) {
					if ( dist[q[j]] >= dist[finalDest[i]-1] ) {
     eee:	51 01       	movw	r10, r2
     ef0:	a2 0e       	add	r10, r18
     ef2:	b3 1e       	adc	r11, r19
     ef4:	31 c0       	rjmp	.+98     	; 0xf58 <mainFun+0x334>
     ef6:	ba 01       	movw	r22, r20
     ef8:	66 0f       	add	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	64 0d       	add	r22, r4
     efe:	75 1d       	adc	r23, r5
     f00:	db 01       	movw	r26, r22
     f02:	ed 91       	ld	r30, X+
     f04:	fc 91       	ld	r31, X
     f06:	ee 0f       	add	r30, r30
     f08:	ff 1f       	adc	r31, r31
     f0a:	e2 0d       	add	r30, r2
     f0c:	f3 1d       	adc	r31, r3
     f0e:	20 81       	ld	r18, Z
     f10:	31 81       	ldd	r19, Z+1	; 0x01
     f12:	f5 01       	movw	r30, r10
     f14:	80 81       	ld	r24, Z
     f16:	91 81       	ldd	r25, Z+1	; 0x01
     f18:	28 17       	cp	r18, r24
     f1a:	39 07       	cpc	r19, r25
     f1c:	14 f4       	brge	.+4      	; 0xf22 <mainFun+0x2fe>
     f1e:	c8 01       	movw	r24, r16
     f20:	18 c0       	rjmp	.+48     	; 0xf52 <mainFun+0x32e>
		q[i+1] = q[i];
	}
	q[n] = x;
}

void mainFun(int src,int dest) {
     f22:	da 01       	movw	r26, r20
     f24:	11 96       	adiw	r26, 0x01	; 1
     f26:	aa 0f       	add	r26, r26
     f28:	bb 1f       	adc	r27, r27
     f2a:	a4 0d       	add	r26, r4
     f2c:	b5 1d       	adc	r27, r5
     f2e:	fb 01       	movw	r30, r22
     f30:	9a 01       	movw	r18, r20
	return edgeList[tempE].endB;
}

void dequeue(int q[],int qLen,int n) {
	int i;
	for (i = n; i < qLen-1; i++) {
     f32:	b8 01       	movw	r22, r16
     f34:	61 50       	subi	r22, 0x01	; 1
     f36:	70 40       	sbci	r23, 0x00	; 0
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <mainFun+0x322>
		q[i] = q[i+1];
     f3a:	8d 91       	ld	r24, X+
     f3c:	9d 91       	ld	r25, X+
     f3e:	81 93       	st	Z+, r24
     f40:	91 93       	st	Z+, r25
	return edgeList[tempE].endB;
}

void dequeue(int q[],int qLen,int n) {
	int i;
	for (i = n; i < qLen-1; i++) {
     f42:	2f 5f       	subi	r18, 0xFF	; 255
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	cb 01       	movw	r24, r22
     f48:	26 17       	cp	r18, r22
     f4a:	37 07       	cpc	r19, r23
     f4c:	b4 f3       	brlt	.-20     	; 0xf3a <mainFun+0x316>
		//_delay_ms(2000);
		for (i = 0; i < finalDestCount; i++)
			if (prevPts[finalDest[i]-1] != -1) {
				for (j = 0; j < qLen; j++) {
					if ( dist[q[j]] >= dist[finalDest[i]-1] ) {
						dequeue(q,qLen,j); j--; qLen--;
     f4e:	41 50       	subi	r20, 0x01	; 1
     f50:	50 40       	sbci	r21, 0x00	; 0
		////lcd_print(2,13,1,1);
		////lcd_print(1,13,qLen,3);
		//_delay_ms(2000);
		for (i = 0; i < finalDestCount; i++)
			if (prevPts[finalDest[i]-1] != -1) {
				for (j = 0; j < qLen; j++) {
     f52:	4f 5f       	subi	r20, 0xFF	; 255
     f54:	5f 4f       	sbci	r21, 0xFF	; 255
     f56:	8c 01       	movw	r16, r24
     f58:	40 17       	cp	r20, r16
     f5a:	51 07       	cpc	r21, r17
     f5c:	64 f2       	brlt	.-104    	; 0xef6 <mainFun+0x2d2>
	qLen = 1; q[0] = src - 1;
	while ( qLen>0 ) {
		////lcd_print(2,13,1,1);
		////lcd_print(1,13,qLen,3);
		//_delay_ms(2000);
		for (i = 0; i < finalDestCount; i++)
     f5e:	08 94       	sec
     f60:	e1 1c       	adc	r14, r1
     f62:	f1 1c       	adc	r15, r1
     f64:	22 e0       	ldi	r18, 0x02	; 2
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	c2 0e       	add	r12, r18
     f6a:	d3 1e       	adc	r13, r19
     f6c:	c9 57       	subi	r28, 0x79	; 121
     f6e:	dc 4f       	sbci	r29, 0xFC	; 252
     f70:	88 81       	ld	r24, Y
     f72:	99 81       	ldd	r25, Y+1	; 0x01
     f74:	c7 58       	subi	r28, 0x87	; 135
     f76:	d3 40       	sbci	r29, 0x03	; 3
     f78:	e8 16       	cp	r14, r24
     f7a:	f9 06       	cpc	r15, r25
     f7c:	0c f4       	brge	.+2      	; 0xf80 <mainFun+0x35c>
     f7e:	a3 cf       	rjmp	.-186    	; 0xec6 <mainFun+0x2a2>
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	b3 c0       	rjmp	.+358    	; 0x10ec <mainFun+0x4c8>
						dequeue(q,qLen,j); j--; qLen--;
					}
				}
			}
		for (i = 0; i < qLen; i++) {
			x = q[i];
     f86:	fb 01       	movw	r30, r22
     f88:	ee 0f       	add	r30, r30
     f8a:	ff 1f       	adc	r31, r31
     f8c:	e4 0d       	add	r30, r4
     f8e:	f5 1d       	adc	r31, r5
     f90:	a0 80       	ld	r10, Z
     f92:	b1 80       	ldd	r11, Z+1	; 0x01
			//dequeue(q,qLen,i); i--; qLen--;
			////lcd_print(2,13,2,1);
			////lcd_print(1,13,qLen,3);
			//_delay_ms(2000);
			for (j = 0; j < verticeList[x].edgeCount; j++) {
     f94:	a4 e1       	ldi	r26, 0x14	; 20
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	aa 9e       	mul	r10, r26
     f9a:	c0 01       	movw	r24, r0
     f9c:	ab 9e       	mul	r10, r27
     f9e:	90 0d       	add	r25, r0
     fa0:	ba 9e       	mul	r11, r26
     fa2:	90 0d       	add	r25, r0
     fa4:	11 24       	eor	r1, r1
     fa6:	fc 01       	movw	r30, r24
     fa8:	e6 5d       	subi	r30, 0xD6	; 214
     faa:	f7 4f       	sbci	r31, 0xF7	; 247
     fac:	26 81       	ldd	r18, Z+6	; 0x06
     fae:	37 81       	ldd	r19, Z+7	; 0x07
     fb0:	c7 57       	subi	r28, 0x77	; 119
     fb2:	dc 4f       	sbci	r29, 0xFC	; 252
     fb4:	39 83       	std	Y+1, r19	; 0x01
     fb6:	28 83       	st	Y, r18
     fb8:	c9 58       	subi	r28, 0x89	; 137
     fba:	d3 40       	sbci	r29, 0x03	; 3
     fbc:	e2 e3       	ldi	r30, 0x32	; 50
     fbe:	ce 2e       	mov	r12, r30
     fc0:	e8 e0       	ldi	r30, 0x08	; 8
     fc2:	de 2e       	mov	r13, r30
     fc4:	c8 0e       	add	r12, r24
     fc6:	d9 1e       	adc	r13, r25
     fc8:	66 24       	eor	r6, r6
     fca:	77 24       	eor	r7, r7
				y = getOtherSide(verticeList[x].edgePoints[j],x);
				////lcd_print(2,13,3,1);
				////lcd_print(1,11,dist[y],5);
				//_delay_ms(2000);
				if (dist[y] > dist[x] + edgeList[verticeList[x].edgePoints[j]].distance) {
     fcc:	45 01       	movw	r8, r10
     fce:	88 0c       	add	r8, r8
     fd0:	99 1c       	adc	r9, r9
     fd2:	82 0c       	add	r8, r2
     fd4:	93 1c       	adc	r9, r3
     fd6:	7e c0       	rjmp	.+252    	; 0x10d4 <mainFun+0x4b0>
			//dequeue(q,qLen,i); i--; qLen--;
			////lcd_print(2,13,2,1);
			////lcd_print(1,13,qLen,3);
			//_delay_ms(2000);
			for (j = 0; j < verticeList[x].edgeCount; j++) {
				y = getOtherSide(verticeList[x].edgePoints[j],x);
     fd8:	d6 01       	movw	r26, r12
     fda:	2c 91       	ld	r18, X
     fdc:	11 96       	adiw	r26, 0x01	; 1
     fde:	3c 91       	ld	r19, X
		return 6;
	}
}

int getOtherSide(int tempE, int tempG) {
	if (edgeList[tempE].endA != tempG) return edgeList[tempE].endA;
     fe0:	c9 01       	movw	r24, r18
     fe2:	fc 01       	movw	r30, r24
     fe4:	43 e0       	ldi	r20, 0x03	; 3
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	4a 95       	dec	r20
     fec:	e1 f7       	brne	.-8      	; 0xfe6 <mainFun+0x3c2>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	e8 0f       	add	r30, r24
     ff4:	f9 1f       	adc	r31, r25
     ff6:	eb 55       	subi	r30, 0x5B	; 91
     ff8:	fa 4f       	sbci	r31, 0xFA	; 250
     ffa:	e4 80       	ldd	r14, Z+4	; 0x04
     ffc:	f5 80       	ldd	r15, Z+5	; 0x05
     ffe:	ea 14       	cp	r14, r10
    1000:	fb 04       	cpc	r15, r11
    1002:	79 f4       	brne	.+30     	; 0x1022 <mainFun+0x3fe>
	return edgeList[tempE].endB;
    1004:	c9 01       	movw	r24, r18
    1006:	fc 01       	movw	r30, r24
    1008:	a3 e0       	ldi	r26, 0x03	; 3
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	aa 95       	dec	r26
    1010:	e1 f7       	brne	.-8      	; 0x100a <mainFun+0x3e6>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	e8 0f       	add	r30, r24
    1018:	f9 1f       	adc	r31, r25
    101a:	eb 55       	subi	r30, 0x5B	; 91
    101c:	fa 4f       	sbci	r31, 0xFA	; 250
    101e:	e6 80       	ldd	r14, Z+6	; 0x06
    1020:	f7 80       	ldd	r15, Z+7	; 0x07
			for (j = 0; j < verticeList[x].edgeCount; j++) {
				y = getOtherSide(verticeList[x].edgePoints[j],x);
				////lcd_print(2,13,3,1);
				////lcd_print(1,11,dist[y],5);
				//_delay_ms(2000);
				if (dist[y] > dist[x] + edgeList[verticeList[x].edgePoints[j]].distance) {
    1022:	c9 01       	movw	r24, r18
    1024:	f9 01       	movw	r30, r18
    1026:	43 e0       	ldi	r20, 0x03	; 3
    1028:	ee 0f       	add	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	4a 95       	dec	r20
    102e:	e1 f7       	brne	.-8      	; 0x1028 <mainFun+0x404>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	e8 0f       	add	r30, r24
    1036:	f9 1f       	adc	r31, r25
    1038:	eb 55       	subi	r30, 0x5B	; 91
    103a:	fa 4f       	sbci	r31, 0xFA	; 250
    103c:	d4 01       	movw	r26, r8
    103e:	4d 91       	ld	r20, X+
    1040:	5c 91       	ld	r21, X
    1042:	80 85       	ldd	r24, Z+8	; 0x08
    1044:	91 85       	ldd	r25, Z+9	; 0x09
    1046:	48 0f       	add	r20, r24
    1048:	59 1f       	adc	r21, r25
    104a:	f7 01       	movw	r30, r14
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	e2 0d       	add	r30, r2
    1052:	f3 1d       	adc	r31, r3
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	48 17       	cp	r20, r24
    105a:	59 07       	cpc	r21, r25
    105c:	a4 f5       	brge	.+104    	; 0x10c6 <mainFun+0x4a2>
					dist[y] = dist[x] + edgeList[verticeList[x].edgePoints[j]].distance;
					prevPts[y] = x;
					////lcd_print(2,13,4,1);
					////lcd_print(1,13,qLen,3);
					//_delay_ms(2000);
					enqueue(q,qLen,i+1,y); qLen++; i++;
    105e:	6f 5f       	subi	r22, 0xFF	; 255
    1060:	7f 4f       	sbci	r23, 0xFF	; 255
    1062:	98 01       	movw	r18, r16
    1064:	f8 01       	movw	r30, r16
    1066:	31 97       	sbiw	r30, 0x01	; 1
    1068:	ee 0f       	add	r30, r30
    106a:	ff 1f       	adc	r31, r31
    106c:	e4 0d       	add	r30, r4
    106e:	f5 1d       	adc	r31, r5
    1070:	d8 01       	movw	r26, r16
    1072:	aa 0f       	add	r26, r26
    1074:	bb 1f       	adc	r27, r27
    1076:	a4 0d       	add	r26, r4
    1078:	b5 1d       	adc	r27, r5
    107a:	07 c0       	rjmp	.+14     	; 0x108a <mainFun+0x466>
}

void enqueue(int q[],int qLen,int n,int x) {
	int i;
	for (i = qLen-1; i >= n; i--) {
		q[i+1] = q[i];
    107c:	80 81       	ld	r24, Z
    107e:	91 81       	ldd	r25, Z+1	; 0x01
    1080:	11 96       	adiw	r26, 0x01	; 1
    1082:	9c 93       	st	X, r25
    1084:	8e 93       	st	-X, r24
    1086:	32 97       	sbiw	r30, 0x02	; 2
    1088:	12 97       	sbiw	r26, 0x02	; 2
    108a:	21 50       	subi	r18, 0x01	; 1
    108c:	30 40       	sbci	r19, 0x00	; 0
	}
}

void enqueue(int q[],int qLen,int n,int x) {
	int i;
	for (i = qLen-1; i >= n; i--) {
    108e:	26 17       	cp	r18, r22
    1090:	37 07       	cpc	r19, r23
    1092:	a4 f7       	brge	.-24     	; 0x107c <mainFun+0x458>
				y = getOtherSide(verticeList[x].edgePoints[j],x);
				////lcd_print(2,13,3,1);
				////lcd_print(1,11,dist[y],5);
				//_delay_ms(2000);
				if (dist[y] > dist[x] + edgeList[verticeList[x].edgePoints[j]].distance) {
					dist[y] = dist[x] + edgeList[verticeList[x].edgePoints[j]].distance;
    1094:	f7 01       	movw	r30, r14
    1096:	ee 0f       	add	r30, r30
    1098:	ff 1f       	adc	r31, r31
    109a:	d1 01       	movw	r26, r2
    109c:	ae 0f       	add	r26, r30
    109e:	bf 1f       	adc	r27, r31
    10a0:	4d 93       	st	X+, r20
    10a2:	5c 93       	st	X, r21
					prevPts[y] = x;
    10a4:	21 e0       	ldi	r18, 0x01	; 1
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	2c 0f       	add	r18, r28
    10aa:	3d 1f       	adc	r19, r29
    10ac:	e2 0f       	add	r30, r18
    10ae:	f3 1f       	adc	r31, r19
    10b0:	b1 a2       	std	Z+33, r11	; 0x21
    10b2:	a0 a2       	std	Z+32, r10	; 0x20
void enqueue(int q[],int qLen,int n,int x) {
	int i;
	for (i = qLen-1; i >= n; i--) {
		q[i+1] = q[i];
	}
	q[n] = x;
    10b4:	fb 01       	movw	r30, r22
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	e4 0d       	add	r30, r4
    10bc:	f5 1d       	adc	r31, r5
    10be:	f1 82       	std	Z+1, r15	; 0x01
    10c0:	e0 82       	st	Z, r14
					dist[y] = dist[x] + edgeList[verticeList[x].edgePoints[j]].distance;
					prevPts[y] = x;
					////lcd_print(2,13,4,1);
					////lcd_print(1,13,qLen,3);
					//_delay_ms(2000);
					enqueue(q,qLen,i+1,y); qLen++; i++;
    10c2:	0f 5f       	subi	r16, 0xFF	; 255
    10c4:	1f 4f       	sbci	r17, 0xFF	; 255
			x = q[i];
			//dequeue(q,qLen,i); i--; qLen--;
			////lcd_print(2,13,2,1);
			////lcd_print(1,13,qLen,3);
			//_delay_ms(2000);
			for (j = 0; j < verticeList[x].edgeCount; j++) {
    10c6:	08 94       	sec
    10c8:	61 1c       	adc	r6, r1
    10ca:	71 1c       	adc	r7, r1
    10cc:	82 e0       	ldi	r24, 0x02	; 2
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	c8 0e       	add	r12, r24
    10d2:	d9 1e       	adc	r13, r25
    10d4:	c7 57       	subi	r28, 0x77	; 119
    10d6:	dc 4f       	sbci	r29, 0xFC	; 252
    10d8:	a8 81       	ld	r26, Y
    10da:	b9 81       	ldd	r27, Y+1	; 0x01
    10dc:	c9 58       	subi	r28, 0x89	; 137
    10de:	d3 40       	sbci	r29, 0x03	; 3
    10e0:	6a 16       	cp	r6, r26
    10e2:	7b 06       	cpc	r7, r27
    10e4:	0c f4       	brge	.+2      	; 0x10e8 <mainFun+0x4c4>
    10e6:	78 cf       	rjmp	.-272    	; 0xfd8 <mainFun+0x3b4>
					if ( dist[q[j]] >= dist[finalDest[i]-1] ) {
						dequeue(q,qLen,j); j--; qLen--;
					}
				}
			}
		for (i = 0; i < qLen; i++) {
    10e8:	6f 5f       	subi	r22, 0xFF	; 255
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	60 17       	cp	r22, r16
    10ee:	71 07       	cpc	r23, r17
    10f0:	0c f4       	brge	.+2      	; 0x10f4 <mainFun+0x4d0>
    10f2:	49 cf       	rjmp	.-366    	; 0xf86 <mainFun+0x362>
	}*/
	for (i = 0; i < 49; i++) prevPts[i] = -1;
	for (i = 0; i < 49; i++) dist[i] = 20000;
	dist[src - 1] = 0;
	qLen = 1; q[0] = src - 1;
	while ( qLen>0 ) {
    10f4:	10 16       	cp	r1, r16
    10f6:	11 06       	cpc	r1, r17
    10f8:	84 f0       	brlt	.+32     	; 0x111a <mainFun+0x4f6>
    10fa:	8e 01       	movw	r16, r28
    10fc:	0d 5f       	subi	r16, 0xFD	; 253
    10fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1100:	41 e0       	ldi	r20, 0x01	; 1
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	ee 24       	eor	r14, r14
    1106:	ff 24       	eor	r15, r15
    1108:	be 01       	movw	r22, r28
    110a:	6f 5f       	subi	r22, 0xFF	; 255
    110c:	7f 4f       	sbci	r23, 0xFF	; 255
			}
		}
	}
	////lcd_print(1,13,qLen,3);
	for (x = 0, i = 1; i < finalDestCount; i++) {
		if (dist[finalDest[i]-1] < dist[finalDest[x]-1])
    110e:	93 e8       	ldi	r25, 0x83	; 131
    1110:	c9 2e       	mov	r12, r25
    1112:	d1 2c       	mov	r13, r1
    1114:	cc 0e       	add	r12, r28
    1116:	dd 1e       	adc	r13, r29
    1118:	26 c0       	rjmp	.+76     	; 0x1166 <mainFun+0x542>
	}*/
	for (i = 0; i < 49; i++) prevPts[i] = -1;
	for (i = 0; i < 49; i++) dist[i] = 20000;
	dist[src - 1] = 0;
	qLen = 1; q[0] = src - 1;
	while ( qLen>0 ) {
    111a:	6e 01       	movw	r12, r28
    111c:	08 94       	sec
    111e:	c1 1c       	adc	r12, r1
    1120:	d1 1c       	adc	r13, r1
    1122:	ee 24       	eor	r14, r14
    1124:	ff 24       	eor	r15, r15
    1126:	22 cf       	rjmp	.-444    	; 0xf6c <mainFun+0x348>
			}
		}
	}
	////lcd_print(1,13,qLen,3);
	for (x = 0, i = 1; i < finalDestCount; i++) {
		if (dist[finalDest[i]-1] < dist[finalDest[x]-1])
    1128:	f8 01       	movw	r30, r16
    112a:	a0 81       	ld	r26, Z
    112c:	b1 81       	ldd	r27, Z+1	; 0x01
    112e:	11 97       	sbiw	r26, 0x01	; 1
    1130:	aa 0f       	add	r26, r26
    1132:	bb 1f       	adc	r27, r27
    1134:	ac 0d       	add	r26, r12
    1136:	bd 1d       	adc	r27, r13
    1138:	26 0f       	add	r18, r22
    113a:	37 1f       	adc	r19, r23
    113c:	f9 01       	movw	r30, r18
    113e:	80 81       	ld	r24, Z
    1140:	91 81       	ldd	r25, Z+1	; 0x01
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	8c 0d       	add	r24, r12
    114a:	9d 1d       	adc	r25, r13
    114c:	2d 91       	ld	r18, X+
    114e:	3c 91       	ld	r19, X
    1150:	dc 01       	movw	r26, r24
    1152:	8d 91       	ld	r24, X+
    1154:	9c 91       	ld	r25, X
    1156:	28 17       	cp	r18, r24
    1158:	39 07       	cpc	r19, r25
    115a:	0c f4       	brge	.+2      	; 0x115e <mainFun+0x53a>
    115c:	7a 01       	movw	r14, r20
				}
			}
		}
	}
	////lcd_print(1,13,qLen,3);
	for (x = 0, i = 1; i < finalDestCount; i++) {
    115e:	4f 5f       	subi	r20, 0xFF	; 255
    1160:	5f 4f       	sbci	r21, 0xFF	; 255
    1162:	0e 5f       	subi	r16, 0xFE	; 254
    1164:	1f 4f       	sbci	r17, 0xFF	; 255
    1166:	97 01       	movw	r18, r14
    1168:	22 0f       	add	r18, r18
    116a:	33 1f       	adc	r19, r19
    116c:	c9 57       	subi	r28, 0x79	; 121
    116e:	dc 4f       	sbci	r29, 0xFC	; 252
    1170:	e8 81       	ld	r30, Y
    1172:	f9 81       	ldd	r31, Y+1	; 0x01
    1174:	c7 58       	subi	r28, 0x87	; 135
    1176:	d3 40       	sbci	r29, 0x03	; 3
    1178:	4e 17       	cp	r20, r30
    117a:	5f 07       	cpc	r21, r31
    117c:	ac f2       	brlt	.-86     	; 0x1128 <mainFun+0x504>
		if (dist[finalDest[i]-1] < dist[finalDest[x]-1])
			x = i;
	}
	z = finalDest[x] - 1;
    117e:	62 0f       	add	r22, r18
    1180:	73 1f       	adc	r23, r19
    1182:	db 01       	movw	r26, r22
    1184:	2d 91       	ld	r18, X+
    1186:	3c 91       	ld	r19, X
    1188:	21 50       	subi	r18, 0x01	; 1
    118a:	30 40       	sbci	r19, 0x00	; 0
	pathLen = 0; compass = 0;
    118c:	10 92 29 08 	sts	0x0829, r1
    1190:	10 92 28 08 	sts	0x0828, r1
	////lcd_print(1, 13, prevPts[z],3);
	while (prevPts[z] != -1) {
    1194:	3e 01       	movw	r6, r28
    1196:	08 94       	sec
    1198:	61 1c       	adc	r6, r1
    119a:	71 1c       	adc	r7, r1
		path[pathLen++] = z+1;
		tempV = verticeList[z];
    119c:	74 e1       	ldi	r23, 0x14	; 20
    119e:	87 2e       	mov	r8, r23
    11a0:	91 2c       	mov	r9, r1
    11a2:	6d e0       	ldi	r22, 0x0D	; 13
    11a4:	a6 2e       	mov	r10, r22
    11a6:	b1 2c       	mov	r11, r1
    11a8:	ac 0e       	add	r10, r28
    11aa:	bd 1e       	adc	r11, r29
    11ac:	55 e1       	ldi	r21, 0x15	; 21
    11ae:	c5 2e       	mov	r12, r21
    11b0:	d1 2c       	mov	r13, r1
    11b2:	cc 0e       	add	r12, r28
    11b4:	dd 1e       	adc	r13, r29
    11b6:	d1 c0       	rjmp	.+418    	; 0x135a <mainFun+0x736>
	}
	z = finalDest[x] - 1;
	pathLen = 0; compass = 0;
	////lcd_print(1, 13, prevPts[z],3);
	while (prevPts[z] != -1) {
		path[pathLen++] = z+1;
    11b8:	80 91 28 08 	lds	r24, 0x0828
    11bc:	90 91 29 08 	lds	r25, 0x0829
    11c0:	2f 5f       	subi	r18, 0xFF	; 255
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	fc 01       	movw	r30, r24
    11c6:	ee 0f       	add	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	ef 5a       	subi	r30, 0xAF	; 175
    11cc:	fa 4f       	sbci	r31, 0xFA	; 250
    11ce:	31 83       	std	Z+1, r19	; 0x01
    11d0:	20 83       	st	Z, r18
    11d2:	21 50       	subi	r18, 0x01	; 1
    11d4:	30 40       	sbci	r19, 0x00	; 0
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	90 93 29 08 	sts	0x0829, r25
    11dc:	80 93 28 08 	sts	0x0828, r24
		tempV = verticeList[z];
    11e0:	28 9d       	mul	r18, r8
    11e2:	f0 01       	movw	r30, r0
    11e4:	29 9d       	mul	r18, r9
    11e6:	f0 0d       	add	r31, r0
    11e8:	38 9d       	mul	r19, r8
    11ea:	f0 0d       	add	r31, r0
    11ec:	11 24       	eor	r1, r1
    11ee:	d5 01       	movw	r26, r10
    11f0:	e6 5d       	subi	r30, 0xD6	; 214
    11f2:	f7 4f       	sbci	r31, 0xF7	; 247
    11f4:	84 e1       	ldi	r24, 0x14	; 20
    11f6:	01 90       	ld	r0, Z+
    11f8:	0d 92       	st	X+, r0
    11fa:	81 50       	subi	r24, 0x01	; 1
    11fc:	e1 f7       	brne	.-8      	; 0x11f6 <mainFun+0x5d2>
    11fe:	6b 89       	ldd	r22, Y+19	; 0x13
    1200:	7c 89       	ldd	r23, Y+20	; 0x14
    1202:	d6 01       	movw	r26, r12
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	1e c0       	rjmp	.+60     	; 0x1246 <mainFun+0x622>
		for (i = 0; i < tempV.edgeCount; i++) {
			x = tempV.edgePoints[i];
    120a:	ed 90       	ld	r14, X+
    120c:	fc 90       	ld	r15, X
    120e:	11 97       	sbiw	r26, 0x01	; 1
		return 6;
	}
}

int getOtherSide(int tempE, int tempG) {
	if (edgeList[tempE].endA != tempG) return edgeList[tempE].endA;
    1210:	f7 01       	movw	r30, r14
    1212:	ee 0f       	add	r30, r30
    1214:	ff 1f       	adc	r31, r31
    1216:	c7 01       	movw	r24, r14
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	e8 0f       	add	r30, r24
    1226:	f9 1f       	adc	r31, r25
    1228:	eb 55       	subi	r30, 0x5B	; 91
    122a:	fa 4f       	sbci	r31, 0xFA	; 250
    122c:	84 81       	ldd	r24, Z+4	; 0x04
    122e:	95 81       	ldd	r25, Z+5	; 0x05
    1230:	82 17       	cp	r24, r18
    1232:	93 07       	cpc	r25, r19
    1234:	11 f4       	brne	.+4      	; 0x123a <mainFun+0x616>
	return edgeList[tempE].endB;
    1236:	86 81       	ldd	r24, Z+6	; 0x06
    1238:	97 81       	ldd	r25, Z+7	; 0x07
    123a:	12 96       	adiw	r26, 0x02	; 2
	while (prevPts[z] != -1) {
		path[pathLen++] = z+1;
		tempV = verticeList[z];
		for (i = 0; i < tempV.edgeCount; i++) {
			x = tempV.edgePoints[i];
			if (getOtherSide(x,z) == prevPts[z]) break;
    123c:	80 17       	cp	r24, r16
    123e:	91 07       	cpc	r25, r17
    1240:	29 f0       	breq	.+10     	; 0x124c <mainFun+0x628>
	pathLen = 0; compass = 0;
	////lcd_print(1, 13, prevPts[z],3);
	while (prevPts[z] != -1) {
		path[pathLen++] = z+1;
		tempV = verticeList[z];
		for (i = 0; i < tempV.edgeCount; i++) {
    1242:	4f 5f       	subi	r20, 0xFF	; 255
    1244:	5f 4f       	sbci	r21, 0xFF	; 255
    1246:	46 17       	cp	r20, r22
    1248:	57 07       	cpc	r21, r23
    124a:	fc f2       	brlt	.-66     	; 0x120a <mainFun+0x5e6>
			x = tempV.edgePoints[i];
			if (getOtherSide(x,z) == prevPts[z]) break;
		}
		if (z == edgeList[x].endA) path[pathLen++] = edgeList[x].angle + 180;
    124c:	f7 01       	movw	r30, r14
    124e:	ee 0f       	add	r30, r30
    1250:	ff 1f       	adc	r31, r31
    1252:	c7 01       	movw	r24, r14
    1254:	63 e0       	ldi	r22, 0x03	; 3
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	6a 95       	dec	r22
    125c:	e1 f7       	brne	.-8      	; 0x1256 <mainFun+0x632>
    125e:	e8 0f       	add	r30, r24
    1260:	f9 1f       	adc	r31, r25
    1262:	eb 55       	subi	r30, 0x5B	; 91
    1264:	fa 4f       	sbci	r31, 0xFA	; 250
    1266:	84 81       	ldd	r24, Z+4	; 0x04
    1268:	95 81       	ldd	r25, Z+5	; 0x05
    126a:	28 17       	cp	r18, r24
    126c:	39 07       	cpc	r19, r25
    126e:	b1 f4       	brne	.+44     	; 0x129c <mainFun+0x678>
    1270:	20 91 28 08 	lds	r18, 0x0828
    1274:	30 91 29 08 	lds	r19, 0x0829
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	93 81       	ldd	r25, Z+3	; 0x03
    127c:	8c 54       	subi	r24, 0x4C	; 76
    127e:	9f 4f       	sbci	r25, 0xFF	; 255
    1280:	f9 01       	movw	r30, r18
    1282:	ee 0f       	add	r30, r30
    1284:	ff 1f       	adc	r31, r31
    1286:	ef 5a       	subi	r30, 0xAF	; 175
    1288:	fa 4f       	sbci	r31, 0xFA	; 250
    128a:	91 83       	std	Z+1, r25	; 0x01
    128c:	80 83       	st	Z, r24
    128e:	2f 5f       	subi	r18, 0xFF	; 255
    1290:	3f 4f       	sbci	r19, 0xFF	; 255
    1292:	30 93 29 08 	sts	0x0829, r19
    1296:	20 93 28 08 	sts	0x0828, r18
    129a:	12 c0       	rjmp	.+36     	; 0x12c0 <mainFun+0x69c>
		else path[pathLen++] = edgeList[x].angle;
    129c:	80 91 28 08 	lds	r24, 0x0828
    12a0:	90 91 29 08 	lds	r25, 0x0829
    12a4:	22 81       	ldd	r18, Z+2	; 0x02
    12a6:	33 81       	ldd	r19, Z+3	; 0x03
    12a8:	fc 01       	movw	r30, r24
    12aa:	ee 0f       	add	r30, r30
    12ac:	ff 1f       	adc	r31, r31
    12ae:	ef 5a       	subi	r30, 0xAF	; 175
    12b0:	fa 4f       	sbci	r31, 0xFA	; 250
    12b2:	31 83       	std	Z+1, r19	; 0x01
    12b4:	20 83       	st	Z, r18
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	90 93 29 08 	sts	0x0829, r25
    12bc:	80 93 28 08 	sts	0x0828, r24
		if (path[pathLen-1] > 180) path[pathLen-1] -= 360;
    12c0:	e0 91 28 08 	lds	r30, 0x0828
    12c4:	f0 91 29 08 	lds	r31, 0x0829
    12c8:	ee 0f       	add	r30, r30
    12ca:	ff 1f       	adc	r31, r31
    12cc:	e1 5b       	subi	r30, 0xB1	; 177
    12ce:	fa 4f       	sbci	r31, 0xFA	; 250
    12d0:	80 81       	ld	r24, Z
    12d2:	91 81       	ldd	r25, Z+1	; 0x01
    12d4:	85 3b       	cpi	r24, 0xB5	; 181
    12d6:	91 05       	cpc	r25, r1
    12d8:	6c f0       	brlt	.+26     	; 0x12f4 <mainFun+0x6d0>
    12da:	e0 91 28 08 	lds	r30, 0x0828
    12de:	f0 91 29 08 	lds	r31, 0x0829
    12e2:	ee 0f       	add	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	e1 5b       	subi	r30, 0xB1	; 177
    12e8:	fa 4f       	sbci	r31, 0xFA	; 250
    12ea:	80 81       	ld	r24, Z
    12ec:	91 81       	ldd	r25, Z+1	; 0x01
    12ee:	88 56       	subi	r24, 0x68	; 104
    12f0:	91 40       	sbci	r25, 0x01	; 1
    12f2:	19 c0       	rjmp	.+50     	; 0x1326 <mainFun+0x702>
		else if (path[pathLen-1] <= -180) path[pathLen-1] +=360;
    12f4:	e0 91 28 08 	lds	r30, 0x0828
    12f8:	f0 91 29 08 	lds	r31, 0x0829
    12fc:	ee 0f       	add	r30, r30
    12fe:	ff 1f       	adc	r31, r31
    1300:	e1 5b       	subi	r30, 0xB1	; 177
    1302:	fa 4f       	sbci	r31, 0xFA	; 250
    1304:	80 81       	ld	r24, Z
    1306:	91 81       	ldd	r25, Z+1	; 0x01
    1308:	8d 54       	subi	r24, 0x4D	; 77
    130a:	9f 4f       	sbci	r25, 0xFF	; 255
    130c:	74 f4       	brge	.+28     	; 0x132a <mainFun+0x706>
    130e:	e0 91 28 08 	lds	r30, 0x0828
    1312:	f0 91 29 08 	lds	r31, 0x0829
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	e1 5b       	subi	r30, 0xB1	; 177
    131c:	fa 4f       	sbci	r31, 0xFA	; 250
    131e:	80 81       	ld	r24, Z
    1320:	91 81       	ldd	r25, Z+1	; 0x01
    1322:	88 59       	subi	r24, 0x98	; 152
    1324:	9e 4f       	sbci	r25, 0xFE	; 254
    1326:	91 83       	std	Z+1, r25	; 0x01
    1328:	80 83       	st	Z, r24
		path[pathLen-1] = -path[pathLen-1];
    132a:	e0 91 28 08 	lds	r30, 0x0828
    132e:	f0 91 29 08 	lds	r31, 0x0829
    1332:	a0 91 28 08 	lds	r26, 0x0828
    1336:	b0 91 29 08 	lds	r27, 0x0829
    133a:	aa 0f       	add	r26, r26
    133c:	bb 1f       	adc	r27, r27
    133e:	a1 5b       	subi	r26, 0xB1	; 177
    1340:	ba 4f       	sbci	r27, 0xFA	; 250
    1342:	8d 91       	ld	r24, X+
    1344:	9c 91       	ld	r25, X
    1346:	90 95       	com	r25
    1348:	81 95       	neg	r24
    134a:	9f 4f       	sbci	r25, 0xFF	; 255
    134c:	ee 0f       	add	r30, r30
    134e:	ff 1f       	adc	r31, r31
    1350:	e1 5b       	subi	r30, 0xB1	; 177
    1352:	fa 4f       	sbci	r31, 0xFA	; 250
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	80 83       	st	Z, r24
    1358:	98 01       	movw	r18, r16
			x = i;
	}
	z = finalDest[x] - 1;
	pathLen = 0; compass = 0;
	////lcd_print(1, 13, prevPts[z],3);
	while (prevPts[z] != -1) {
    135a:	f9 01       	movw	r30, r18
    135c:	ee 0f       	add	r30, r30
    135e:	ff 1f       	adc	r31, r31
    1360:	e6 0d       	add	r30, r6
    1362:	f7 1d       	adc	r31, r7
    1364:	00 a1       	ldd	r16, Z+32	; 0x20
    1366:	11 a1       	ldd	r17, Z+33	; 0x21
    1368:	ef ef       	ldi	r30, 0xFF	; 255
    136a:	0f 3f       	cpi	r16, 0xFF	; 255
    136c:	1e 07       	cpc	r17, r30
    136e:	09 f0       	breq	.+2      	; 0x1372 <mainFun+0x74e>
    1370:	23 cf       	rjmp	.-442    	; 0x11b8 <mainFun+0x594>
		if (path[pathLen-1] > 180) path[pathLen-1] -= 360;
		else if (path[pathLen-1] <= -180) path[pathLen-1] +=360;
		path[pathLen-1] = -path[pathLen-1];
		z = prevPts[z];
	}
	path[pathLen++] = src;
    1372:	80 91 28 08 	lds	r24, 0x0828
    1376:	90 91 29 08 	lds	r25, 0x0829
    137a:	fc 01       	movw	r30, r24
    137c:	ee 0f       	add	r30, r30
    137e:	ff 1f       	adc	r31, r31
    1380:	ef 5a       	subi	r30, 0xAF	; 175
    1382:	fa 4f       	sbci	r31, 0xFA	; 250
    1384:	c5 57       	subi	r28, 0x75	; 117
    1386:	dc 4f       	sbci	r29, 0xFC	; 252
    1388:	28 81       	ld	r18, Y
    138a:	39 81       	ldd	r19, Y+1	; 0x01
    138c:	cb 58       	subi	r28, 0x8B	; 139
    138e:	d3 40       	sbci	r29, 0x03	; 3
    1390:	31 83       	std	Z+1, r19	; 0x01
    1392:	20 83       	st	Z, r18
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	90 93 29 08 	sts	0x0829, r25
    139a:	80 93 28 08 	sts	0x0828, r24
    139e:	00 e0       	ldi	r16, 0x00	; 0
    13a0:	10 e0       	ldi	r17, 0x00	; 0
    13a2:	27 c0       	rjmp	.+78     	; 0x13f2 <mainFun+0x7ce>
	
	for (i = 0; i < pathLen/2; i++) {
		x = path[i];
    13a4:	d8 01       	movw	r26, r16
    13a6:	aa 0f       	add	r26, r26
    13a8:	bb 1f       	adc	r27, r27
    13aa:	af 5a       	subi	r26, 0xAF	; 175
    13ac:	ba 4f       	sbci	r27, 0xFA	; 250
    13ae:	2d 91       	ld	r18, X+
    13b0:	3c 91       	ld	r19, X
    13b2:	11 97       	sbiw	r26, 0x01	; 1
		path[i] = path[pathLen-i-1];
    13b4:	e0 91 28 08 	lds	r30, 0x0828
    13b8:	f0 91 29 08 	lds	r31, 0x0829
    13bc:	31 97       	sbiw	r30, 0x01	; 1
    13be:	e0 1b       	sub	r30, r16
    13c0:	f1 0b       	sbc	r31, r17
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	ef 5a       	subi	r30, 0xAF	; 175
    13c8:	fa 4f       	sbci	r31, 0xFA	; 250
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	11 96       	adiw	r26, 0x01	; 1
    13d0:	9c 93       	st	X, r25
    13d2:	8e 93       	st	-X, r24
		path[pathLen-i-1] = x;
    13d4:	e0 91 28 08 	lds	r30, 0x0828
    13d8:	f0 91 29 08 	lds	r31, 0x0829
    13dc:	31 97       	sbiw	r30, 0x01	; 1
    13de:	e0 1b       	sub	r30, r16
    13e0:	f1 0b       	sbc	r31, r17
    13e2:	ee 0f       	add	r30, r30
    13e4:	ff 1f       	adc	r31, r31
    13e6:	ef 5a       	subi	r30, 0xAF	; 175
    13e8:	fa 4f       	sbci	r31, 0xFA	; 250
    13ea:	31 83       	std	Z+1, r19	; 0x01
    13ec:	20 83       	st	Z, r18
		path[pathLen-1] = -path[pathLen-1];
		z = prevPts[z];
	}
	path[pathLen++] = src;
	
	for (i = 0; i < pathLen/2; i++) {
    13ee:	0f 5f       	subi	r16, 0xFF	; 255
    13f0:	1f 4f       	sbci	r17, 0xFF	; 255
    13f2:	80 91 28 08 	lds	r24, 0x0828
    13f6:	90 91 29 08 	lds	r25, 0x0829
    13fa:	62 e0       	ldi	r22, 0x02	; 2
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	0e 94 12 12 	call	0x2424	; 0x2424 <__divmodhi4>
    1402:	06 17       	cp	r16, r22
    1404:	17 07       	cpc	r17, r23
    1406:	74 f2       	brlt	.-100    	; 0x13a4 <mainFun+0x780>
    1408:	21 e0       	ldi	r18, 0x01	; 1
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	25 c0       	rjmp	.+74     	; 0x145c <mainFun+0x838>
		x = path[i];
		path[i] = path[pathLen-i-1];
		path[pathLen-i-1] = x;
	}
	for (i = 1; i < pathLen; i+=2) {
		x = path[i];
    1412:	f9 01       	movw	r30, r18
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	ef 5a       	subi	r30, 0xAF	; 175
    141a:	fa 4f       	sbci	r31, 0xFA	; 250
    141c:	60 81       	ld	r22, Z
    141e:	71 81       	ldd	r23, Z+1	; 0x01
		path[i] -= compass;
    1420:	80 81       	ld	r24, Z
    1422:	91 81       	ldd	r25, Z+1	; 0x01
    1424:	84 1b       	sub	r24, r20
    1426:	95 0b       	sbc	r25, r21
    1428:	91 83       	std	Z+1, r25	; 0x01
    142a:	80 83       	st	Z, r24
		if (path[i] >= 180) path[i] -= 360;
    142c:	80 81       	ld	r24, Z
    142e:	91 81       	ldd	r25, Z+1	; 0x01
    1430:	84 3b       	cpi	r24, 0xB4	; 180
    1432:	91 05       	cpc	r25, r1
    1434:	2c f0       	brlt	.+10     	; 0x1440 <mainFun+0x81c>
    1436:	80 81       	ld	r24, Z
    1438:	91 81       	ldd	r25, Z+1	; 0x01
    143a:	88 56       	subi	r24, 0x68	; 104
    143c:	91 40       	sbci	r25, 0x01	; 1
    143e:	09 c0       	rjmp	.+18     	; 0x1452 <mainFun+0x82e>
		else if (path[i] <= -180) path[i] += 360;
    1440:	80 81       	ld	r24, Z
    1442:	91 81       	ldd	r25, Z+1	; 0x01
    1444:	8d 54       	subi	r24, 0x4D	; 77
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	34 f4       	brge	.+12     	; 0x1456 <mainFun+0x832>
    144a:	80 81       	ld	r24, Z
    144c:	91 81       	ldd	r25, Z+1	; 0x01
    144e:	88 59       	subi	r24, 0x98	; 152
    1450:	9e 4f       	sbci	r25, 0xFE	; 254
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24
	for (i = 0; i < pathLen/2; i++) {
		x = path[i];
		path[i] = path[pathLen-i-1];
		path[pathLen-i-1] = x;
	}
	for (i = 1; i < pathLen; i+=2) {
    1456:	2e 5f       	subi	r18, 0xFE	; 254
    1458:	3f 4f       	sbci	r19, 0xFF	; 255
    145a:	ab 01       	movw	r20, r22
    145c:	80 91 28 08 	lds	r24, 0x0828
    1460:	90 91 29 08 	lds	r25, 0x0829
    1464:	28 17       	cp	r18, r24
    1466:	39 07       	cpc	r19, r25
    1468:	a4 f2       	brlt	.-88     	; 0x1412 <mainFun+0x7ee>
    146a:	01 c0       	rjmp	.+2      	; 0x146e <mainFun+0x84a>
    146c:	ff cf       	rjmp	.-2      	; 0x146c <mainFun+0x848>
		_delay_ms(2000);
	}*/
	//	printf("%d ",path[i]);
	//printf("\n");
	//return pathLen;
}
    146e:	c4 57       	subi	r28, 0x74	; 116
    1470:	dc 4f       	sbci	r29, 0xFC	; 252
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	ff 90       	pop	r15
    1486:	ef 90       	pop	r14
    1488:	df 90       	pop	r13
    148a:	cf 90       	pop	r12
    148c:	bf 90       	pop	r11
    148e:	af 90       	pop	r10
    1490:	9f 90       	pop	r9
    1492:	8f 90       	pop	r8
    1494:	7f 90       	pop	r7
    1496:	6f 90       	pop	r6
    1498:	5f 90       	pop	r5
    149a:	4f 90       	pop	r4
    149c:	3f 90       	pop	r3
    149e:	2f 90       	pop	r2
    14a0:	08 95       	ret

000014a2 <printNsetDJ>:
##############################################
#################################################*/


int printNsetDJ(void)
{
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
		int djFlag=0,Sharp;
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    14a6:	83 e0       	ldi	r24, 0x03	; 3
    14a8:	0e 94 08 04 	call	0x810	; 0x810 <ADC_Conversion>
    14ac:	80 93 46 05 	sts	0x0546, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    14b0:	82 e0       	ldi	r24, 0x02	; 2
    14b2:	0e 94 08 04 	call	0x810	; 0x810 <ADC_Conversion>
    14b6:	80 93 47 05 	sts	0x0547, r24
		Right_white_line = ADC_Conversion(1); //Getting data of Right WL Sensor
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	0e 94 08 04 	call	0x810	; 0x810 <ADC_Conversion>
    14c0:	80 93 48 05 	sts	0x0548, r24
		Sharp=ADC_Conversion(11);
    14c4:	8b e0       	ldi	r24, 0x0B	; 11
    14c6:	0e 94 08 04 	call	0x810	; 0x810 <ADC_Conversion>
		//print_sensor(1,1,3);
		//print_sensor(1,5,2);
		//print_sensor(1,9,1);
		djFlag = 0;
		if (Left_white_line>THRESHOLD) djFlag = 100;
    14ca:	80 91 46 05 	lds	r24, 0x0546
    14ce:	85 31       	cpi	r24, 0x15	; 21
    14d0:	18 f0       	brcs	.+6      	; 0x14d8 <printNsetDJ+0x36>
    14d2:	c4 e6       	ldi	r28, 0x64	; 100
    14d4:	d0 e0       	ldi	r29, 0x00	; 0
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <printNsetDJ+0x3a>
    14d8:	c0 e0       	ldi	r28, 0x00	; 0
    14da:	d0 e0       	ldi	r29, 0x00	; 0
		if (Center_white_line>THRESHOLD) djFlag += 10;
    14dc:	80 91 47 05 	lds	r24, 0x0547
    14e0:	85 31       	cpi	r24, 0x15	; 21
    14e2:	08 f0       	brcs	.+2      	; 0x14e6 <printNsetDJ+0x44>
    14e4:	2a 96       	adiw	r28, 0x0a	; 10
		if (Right_white_line>THRESHOLD) djFlag +=1;
    14e6:	80 91 48 05 	lds	r24, 0x0548
    14ea:	85 31       	cpi	r24, 0x15	; 21
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <printNsetDJ+0x4e>
    14ee:	21 96       	adiw	r28, 0x01	; 1
		lcd_print (1,1,djFlag,3);
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	61 e0       	ldi	r22, 0x01	; 1
    14f4:	ae 01       	movw	r20, r28
    14f6:	23 e0       	ldi	r18, 0x03	; 3
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
		return djFlag;
}
    14fe:	ce 01       	movw	r24, r28
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	08 95       	ret

00001506 <moveSetX>:

void moveSetX(int x)
{
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	8c 01       	movw	r16, r24
	lcd_print(2,9,2,1);
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	69 e0       	ldi	r22, 0x09	; 9
    1514:	42 e0       	ldi	r20, 0x02	; 2
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	21 e0       	ldi	r18, 0x01	; 1
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
	int djFlag=printNsetDJ(), reqd = 3;
    1520:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <printNsetDJ>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1524:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1526:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1528:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    152a:	82 b9       	out	0x02, r24	; 2
	forward();
	//forward_mm(10);
	ShaftCountLeft = ShaftCountRight = 0;
    152c:	10 92 4d 05 	sts	0x054D, r1
    1530:	10 92 4e 05 	sts	0x054E, r1
    1534:	10 92 4f 05 	sts	0x054F, r1
    1538:	10 92 50 05 	sts	0x0550, r1
    153c:	80 91 4d 05 	lds	r24, 0x054D
    1540:	90 91 4e 05 	lds	r25, 0x054E
    1544:	a0 91 4f 05 	lds	r26, 0x054F
    1548:	b0 91 50 05 	lds	r27, 0x0550
    154c:	80 93 49 05 	sts	0x0549, r24
    1550:	90 93 4a 05 	sts	0x054A, r25
    1554:	a0 93 4b 05 	sts	0x054B, r26
    1558:	b0 93 4c 05 	sts	0x054C, r27
	while (1) {
		if ( ShaftCountLeft > reqd | ShaftCountRight > reqd )
    155c:	80 91 49 05 	lds	r24, 0x0549
    1560:	90 91 4a 05 	lds	r25, 0x054A
    1564:	a0 91 4b 05 	lds	r26, 0x054B
    1568:	b0 91 4c 05 	lds	r27, 0x054C
    156c:	20 91 4d 05 	lds	r18, 0x054D
    1570:	30 91 4e 05 	lds	r19, 0x054E
    1574:	40 91 4f 05 	lds	r20, 0x054F
    1578:	50 91 50 05 	lds	r21, 0x0550
    157c:	04 97       	sbiw	r24, 0x04	; 4
    157e:	a1 05       	cpc	r26, r1
    1580:	b1 05       	cpc	r27, r1
    1582:	90 f5       	brcc	.+100    	; 0x15e8 <moveSetX+0xe2>
    1584:	24 30       	cpi	r18, 0x04	; 4
    1586:	31 05       	cpc	r19, r1
    1588:	41 05       	cpc	r20, r1
    158a:	51 05       	cpc	r21, r1
    158c:	68 f5       	brcc	.+90     	; 0x15e8 <moveSetX+0xe2>
			break;
		lcd_print(2,9,3,1);
    158e:	82 e0       	ldi	r24, 0x02	; 2
    1590:	69 e0       	ldi	r22, 0x09	; 9
    1592:	43 e0       	ldi	r20, 0x03	; 3
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	21 e0       	ldi	r18, 0x01	; 1
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
		djFlag = printNsetDJ();
    159e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <printNsetDJ>
		switch (djFlag) {
    15a2:	8b 30       	cpi	r24, 0x0B	; 11
    15a4:	91 05       	cpc	r25, r1
    15a6:	b1 f0       	breq	.+44     	; 0x15d4 <moveSetX+0xce>
    15a8:	8c 30       	cpi	r24, 0x0C	; 12
    15aa:	91 05       	cpc	r25, r1
    15ac:	4c f4       	brge	.+18     	; 0x15c0 <moveSetX+0xba>
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	91 05       	cpc	r25, r1
    15b2:	81 f0       	breq	.+32     	; 0x15d4 <moveSetX+0xce>
    15b4:	8a 30       	cpi	r24, 0x0A	; 10
    15b6:	91 05       	cpc	r25, r1
    15b8:	91 f0       	breq	.+36     	; 0x15de <moveSetX+0xd8>
    15ba:	89 2b       	or	r24, r25
    15bc:	81 f0       	breq	.+32     	; 0x15de <moveSetX+0xd8>
    15be:	ce cf       	rjmp	.-100    	; 0x155c <moveSetX+0x56>
    15c0:	8e 36       	cpi	r24, 0x6E	; 110
    15c2:	91 05       	cpc	r25, r1
    15c4:	51 f0       	breq	.+20     	; 0x15da <moveSetX+0xd4>
    15c6:	8f 36       	cpi	r24, 0x6F	; 111
    15c8:	91 05       	cpc	r25, r1
    15ca:	49 f0       	breq	.+18     	; 0x15de <moveSetX+0xd8>
    15cc:	84 36       	cpi	r24, 0x64	; 100
    15ce:	91 05       	cpc	r25, r1
    15d0:	29 f6       	brne	.-118    	; 0x155c <moveSetX+0x56>
    15d2:	03 c0       	rjmp	.+6      	; 0x15da <moveSetX+0xd4>
			case 11:
			case 1:
				velocity(AVG_VEL,0);
    15d4:	88 ec       	ldi	r24, 0xC8	; 200
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	04 c0       	rjmp	.+8      	; 0x15e2 <moveSetX+0xdc>
				break;
			case 110:
			case 100:
				velocity(0,AVG_VEL);
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	01 c0       	rjmp	.+2      	; 0x15e0 <moveSetX+0xda>
				break;
			case 111:
			case 0:
			case 10:
				velocity(MAX_VEL,MAX_VEL);
    15de:	88 ec       	ldi	r24, 0xC8	; 200
    15e0:	68 ec       	ldi	r22, 0xC8	; 200
    15e2:	0e 94 8d 03 	call	0x71a	; 0x71a <velocity>
    15e6:	ba cf       	rjmp	.-140    	; 0x155c <moveSetX+0x56>
		}
	}
	velocity(MAX_VEL,MAX_VEL);
    15e8:	88 ec       	ldi	r24, 0xC8	; 200
    15ea:	68 ec       	ldi	r22, 0xC8	; 200
    15ec:	0e 94 8d 03 	call	0x71a	; 0x71a <velocity>
	lcd_print(2,9,3,1);
    15f0:	82 e0       	ldi	r24, 0x02	; 2
    15f2:	69 e0       	ldi	r22, 0x09	; 9
    15f4:	43 e0       	ldi	r20, 0x03	; 3
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	21 e0       	ldi	r18, 0x01	; 1
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1600:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1602:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1604:	82 b9       	out	0x02, r24	; 2
    1606:	88 e8       	ldi	r24, 0x88	; 136
    1608:	93 e1       	ldi	r25, 0x13	; 19
    160a:	20 e7       	ldi	r18, 0x70	; 112
    160c:	31 e0       	ldi	r19, 0x01	; 1
    160e:	f9 01       	movw	r30, r18
    1610:	31 97       	sbiw	r30, 0x01	; 1
    1612:	f1 f7       	brne	.-4      	; 0x1610 <moveSetX+0x10a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1616:	d9 f7       	brne	.-10     	; 0x160e <moveSetX+0x108>
	stop();
	_delay_ms(500);
	//forward();
	if (x>0) right_degrees(x);
    1618:	10 16       	cp	r1, r16
    161a:	11 06       	cpc	r1, r17
    161c:	24 f4       	brge	.+8      	; 0x1626 <moveSetX+0x120>
    161e:	c8 01       	movw	r24, r16
    1620:	0e 94 4f 03 	call	0x69e	; 0x69e <right_degrees>
    1624:	09 c0       	rjmp	.+18     	; 0x1638 <moveSetX+0x132>
	else if (x<0) left_degrees(-x);
    1626:	01 15       	cp	r16, r1
    1628:	11 05       	cpc	r17, r1
    162a:	31 f0       	breq	.+12     	; 0x1638 <moveSetX+0x132>
    162c:	88 27       	eor	r24, r24
    162e:	99 27       	eor	r25, r25
    1630:	80 1b       	sub	r24, r16
    1632:	91 0b       	sbc	r25, r17
    1634:	0e 94 48 03 	call	0x690	; 0x690 <left_degrees>
	do {
		djFlag = printNsetDJ();
    1638:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <printNsetDJ>
    163c:	ec 01       	movw	r28, r24
		if (x>0) right_degrees(5);
    163e:	10 16       	cp	r1, r16
    1640:	11 06       	cpc	r1, r17
    1642:	2c f4       	brge	.+10     	; 0x164e <moveSetX+0x148>
    1644:	85 e0       	ldi	r24, 0x05	; 5
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 4f 03 	call	0x69e	; 0x69e <right_degrees>
    164c:	3b c0       	rjmp	.+118    	; 0x16c4 <moveSetX+0x1be>
		else if (x<0) left_degrees(5);
    164e:	01 15       	cp	r16, r1
    1650:	11 05       	cpc	r17, r1
    1652:	29 f0       	breq	.+10     	; 0x165e <moveSetX+0x158>
    1654:	85 e0       	ldi	r24, 0x05	; 5
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 48 03 	call	0x690	; 0x690 <left_degrees>
    165c:	33 c0       	rjmp	.+102    	; 0x16c4 <moveSetX+0x1be>
		else {
			lcd_print(2,9,4,1);
    165e:	82 e0       	ldi	r24, 0x02	; 2
    1660:	69 e0       	ldi	r22, 0x09	; 9
    1662:	44 e0       	ldi	r20, 0x04	; 4
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	21 e0       	ldi	r18, 0x01	; 1
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    166e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1670:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1672:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1674:	82 b9       	out	0x02, r24	; 2
			forward();
			velocity(MAX_VEL,MAX_VEL);
    1676:	88 ec       	ldi	r24, 0xC8	; 200
    1678:	68 ec       	ldi	r22, 0xC8	; 200
    167a:	0e 94 8d 03 	call	0x71a	; 0x71a <velocity>
			switch (djFlag) {
    167e:	cb 30       	cpi	r28, 0x0B	; 11
    1680:	d1 05       	cpc	r29, r1
    1682:	71 f0       	breq	.+28     	; 0x16a0 <moveSetX+0x19a>
    1684:	cc 30       	cpi	r28, 0x0C	; 12
    1686:	d1 05       	cpc	r29, r1
    1688:	24 f4       	brge	.+8      	; 0x1692 <moveSetX+0x18c>
    168a:	c1 30       	cpi	r28, 0x01	; 1
    168c:	d1 05       	cpc	r29, r1
    168e:	79 f4       	brne	.+30     	; 0x16ae <moveSetX+0x1a8>
    1690:	07 c0       	rjmp	.+14     	; 0x16a0 <moveSetX+0x19a>
    1692:	c4 36       	cpi	r28, 0x64	; 100
    1694:	d1 05       	cpc	r29, r1
    1696:	39 f0       	breq	.+14     	; 0x16a6 <moveSetX+0x1a0>
    1698:	ce 36       	cpi	r28, 0x6E	; 110
    169a:	d1 05       	cpc	r29, r1
    169c:	41 f4       	brne	.+16     	; 0x16ae <moveSetX+0x1a8>
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <moveSetX+0x1a0>
			case 11:
			case 1:
				velocity(AVG_VEL,0);
    16a0:	88 ec       	ldi	r24, 0xC8	; 200
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <moveSetX+0x1a4>
				break;
			case 110:
			case 100:
				velocity(0,AVG_VEL);
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	68 ec       	ldi	r22, 0xC8	; 200
    16aa:	0e 94 8d 03 	call	0x71a	; 0x71a <velocity>
				break;
			}
			lcd_print(2,9,5,1);
    16ae:	82 e0       	ldi	r24, 0x02	; 2
    16b0:	69 e0       	ldi	r22, 0x09	; 9
    16b2:	45 e0       	ldi	r20, 0x05	; 5
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	21 e0       	ldi	r18, 0x01	; 1
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    16be:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    16c0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    16c2:	82 b9       	out	0x02, r24	; 2
			stop();
		}
	} while ( ((djFlag/10)%10) !=1 );
    16c4:	ce 01       	movw	r24, r28
    16c6:	6a e0       	ldi	r22, 0x0A	; 10
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	0e 94 12 12 	call	0x2424	; 0x2424 <__divmodhi4>
    16ce:	cb 01       	movw	r24, r22
    16d0:	6a e0       	ldi	r22, 0x0A	; 10
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	0e 94 12 12 	call	0x2424	; 0x2424 <__divmodhi4>
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	09 f0       	breq	.+2      	; 0x16de <moveSetX+0x1d8>
    16dc:	ad cf       	rjmp	.-166    	; 0x1638 <moveSetX+0x132>
	velocity(MAX_VEL,MAX_VEL);
    16de:	88 ec       	ldi	r24, 0xC8	; 200
    16e0:	68 ec       	ldi	r22, 0xC8	; 200
    16e2:	0e 94 8d 03 	call	0x71a	; 0x71a <velocity>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    16e6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    16e8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    16ea:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    16ec:	82 b9       	out	0x02, r24	; 2
	forward();
	lcd_print(2,9,6,1);
    16ee:	82 e0       	ldi	r24, 0x02	; 2
    16f0:	69 e0       	ldi	r22, 0x09	; 9
    16f2:	46 e0       	ldi	r20, 0x06	; 6
    16f4:	50 e0       	ldi	r21, 0x00	; 0
    16f6:	21 e0       	ldi	r18, 0x01	; 1
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
}
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	08 95       	ret

00001708 <main>:

int main(void)
{
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
	int djFlag;
	init_devices();
    1710:	0e 94 bd 03 	call	0x77a	; 0x77a <init_devices>
	lcd_set_4bit();
    1714:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
    1718:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init>
	mainFun(1,31);
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	6f e1       	ldi	r22, 0x1F	; 31
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	0e 94 12 06 	call	0xc24	; 0xc24 <mainFun>
	velocity(MAX_VEL,MAX_VEL);    // Set the speed to max velocity
    1728:	88 ec       	ldi	r24, 0xC8	; 200
    172a:	68 ec       	ldi	r22, 0xC8	; 200
    172c:	0e 94 8d 03 	call	0x71a	; 0x71a <velocity>
	for (i = 0; i < pathLen; i+=2) {	
    1730:	10 92 1f 08 	sts	0x081F, r1
    1734:	10 92 1e 08 	sts	0x081E, r1
    1738:	00 e7       	ldi	r16, 0x70	; 112
    173a:	11 e0       	ldi	r17, 0x01	; 1
    173c:	cd c0       	rjmp	.+410    	; 0x18d8 <main+0x1d0>
		if ( i == pathLen-1 ) {
    173e:	80 91 28 08 	lds	r24, 0x0828
    1742:	90 91 29 08 	lds	r25, 0x0829
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	e8 17       	cp	r30, r24
    174a:	f9 07       	cpc	r31, r25
    174c:	39 f5       	brne	.+78     	; 0x179c <main+0x94>
			while (1) {
				djFlag = printNsetDJ();
    174e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <printNsetDJ>
				if (djFlag == 11 || djFlag == 110 || djFlag==111) break;
    1752:	8b 30       	cpi	r24, 0x0B	; 11
    1754:	91 05       	cpc	r25, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <main+0x52>
    1758:	cb c0       	rjmp	.+406    	; 0x18f0 <main+0x1e8>
    175a:	8e 36       	cpi	r24, 0x6E	; 110
    175c:	91 05       	cpc	r25, r1
    175e:	09 f4       	brne	.+2      	; 0x1762 <main+0x5a>
    1760:	c7 c0       	rjmp	.+398    	; 0x18f0 <main+0x1e8>
    1762:	8f 36       	cpi	r24, 0x6F	; 111
    1764:	91 05       	cpc	r25, r1
    1766:	09 f4       	brne	.+2      	; 0x176a <main+0x62>
    1768:	c3 c0       	rjmp	.+390    	; 0x18f0 <main+0x1e8>
				switch(djFlag) {
    176a:	8a 30       	cpi	r24, 0x0A	; 10
    176c:	91 05       	cpc	r25, r1
    176e:	41 f0       	breq	.+16     	; 0x1780 <main+0x78>
    1770:	84 36       	cpi	r24, 0x64	; 100
    1772:	91 05       	cpc	r25, r1
    1774:	71 f0       	breq	.+28     	; 0x1792 <main+0x8a>
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	51 f7       	brne	.-44     	; 0x174e <main+0x46>
					case 1:
						//Go right
						velocity(AVG_VEL,0);    // Run robot right wheel at max velocity and left wheel 
    177a:	88 ec       	ldi	r24, 0xC8	; 200
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	0b c0       	rjmp	.+22     	; 0x1796 <main+0x8e>
						break;

					case 10:
						//Go straight
						velocity(MAX_VEL,MAX_VEL); 
    1780:	88 ec       	ldi	r24, 0xC8	; 200
    1782:	68 ec       	ldi	r22, 0xC8	; 200
    1784:	0e 94 8d 03 	call	0x71a	; 0x71a <velocity>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1788:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    178a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    178c:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    178e:	82 b9       	out	0x02, r24	; 2
    1790:	de cf       	rjmp	.-68     	; 0x174e <main+0x46>
						forward();     // Run robot at max velocity 
						break;

					case 100:
						//Go left
						velocity(0,AVG_VEL);   // Run robot left wheel at max velocity and right wheel 
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	68 ec       	ldi	r22, 0xC8	; 200
    1796:	0e 94 8d 03 	call	0x71a	; 0x71a <velocity>
    179a:	d9 cf       	rjmp	.-78     	; 0x174e <main+0x46>
						break;
				}
			}
			break;
		}
		lcd_print(1,5,path[i],3);
    179c:	ee 0f       	add	r30, r30
    179e:	ff 1f       	adc	r31, r31
    17a0:	ef 5a       	subi	r30, 0xAF	; 175
    17a2:	fa 4f       	sbci	r31, 0xFA	; 250
    17a4:	40 81       	ld	r20, Z
    17a6:	51 81       	ldd	r21, Z+1	; 0x01
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	65 e0       	ldi	r22, 0x05	; 5
    17ac:	23 e0       	ldi	r18, 0x03	; 3
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
		lcd_print(1,9,path[i+1],3);
    17b4:	e0 91 1e 08 	lds	r30, 0x081E
    17b8:	f0 91 1f 08 	lds	r31, 0x081F
    17bc:	ee 0f       	add	r30, r30
    17be:	ff 1f       	adc	r31, r31
    17c0:	ed 5a       	subi	r30, 0xAD	; 173
    17c2:	fa 4f       	sbci	r31, 0xFA	; 250
    17c4:	40 81       	ld	r20, Z
    17c6:	51 81       	ldd	r21, Z+1	; 0x01
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	69 e0       	ldi	r22, 0x09	; 9
    17cc:	23 e0       	ldi	r18, 0x03	; 3
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    17d4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    17d6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    17d8:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    17da:	82 b9       	out	0x02, r24	; 2
		forward();
		while(1)
		{			
			lcd_print(2,9,1,1);
    17dc:	82 e0       	ldi	r24, 0x02	; 2
    17de:	69 e0       	ldi	r22, 0x09	; 9
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	21 e0       	ldi	r18, 0x01	; 1
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
			djFlag = printNsetDJ();
    17ec:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <printNsetDJ>
    17f0:	ec 01       	movw	r28, r24
			switch(djFlag) {
    17f2:	8b 30       	cpi	r24, 0x0B	; 11
    17f4:	91 05       	cpc	r25, r1
    17f6:	a1 f0       	breq	.+40     	; 0x1820 <main+0x118>
    17f8:	8c 30       	cpi	r24, 0x0C	; 12
    17fa:	91 05       	cpc	r25, r1
    17fc:	3c f4       	brge	.+14     	; 0x180c <main+0x104>
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	91 05       	cpc	r25, r1
    1802:	51 f1       	breq	.+84     	; 0x1858 <main+0x150>
    1804:	8a 30       	cpi	r24, 0x0A	; 10
    1806:	91 05       	cpc	r25, r1
    1808:	b9 f5       	brne	.+110    	; 0x1878 <main+0x170>
    180a:	29 c0       	rjmp	.+82     	; 0x185e <main+0x156>
    180c:	84 36       	cpi	r24, 0x64	; 100
    180e:	91 05       	cpc	r25, r1
    1810:	79 f1       	breq	.+94     	; 0x1870 <main+0x168>
    1812:	84 36       	cpi	r24, 0x64	; 100
    1814:	91 05       	cpc	r25, r1
    1816:	84 f1       	brlt	.+96     	; 0x1878 <main+0x170>
    1818:	8e 56       	subi	r24, 0x6E	; 110
    181a:	90 40       	sbci	r25, 0x00	; 0
    181c:	02 97       	sbiw	r24, 0x02	; 2
    181e:	60 f5       	brcc	.+88     	; 0x1878 <main+0x170>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1820:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1822:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1824:	82 b9       	out	0x02, r24	; 2
    1826:	88 e8       	ldi	r24, 0x88	; 136
    1828:	93 e1       	ldi	r25, 0x13	; 19
    182a:	f8 01       	movw	r30, r16
    182c:	31 97       	sbiw	r30, 0x01	; 1
    182e:	f1 f7       	brne	.-4      	; 0x182c <main+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1830:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1832:	d9 f7       	brne	.-10     	; 0x182a <main+0x122>
				case 11:
				case 110:
				case 111:
					stop();
					_delay_ms(500);
					moveSetX(path[i+1]/3);
    1834:	e0 91 1e 08 	lds	r30, 0x081E
    1838:	f0 91 1f 08 	lds	r31, 0x081F
    183c:	ee 0f       	add	r30, r30
    183e:	ff 1f       	adc	r31, r31
    1840:	ed 5a       	subi	r30, 0xAD	; 173
    1842:	fa 4f       	sbci	r31, 0xFA	; 250
    1844:	80 81       	ld	r24, Z
    1846:	91 81       	ldd	r25, Z+1	; 0x01
    1848:	63 e0       	ldi	r22, 0x03	; 3
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	0e 94 12 12 	call	0x2424	; 0x2424 <__divmodhi4>
    1850:	cb 01       	movw	r24, r22
    1852:	0e 94 83 0a 	call	0x1506	; 0x1506 <moveSetX>
    1856:	10 c0       	rjmp	.+32     	; 0x1878 <main+0x170>
					else moveSetX(0);*/
					break;

				case 1:
					//Go right
					velocity(AVG_VEL,0);    // Run robot right wheel at max velocity and left wheel 
    1858:	88 ec       	ldi	r24, 0xC8	; 200
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	0b c0       	rjmp	.+22     	; 0x1874 <main+0x16c>
					break;

				case 10:
					//Go straight
					velocity(MAX_VEL,MAX_VEL); 
    185e:	88 ec       	ldi	r24, 0xC8	; 200
    1860:	68 ec       	ldi	r22, 0xC8	; 200
    1862:	0e 94 8d 03 	call	0x71a	; 0x71a <velocity>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1866:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1868:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    186a:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    186c:	82 b9       	out	0x02, r24	; 2
    186e:	04 c0       	rjmp	.+8      	; 0x1878 <main+0x170>
					forward();     // Run robot at max velocity 
					break;

				case 100:
					//Go left
					velocity(0,AVG_VEL);   // Run robot left wheel at max velocity and right wheel 
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	68 ec       	ldi	r22, 0xC8	; 200
    1874:	0e 94 8d 03 	call	0x71a	; 0x71a <velocity>
					break;
			}
			lcd_print(2,9,7,1);
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	69 e0       	ldi	r22, 0x09	; 9
    187c:	47 e0       	ldi	r20, 0x07	; 7
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	21 e0       	ldi	r18, 0x01	; 1
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
			if (djFlag==11 || djFlag==110 || djFlag==111) {
    1888:	cb 30       	cpi	r28, 0x0B	; 11
    188a:	d1 05       	cpc	r29, r1
    188c:	31 f0       	breq	.+12     	; 0x189a <main+0x192>
    188e:	ce 36       	cpi	r28, 0x6E	; 110
    1890:	d1 05       	cpc	r29, r1
    1892:	19 f0       	breq	.+6      	; 0x189a <main+0x192>
    1894:	cf 36       	cpi	r28, 0x6F	; 111
    1896:	d1 05       	cpc	r29, r1
    1898:	b1 f4       	brne	.+44     	; 0x18c6 <main+0x1be>
				lcd_print(2,9,8,1);
    189a:	82 e0       	ldi	r24, 0x02	; 2
    189c:	69 e0       	ldi	r22, 0x09	; 9
    189e:	48 e0       	ldi	r20, 0x08	; 8
    18a0:	50 e0       	ldi	r21, 0x00	; 0
    18a2:	21 e0       	ldi	r18, 0x01	; 1
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    18aa:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    18ac:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    18ae:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    18b0:	82 b9       	out	0x02, r24	; 2
	init_devices();
	lcd_set_4bit();
	lcd_init();
	mainFun(1,31);
	velocity(MAX_VEL,MAX_VEL);    // Set the speed to max velocity
	for (i = 0; i < pathLen; i+=2) {	
    18b2:	80 91 1e 08 	lds	r24, 0x081E
    18b6:	90 91 1f 08 	lds	r25, 0x081F
    18ba:	02 96       	adiw	r24, 0x02	; 2
    18bc:	90 93 1f 08 	sts	0x081F, r25
    18c0:	80 93 1e 08 	sts	0x081E, r24
    18c4:	09 c0       	rjmp	.+18     	; 0x18d8 <main+0x1d0>
			if (djFlag==11 || djFlag==110 || djFlag==111) {
				lcd_print(2,9,8,1);
				forward();
				break;
			}
			lcd_print(2,9,9,1);
    18c6:	82 e0       	ldi	r24, 0x02	; 2
    18c8:	69 e0       	ldi	r22, 0x09	; 9
    18ca:	49 e0       	ldi	r20, 0x09	; 9
    18cc:	50 e0       	ldi	r21, 0x00	; 0
    18ce:	21 e0       	ldi	r18, 0x01	; 1
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
    18d6:	82 cf       	rjmp	.-252    	; 0x17dc <main+0xd4>
	init_devices();
	lcd_set_4bit();
	lcd_init();
	mainFun(1,31);
	velocity(MAX_VEL,MAX_VEL);    // Set the speed to max velocity
	for (i = 0; i < pathLen; i+=2) {	
    18d8:	e0 91 1e 08 	lds	r30, 0x081E
    18dc:	f0 91 1f 08 	lds	r31, 0x081F
    18e0:	80 91 28 08 	lds	r24, 0x0828
    18e4:	90 91 29 08 	lds	r25, 0x0829
    18e8:	e8 17       	cp	r30, r24
    18ea:	f9 07       	cpc	r31, r25
    18ec:	0c f4       	brge	.+2      	; 0x18f0 <main+0x1e8>
    18ee:	27 cf       	rjmp	.-434    	; 0x173e <main+0x36>
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;
 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    18f0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    18f2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    18f4:	82 b9       	out	0x02, r24	; 2
			}
			lcd_print(2,9,9,1);
		}
	}
	stop();
	lcd_print(2,9,10,2);
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	69 e0       	ldi	r22, 0x09	; 9
    18fa:	4a e0       	ldi	r20, 0x0A	; 10
    18fc:	50 e0       	ldi	r21, 0x00	; 0
    18fe:	22 e0       	ldi	r18, 0x02	; 2
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
}
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	08 95       	ret

00001914 <__fixunssfsi>:
    1914:	ef 92       	push	r14
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	7b 01       	movw	r14, r22
    191e:	8c 01       	movw	r16, r24
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	5f e4       	ldi	r21, 0x4F	; 79
    1928:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__gesf2>
    192c:	88 23       	and	r24, r24
    192e:	8c f0       	brlt	.+34     	; 0x1952 <__fixunssfsi+0x3e>
    1930:	c8 01       	movw	r24, r16
    1932:	b7 01       	movw	r22, r14
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	5f e4       	ldi	r21, 0x4F	; 79
    193c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__subsf3>
    1940:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__fixsfsi>
    1944:	9b 01       	movw	r18, r22
    1946:	ac 01       	movw	r20, r24
    1948:	20 50       	subi	r18, 0x00	; 0
    194a:	30 40       	sbci	r19, 0x00	; 0
    194c:	40 40       	sbci	r20, 0x00	; 0
    194e:	50 48       	sbci	r21, 0x80	; 128
    1950:	06 c0       	rjmp	.+12     	; 0x195e <__fixunssfsi+0x4a>
    1952:	c8 01       	movw	r24, r16
    1954:	b7 01       	movw	r22, r14
    1956:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__fixsfsi>
    195a:	9b 01       	movw	r18, r22
    195c:	ac 01       	movw	r20, r24
    195e:	b9 01       	movw	r22, r18
    1960:	ca 01       	movw	r24, r20
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	ff 90       	pop	r15
    1968:	ef 90       	pop	r14
    196a:	08 95       	ret

0000196c <_fpadd_parts>:
    196c:	a0 e0       	ldi	r26, 0x00	; 0
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ec eb       	ldi	r30, 0xBC	; 188
    1972:	fc e0       	ldi	r31, 0x0C	; 12
    1974:	0c 94 25 12 	jmp	0x244a	; 0x244a <__prologue_saves__>
    1978:	dc 01       	movw	r26, r24
    197a:	2b 01       	movw	r4, r22
    197c:	fa 01       	movw	r30, r20
    197e:	9c 91       	ld	r25, X
    1980:	92 30       	cpi	r25, 0x02	; 2
    1982:	08 f4       	brcc	.+2      	; 0x1986 <_fpadd_parts+0x1a>
    1984:	39 c1       	rjmp	.+626    	; 0x1bf8 <_fpadd_parts+0x28c>
    1986:	eb 01       	movw	r28, r22
    1988:	88 81       	ld	r24, Y
    198a:	82 30       	cpi	r24, 0x02	; 2
    198c:	08 f4       	brcc	.+2      	; 0x1990 <_fpadd_parts+0x24>
    198e:	33 c1       	rjmp	.+614    	; 0x1bf6 <_fpadd_parts+0x28a>
    1990:	94 30       	cpi	r25, 0x04	; 4
    1992:	69 f4       	brne	.+26     	; 0x19ae <_fpadd_parts+0x42>
    1994:	84 30       	cpi	r24, 0x04	; 4
    1996:	09 f0       	breq	.+2      	; 0x199a <_fpadd_parts+0x2e>
    1998:	2f c1       	rjmp	.+606    	; 0x1bf8 <_fpadd_parts+0x28c>
    199a:	11 96       	adiw	r26, 0x01	; 1
    199c:	9c 91       	ld	r25, X
    199e:	11 97       	sbiw	r26, 0x01	; 1
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	98 17       	cp	r25, r24
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <_fpadd_parts+0x3c>
    19a6:	28 c1       	rjmp	.+592    	; 0x1bf8 <_fpadd_parts+0x28c>
    19a8:	ae e3       	ldi	r26, 0x3E	; 62
    19aa:	b4 e0       	ldi	r27, 0x04	; 4
    19ac:	25 c1       	rjmp	.+586    	; 0x1bf8 <_fpadd_parts+0x28c>
    19ae:	84 30       	cpi	r24, 0x04	; 4
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <_fpadd_parts+0x48>
    19b2:	21 c1       	rjmp	.+578    	; 0x1bf6 <_fpadd_parts+0x28a>
    19b4:	82 30       	cpi	r24, 0x02	; 2
    19b6:	a9 f4       	brne	.+42     	; 0x19e2 <_fpadd_parts+0x76>
    19b8:	92 30       	cpi	r25, 0x02	; 2
    19ba:	09 f0       	breq	.+2      	; 0x19be <_fpadd_parts+0x52>
    19bc:	1d c1       	rjmp	.+570    	; 0x1bf8 <_fpadd_parts+0x28c>
    19be:	9a 01       	movw	r18, r20
    19c0:	ad 01       	movw	r20, r26
    19c2:	88 e0       	ldi	r24, 0x08	; 8
    19c4:	ea 01       	movw	r28, r20
    19c6:	09 90       	ld	r0, Y+
    19c8:	ae 01       	movw	r20, r28
    19ca:	e9 01       	movw	r28, r18
    19cc:	09 92       	st	Y+, r0
    19ce:	9e 01       	movw	r18, r28
    19d0:	81 50       	subi	r24, 0x01	; 1
    19d2:	c1 f7       	brne	.-16     	; 0x19c4 <_fpadd_parts+0x58>
    19d4:	e2 01       	movw	r28, r4
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	11 96       	adiw	r26, 0x01	; 1
    19da:	9c 91       	ld	r25, X
    19dc:	89 23       	and	r24, r25
    19de:	81 83       	std	Z+1, r24	; 0x01
    19e0:	08 c1       	rjmp	.+528    	; 0x1bf2 <_fpadd_parts+0x286>
    19e2:	92 30       	cpi	r25, 0x02	; 2
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <_fpadd_parts+0x7c>
    19e6:	07 c1       	rjmp	.+526    	; 0x1bf6 <_fpadd_parts+0x28a>
    19e8:	12 96       	adiw	r26, 0x02	; 2
    19ea:	2d 90       	ld	r2, X+
    19ec:	3c 90       	ld	r3, X
    19ee:	13 97       	sbiw	r26, 0x03	; 3
    19f0:	eb 01       	movw	r28, r22
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	9b 81       	ldd	r25, Y+3	; 0x03
    19f6:	14 96       	adiw	r26, 0x04	; 4
    19f8:	ad 90       	ld	r10, X+
    19fa:	bd 90       	ld	r11, X+
    19fc:	cd 90       	ld	r12, X+
    19fe:	dc 90       	ld	r13, X
    1a00:	17 97       	sbiw	r26, 0x07	; 7
    1a02:	ec 80       	ldd	r14, Y+4	; 0x04
    1a04:	fd 80       	ldd	r15, Y+5	; 0x05
    1a06:	0e 81       	ldd	r16, Y+6	; 0x06
    1a08:	1f 81       	ldd	r17, Y+7	; 0x07
    1a0a:	91 01       	movw	r18, r2
    1a0c:	28 1b       	sub	r18, r24
    1a0e:	39 0b       	sbc	r19, r25
    1a10:	b9 01       	movw	r22, r18
    1a12:	37 ff       	sbrs	r19, 7
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <_fpadd_parts+0xb2>
    1a16:	66 27       	eor	r22, r22
    1a18:	77 27       	eor	r23, r23
    1a1a:	62 1b       	sub	r22, r18
    1a1c:	73 0b       	sbc	r23, r19
    1a1e:	60 32       	cpi	r22, 0x20	; 32
    1a20:	71 05       	cpc	r23, r1
    1a22:	0c f0       	brlt	.+2      	; 0x1a26 <_fpadd_parts+0xba>
    1a24:	61 c0       	rjmp	.+194    	; 0x1ae8 <_fpadd_parts+0x17c>
    1a26:	12 16       	cp	r1, r18
    1a28:	13 06       	cpc	r1, r19
    1a2a:	6c f5       	brge	.+90     	; 0x1a86 <_fpadd_parts+0x11a>
    1a2c:	37 01       	movw	r6, r14
    1a2e:	48 01       	movw	r8, r16
    1a30:	06 2e       	mov	r0, r22
    1a32:	04 c0       	rjmp	.+8      	; 0x1a3c <_fpadd_parts+0xd0>
    1a34:	96 94       	lsr	r9
    1a36:	87 94       	ror	r8
    1a38:	77 94       	ror	r7
    1a3a:	67 94       	ror	r6
    1a3c:	0a 94       	dec	r0
    1a3e:	d2 f7       	brpl	.-12     	; 0x1a34 <_fpadd_parts+0xc8>
    1a40:	21 e0       	ldi	r18, 0x01	; 1
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <_fpadd_parts+0xe6>
    1a4a:	22 0f       	add	r18, r18
    1a4c:	33 1f       	adc	r19, r19
    1a4e:	44 1f       	adc	r20, r20
    1a50:	55 1f       	adc	r21, r21
    1a52:	6a 95       	dec	r22
    1a54:	d2 f7       	brpl	.-12     	; 0x1a4a <_fpadd_parts+0xde>
    1a56:	21 50       	subi	r18, 0x01	; 1
    1a58:	30 40       	sbci	r19, 0x00	; 0
    1a5a:	40 40       	sbci	r20, 0x00	; 0
    1a5c:	50 40       	sbci	r21, 0x00	; 0
    1a5e:	2e 21       	and	r18, r14
    1a60:	3f 21       	and	r19, r15
    1a62:	40 23       	and	r20, r16
    1a64:	51 23       	and	r21, r17
    1a66:	21 15       	cp	r18, r1
    1a68:	31 05       	cpc	r19, r1
    1a6a:	41 05       	cpc	r20, r1
    1a6c:	51 05       	cpc	r21, r1
    1a6e:	21 f0       	breq	.+8      	; 0x1a78 <_fpadd_parts+0x10c>
    1a70:	21 e0       	ldi	r18, 0x01	; 1
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	50 e0       	ldi	r21, 0x00	; 0
    1a78:	79 01       	movw	r14, r18
    1a7a:	8a 01       	movw	r16, r20
    1a7c:	e6 28       	or	r14, r6
    1a7e:	f7 28       	or	r15, r7
    1a80:	08 29       	or	r16, r8
    1a82:	19 29       	or	r17, r9
    1a84:	3c c0       	rjmp	.+120    	; 0x1afe <_fpadd_parts+0x192>
    1a86:	23 2b       	or	r18, r19
    1a88:	d1 f1       	breq	.+116    	; 0x1afe <_fpadd_parts+0x192>
    1a8a:	26 0e       	add	r2, r22
    1a8c:	37 1e       	adc	r3, r23
    1a8e:	35 01       	movw	r6, r10
    1a90:	46 01       	movw	r8, r12
    1a92:	06 2e       	mov	r0, r22
    1a94:	04 c0       	rjmp	.+8      	; 0x1a9e <_fpadd_parts+0x132>
    1a96:	96 94       	lsr	r9
    1a98:	87 94       	ror	r8
    1a9a:	77 94       	ror	r7
    1a9c:	67 94       	ror	r6
    1a9e:	0a 94       	dec	r0
    1aa0:	d2 f7       	brpl	.-12     	; 0x1a96 <_fpadd_parts+0x12a>
    1aa2:	21 e0       	ldi	r18, 0x01	; 1
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e0       	ldi	r20, 0x00	; 0
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	04 c0       	rjmp	.+8      	; 0x1ab4 <_fpadd_parts+0x148>
    1aac:	22 0f       	add	r18, r18
    1aae:	33 1f       	adc	r19, r19
    1ab0:	44 1f       	adc	r20, r20
    1ab2:	55 1f       	adc	r21, r21
    1ab4:	6a 95       	dec	r22
    1ab6:	d2 f7       	brpl	.-12     	; 0x1aac <_fpadd_parts+0x140>
    1ab8:	21 50       	subi	r18, 0x01	; 1
    1aba:	30 40       	sbci	r19, 0x00	; 0
    1abc:	40 40       	sbci	r20, 0x00	; 0
    1abe:	50 40       	sbci	r21, 0x00	; 0
    1ac0:	2a 21       	and	r18, r10
    1ac2:	3b 21       	and	r19, r11
    1ac4:	4c 21       	and	r20, r12
    1ac6:	5d 21       	and	r21, r13
    1ac8:	21 15       	cp	r18, r1
    1aca:	31 05       	cpc	r19, r1
    1acc:	41 05       	cpc	r20, r1
    1ace:	51 05       	cpc	r21, r1
    1ad0:	21 f0       	breq	.+8      	; 0x1ada <_fpadd_parts+0x16e>
    1ad2:	21 e0       	ldi	r18, 0x01	; 1
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e0       	ldi	r20, 0x00	; 0
    1ad8:	50 e0       	ldi	r21, 0x00	; 0
    1ada:	59 01       	movw	r10, r18
    1adc:	6a 01       	movw	r12, r20
    1ade:	a6 28       	or	r10, r6
    1ae0:	b7 28       	or	r11, r7
    1ae2:	c8 28       	or	r12, r8
    1ae4:	d9 28       	or	r13, r9
    1ae6:	0b c0       	rjmp	.+22     	; 0x1afe <_fpadd_parts+0x192>
    1ae8:	82 15       	cp	r24, r2
    1aea:	93 05       	cpc	r25, r3
    1aec:	2c f0       	brlt	.+10     	; 0x1af8 <_fpadd_parts+0x18c>
    1aee:	1c 01       	movw	r2, r24
    1af0:	aa 24       	eor	r10, r10
    1af2:	bb 24       	eor	r11, r11
    1af4:	65 01       	movw	r12, r10
    1af6:	03 c0       	rjmp	.+6      	; 0x1afe <_fpadd_parts+0x192>
    1af8:	ee 24       	eor	r14, r14
    1afa:	ff 24       	eor	r15, r15
    1afc:	87 01       	movw	r16, r14
    1afe:	11 96       	adiw	r26, 0x01	; 1
    1b00:	9c 91       	ld	r25, X
    1b02:	d2 01       	movw	r26, r4
    1b04:	11 96       	adiw	r26, 0x01	; 1
    1b06:	8c 91       	ld	r24, X
    1b08:	98 17       	cp	r25, r24
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <_fpadd_parts+0x1a2>
    1b0c:	45 c0       	rjmp	.+138    	; 0x1b98 <_fpadd_parts+0x22c>
    1b0e:	99 23       	and	r25, r25
    1b10:	39 f0       	breq	.+14     	; 0x1b20 <_fpadd_parts+0x1b4>
    1b12:	a8 01       	movw	r20, r16
    1b14:	97 01       	movw	r18, r14
    1b16:	2a 19       	sub	r18, r10
    1b18:	3b 09       	sbc	r19, r11
    1b1a:	4c 09       	sbc	r20, r12
    1b1c:	5d 09       	sbc	r21, r13
    1b1e:	06 c0       	rjmp	.+12     	; 0x1b2c <_fpadd_parts+0x1c0>
    1b20:	a6 01       	movw	r20, r12
    1b22:	95 01       	movw	r18, r10
    1b24:	2e 19       	sub	r18, r14
    1b26:	3f 09       	sbc	r19, r15
    1b28:	40 0b       	sbc	r20, r16
    1b2a:	51 0b       	sbc	r21, r17
    1b2c:	57 fd       	sbrc	r21, 7
    1b2e:	08 c0       	rjmp	.+16     	; 0x1b40 <_fpadd_parts+0x1d4>
    1b30:	11 82       	std	Z+1, r1	; 0x01
    1b32:	33 82       	std	Z+3, r3	; 0x03
    1b34:	22 82       	std	Z+2, r2	; 0x02
    1b36:	24 83       	std	Z+4, r18	; 0x04
    1b38:	35 83       	std	Z+5, r19	; 0x05
    1b3a:	46 83       	std	Z+6, r20	; 0x06
    1b3c:	57 83       	std	Z+7, r21	; 0x07
    1b3e:	1d c0       	rjmp	.+58     	; 0x1b7a <_fpadd_parts+0x20e>
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	81 83       	std	Z+1, r24	; 0x01
    1b44:	33 82       	std	Z+3, r3	; 0x03
    1b46:	22 82       	std	Z+2, r2	; 0x02
    1b48:	88 27       	eor	r24, r24
    1b4a:	99 27       	eor	r25, r25
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	82 1b       	sub	r24, r18
    1b50:	93 0b       	sbc	r25, r19
    1b52:	a4 0b       	sbc	r26, r20
    1b54:	b5 0b       	sbc	r27, r21
    1b56:	84 83       	std	Z+4, r24	; 0x04
    1b58:	95 83       	std	Z+5, r25	; 0x05
    1b5a:	a6 83       	std	Z+6, r26	; 0x06
    1b5c:	b7 83       	std	Z+7, r27	; 0x07
    1b5e:	0d c0       	rjmp	.+26     	; 0x1b7a <_fpadd_parts+0x20e>
    1b60:	22 0f       	add	r18, r18
    1b62:	33 1f       	adc	r19, r19
    1b64:	44 1f       	adc	r20, r20
    1b66:	55 1f       	adc	r21, r21
    1b68:	24 83       	std	Z+4, r18	; 0x04
    1b6a:	35 83       	std	Z+5, r19	; 0x05
    1b6c:	46 83       	std	Z+6, r20	; 0x06
    1b6e:	57 83       	std	Z+7, r21	; 0x07
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	93 83       	std	Z+3, r25	; 0x03
    1b78:	82 83       	std	Z+2, r24	; 0x02
    1b7a:	24 81       	ldd	r18, Z+4	; 0x04
    1b7c:	35 81       	ldd	r19, Z+5	; 0x05
    1b7e:	46 81       	ldd	r20, Z+6	; 0x06
    1b80:	57 81       	ldd	r21, Z+7	; 0x07
    1b82:	da 01       	movw	r26, r20
    1b84:	c9 01       	movw	r24, r18
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	a1 09       	sbc	r26, r1
    1b8a:	b1 09       	sbc	r27, r1
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b90:	af 4f       	sbci	r26, 0xFF	; 255
    1b92:	bf 43       	sbci	r27, 0x3F	; 63
    1b94:	28 f3       	brcs	.-54     	; 0x1b60 <_fpadd_parts+0x1f4>
    1b96:	0b c0       	rjmp	.+22     	; 0x1bae <_fpadd_parts+0x242>
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	33 82       	std	Z+3, r3	; 0x03
    1b9c:	22 82       	std	Z+2, r2	; 0x02
    1b9e:	ea 0c       	add	r14, r10
    1ba0:	fb 1c       	adc	r15, r11
    1ba2:	0c 1d       	adc	r16, r12
    1ba4:	1d 1d       	adc	r17, r13
    1ba6:	e4 82       	std	Z+4, r14	; 0x04
    1ba8:	f5 82       	std	Z+5, r15	; 0x05
    1baa:	06 83       	std	Z+6, r16	; 0x06
    1bac:	17 83       	std	Z+7, r17	; 0x07
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	80 83       	st	Z, r24
    1bb2:	24 81       	ldd	r18, Z+4	; 0x04
    1bb4:	35 81       	ldd	r19, Z+5	; 0x05
    1bb6:	46 81       	ldd	r20, Z+6	; 0x06
    1bb8:	57 81       	ldd	r21, Z+7	; 0x07
    1bba:	57 ff       	sbrs	r21, 7
    1bbc:	1a c0       	rjmp	.+52     	; 0x1bf2 <_fpadd_parts+0x286>
    1bbe:	c9 01       	movw	r24, r18
    1bc0:	aa 27       	eor	r26, r26
    1bc2:	97 fd       	sbrc	r25, 7
    1bc4:	a0 95       	com	r26
    1bc6:	ba 2f       	mov	r27, r26
    1bc8:	81 70       	andi	r24, 0x01	; 1
    1bca:	90 70       	andi	r25, 0x00	; 0
    1bcc:	a0 70       	andi	r26, 0x00	; 0
    1bce:	b0 70       	andi	r27, 0x00	; 0
    1bd0:	56 95       	lsr	r21
    1bd2:	47 95       	ror	r20
    1bd4:	37 95       	ror	r19
    1bd6:	27 95       	ror	r18
    1bd8:	82 2b       	or	r24, r18
    1bda:	93 2b       	or	r25, r19
    1bdc:	a4 2b       	or	r26, r20
    1bde:	b5 2b       	or	r27, r21
    1be0:	84 83       	std	Z+4, r24	; 0x04
    1be2:	95 83       	std	Z+5, r25	; 0x05
    1be4:	a6 83       	std	Z+6, r26	; 0x06
    1be6:	b7 83       	std	Z+7, r27	; 0x07
    1be8:	82 81       	ldd	r24, Z+2	; 0x02
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	01 96       	adiw	r24, 0x01	; 1
    1bee:	93 83       	std	Z+3, r25	; 0x03
    1bf0:	82 83       	std	Z+2, r24	; 0x02
    1bf2:	df 01       	movw	r26, r30
    1bf4:	01 c0       	rjmp	.+2      	; 0x1bf8 <_fpadd_parts+0x28c>
    1bf6:	d2 01       	movw	r26, r4
    1bf8:	cd 01       	movw	r24, r26
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	e2 e1       	ldi	r30, 0x12	; 18
    1c00:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__epilogue_restores__>

00001c04 <__subsf3>:
    1c04:	a0 e2       	ldi	r26, 0x20	; 32
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e8 e0       	ldi	r30, 0x08	; 8
    1c0a:	fe e0       	ldi	r31, 0x0E	; 14
    1c0c:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__+0x18>
    1c10:	69 83       	std	Y+1, r22	; 0x01
    1c12:	7a 83       	std	Y+2, r23	; 0x02
    1c14:	8b 83       	std	Y+3, r24	; 0x03
    1c16:	9c 83       	std	Y+4, r25	; 0x04
    1c18:	2d 83       	std	Y+5, r18	; 0x05
    1c1a:	3e 83       	std	Y+6, r19	; 0x06
    1c1c:	4f 83       	std	Y+7, r20	; 0x07
    1c1e:	58 87       	std	Y+8, r21	; 0x08
    1c20:	e9 e0       	ldi	r30, 0x09	; 9
    1c22:	ee 2e       	mov	r14, r30
    1c24:	f1 2c       	mov	r15, r1
    1c26:	ec 0e       	add	r14, r28
    1c28:	fd 1e       	adc	r15, r29
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	01 96       	adiw	r24, 0x01	; 1
    1c2e:	b7 01       	movw	r22, r14
    1c30:	0e 94 2d 11 	call	0x225a	; 0x225a <__unpack_f>
    1c34:	8e 01       	movw	r16, r28
    1c36:	0f 5e       	subi	r16, 0xEF	; 239
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	05 96       	adiw	r24, 0x05	; 5
    1c3e:	b8 01       	movw	r22, r16
    1c40:	0e 94 2d 11 	call	0x225a	; 0x225a <__unpack_f>
    1c44:	8a 89       	ldd	r24, Y+18	; 0x12
    1c46:	91 e0       	ldi	r25, 0x01	; 1
    1c48:	89 27       	eor	r24, r25
    1c4a:	8a 8b       	std	Y+18, r24	; 0x12
    1c4c:	c7 01       	movw	r24, r14
    1c4e:	b8 01       	movw	r22, r16
    1c50:	ae 01       	movw	r20, r28
    1c52:	47 5e       	subi	r20, 0xE7	; 231
    1c54:	5f 4f       	sbci	r21, 0xFF	; 255
    1c56:	0e 94 b6 0c 	call	0x196c	; 0x196c <_fpadd_parts>
    1c5a:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__pack_f>
    1c5e:	a0 96       	adiw	r28, 0x20	; 32
    1c60:	e6 e0       	ldi	r30, 0x06	; 6
    1c62:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__+0x18>

00001c66 <__addsf3>:
    1c66:	a0 e2       	ldi	r26, 0x20	; 32
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e9 e3       	ldi	r30, 0x39	; 57
    1c6c:	fe e0       	ldi	r31, 0x0E	; 14
    1c6e:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__+0x18>
    1c72:	69 83       	std	Y+1, r22	; 0x01
    1c74:	7a 83       	std	Y+2, r23	; 0x02
    1c76:	8b 83       	std	Y+3, r24	; 0x03
    1c78:	9c 83       	std	Y+4, r25	; 0x04
    1c7a:	2d 83       	std	Y+5, r18	; 0x05
    1c7c:	3e 83       	std	Y+6, r19	; 0x06
    1c7e:	4f 83       	std	Y+7, r20	; 0x07
    1c80:	58 87       	std	Y+8, r21	; 0x08
    1c82:	f9 e0       	ldi	r31, 0x09	; 9
    1c84:	ef 2e       	mov	r14, r31
    1c86:	f1 2c       	mov	r15, r1
    1c88:	ec 0e       	add	r14, r28
    1c8a:	fd 1e       	adc	r15, r29
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	01 96       	adiw	r24, 0x01	; 1
    1c90:	b7 01       	movw	r22, r14
    1c92:	0e 94 2d 11 	call	0x225a	; 0x225a <__unpack_f>
    1c96:	8e 01       	movw	r16, r28
    1c98:	0f 5e       	subi	r16, 0xEF	; 239
    1c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	05 96       	adiw	r24, 0x05	; 5
    1ca0:	b8 01       	movw	r22, r16
    1ca2:	0e 94 2d 11 	call	0x225a	; 0x225a <__unpack_f>
    1ca6:	c7 01       	movw	r24, r14
    1ca8:	b8 01       	movw	r22, r16
    1caa:	ae 01       	movw	r20, r28
    1cac:	47 5e       	subi	r20, 0xE7	; 231
    1cae:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb0:	0e 94 b6 0c 	call	0x196c	; 0x196c <_fpadd_parts>
    1cb4:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__pack_f>
    1cb8:	a0 96       	adiw	r28, 0x20	; 32
    1cba:	e6 e0       	ldi	r30, 0x06	; 6
    1cbc:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__+0x18>

00001cc0 <__divsf3>:
    1cc0:	a8 e1       	ldi	r26, 0x18	; 24
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e6 e6       	ldi	r30, 0x66	; 102
    1cc6:	fe e0       	ldi	r31, 0x0E	; 14
    1cc8:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x10>
    1ccc:	69 83       	std	Y+1, r22	; 0x01
    1cce:	7a 83       	std	Y+2, r23	; 0x02
    1cd0:	8b 83       	std	Y+3, r24	; 0x03
    1cd2:	9c 83       	std	Y+4, r25	; 0x04
    1cd4:	2d 83       	std	Y+5, r18	; 0x05
    1cd6:	3e 83       	std	Y+6, r19	; 0x06
    1cd8:	4f 83       	std	Y+7, r20	; 0x07
    1cda:	58 87       	std	Y+8, r21	; 0x08
    1cdc:	b9 e0       	ldi	r27, 0x09	; 9
    1cde:	eb 2e       	mov	r14, r27
    1ce0:	f1 2c       	mov	r15, r1
    1ce2:	ec 0e       	add	r14, r28
    1ce4:	fd 1e       	adc	r15, r29
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	b7 01       	movw	r22, r14
    1cec:	0e 94 2d 11 	call	0x225a	; 0x225a <__unpack_f>
    1cf0:	8e 01       	movw	r16, r28
    1cf2:	0f 5e       	subi	r16, 0xEF	; 239
    1cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	05 96       	adiw	r24, 0x05	; 5
    1cfa:	b8 01       	movw	r22, r16
    1cfc:	0e 94 2d 11 	call	0x225a	; 0x225a <__unpack_f>
    1d00:	29 85       	ldd	r18, Y+9	; 0x09
    1d02:	22 30       	cpi	r18, 0x02	; 2
    1d04:	08 f4       	brcc	.+2      	; 0x1d08 <__divsf3+0x48>
    1d06:	7e c0       	rjmp	.+252    	; 0x1e04 <__divsf3+0x144>
    1d08:	39 89       	ldd	r19, Y+17	; 0x11
    1d0a:	32 30       	cpi	r19, 0x02	; 2
    1d0c:	10 f4       	brcc	.+4      	; 0x1d12 <__divsf3+0x52>
    1d0e:	b8 01       	movw	r22, r16
    1d10:	7c c0       	rjmp	.+248    	; 0x1e0a <__divsf3+0x14a>
    1d12:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d14:	9a 89       	ldd	r25, Y+18	; 0x12
    1d16:	89 27       	eor	r24, r25
    1d18:	8a 87       	std	Y+10, r24	; 0x0a
    1d1a:	24 30       	cpi	r18, 0x04	; 4
    1d1c:	11 f0       	breq	.+4      	; 0x1d22 <__divsf3+0x62>
    1d1e:	22 30       	cpi	r18, 0x02	; 2
    1d20:	31 f4       	brne	.+12     	; 0x1d2e <__divsf3+0x6e>
    1d22:	23 17       	cp	r18, r19
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <__divsf3+0x68>
    1d26:	6e c0       	rjmp	.+220    	; 0x1e04 <__divsf3+0x144>
    1d28:	6e e3       	ldi	r22, 0x3E	; 62
    1d2a:	74 e0       	ldi	r23, 0x04	; 4
    1d2c:	6e c0       	rjmp	.+220    	; 0x1e0a <__divsf3+0x14a>
    1d2e:	34 30       	cpi	r19, 0x04	; 4
    1d30:	39 f4       	brne	.+14     	; 0x1d40 <__divsf3+0x80>
    1d32:	1d 86       	std	Y+13, r1	; 0x0d
    1d34:	1e 86       	std	Y+14, r1	; 0x0e
    1d36:	1f 86       	std	Y+15, r1	; 0x0f
    1d38:	18 8a       	std	Y+16, r1	; 0x10
    1d3a:	1c 86       	std	Y+12, r1	; 0x0c
    1d3c:	1b 86       	std	Y+11, r1	; 0x0b
    1d3e:	04 c0       	rjmp	.+8      	; 0x1d48 <__divsf3+0x88>
    1d40:	32 30       	cpi	r19, 0x02	; 2
    1d42:	21 f4       	brne	.+8      	; 0x1d4c <__divsf3+0x8c>
    1d44:	84 e0       	ldi	r24, 0x04	; 4
    1d46:	89 87       	std	Y+9, r24	; 0x09
    1d48:	b7 01       	movw	r22, r14
    1d4a:	5f c0       	rjmp	.+190    	; 0x1e0a <__divsf3+0x14a>
    1d4c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d4e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d50:	8b 89       	ldd	r24, Y+19	; 0x13
    1d52:	9c 89       	ldd	r25, Y+20	; 0x14
    1d54:	28 1b       	sub	r18, r24
    1d56:	39 0b       	sbc	r19, r25
    1d58:	3c 87       	std	Y+12, r19	; 0x0c
    1d5a:	2b 87       	std	Y+11, r18	; 0x0b
    1d5c:	ed 84       	ldd	r14, Y+13	; 0x0d
    1d5e:	fe 84       	ldd	r15, Y+14	; 0x0e
    1d60:	0f 85       	ldd	r16, Y+15	; 0x0f
    1d62:	18 89       	ldd	r17, Y+16	; 0x10
    1d64:	ad 88       	ldd	r10, Y+21	; 0x15
    1d66:	be 88       	ldd	r11, Y+22	; 0x16
    1d68:	cf 88       	ldd	r12, Y+23	; 0x17
    1d6a:	d8 8c       	ldd	r13, Y+24	; 0x18
    1d6c:	ea 14       	cp	r14, r10
    1d6e:	fb 04       	cpc	r15, r11
    1d70:	0c 05       	cpc	r16, r12
    1d72:	1d 05       	cpc	r17, r13
    1d74:	40 f4       	brcc	.+16     	; 0x1d86 <__divsf3+0xc6>
    1d76:	ee 0c       	add	r14, r14
    1d78:	ff 1c       	adc	r15, r15
    1d7a:	00 1f       	adc	r16, r16
    1d7c:	11 1f       	adc	r17, r17
    1d7e:	21 50       	subi	r18, 0x01	; 1
    1d80:	30 40       	sbci	r19, 0x00	; 0
    1d82:	3c 87       	std	Y+12, r19	; 0x0c
    1d84:	2b 87       	std	Y+11, r18	; 0x0b
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a0 e0       	ldi	r26, 0x00	; 0
    1d94:	b0 e4       	ldi	r27, 0x40	; 64
    1d96:	60 e0       	ldi	r22, 0x00	; 0
    1d98:	70 e0       	ldi	r23, 0x00	; 0
    1d9a:	ea 14       	cp	r14, r10
    1d9c:	fb 04       	cpc	r15, r11
    1d9e:	0c 05       	cpc	r16, r12
    1da0:	1d 05       	cpc	r17, r13
    1da2:	40 f0       	brcs	.+16     	; 0x1db4 <__divsf3+0xf4>
    1da4:	28 2b       	or	r18, r24
    1da6:	39 2b       	or	r19, r25
    1da8:	4a 2b       	or	r20, r26
    1daa:	5b 2b       	or	r21, r27
    1dac:	ea 18       	sub	r14, r10
    1dae:	fb 08       	sbc	r15, r11
    1db0:	0c 09       	sbc	r16, r12
    1db2:	1d 09       	sbc	r17, r13
    1db4:	b6 95       	lsr	r27
    1db6:	a7 95       	ror	r26
    1db8:	97 95       	ror	r25
    1dba:	87 95       	ror	r24
    1dbc:	ee 0c       	add	r14, r14
    1dbe:	ff 1c       	adc	r15, r15
    1dc0:	00 1f       	adc	r16, r16
    1dc2:	11 1f       	adc	r17, r17
    1dc4:	6f 5f       	subi	r22, 0xFF	; 255
    1dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc8:	6f 31       	cpi	r22, 0x1F	; 31
    1dca:	71 05       	cpc	r23, r1
    1dcc:	31 f7       	brne	.-52     	; 0x1d9a <__divsf3+0xda>
    1dce:	da 01       	movw	r26, r20
    1dd0:	c9 01       	movw	r24, r18
    1dd2:	8f 77       	andi	r24, 0x7F	; 127
    1dd4:	90 70       	andi	r25, 0x00	; 0
    1dd6:	a0 70       	andi	r26, 0x00	; 0
    1dd8:	b0 70       	andi	r27, 0x00	; 0
    1dda:	80 34       	cpi	r24, 0x40	; 64
    1ddc:	91 05       	cpc	r25, r1
    1dde:	a1 05       	cpc	r26, r1
    1de0:	b1 05       	cpc	r27, r1
    1de2:	61 f4       	brne	.+24     	; 0x1dfc <__divsf3+0x13c>
    1de4:	27 fd       	sbrc	r18, 7
    1de6:	0a c0       	rjmp	.+20     	; 0x1dfc <__divsf3+0x13c>
    1de8:	e1 14       	cp	r14, r1
    1dea:	f1 04       	cpc	r15, r1
    1dec:	01 05       	cpc	r16, r1
    1dee:	11 05       	cpc	r17, r1
    1df0:	29 f0       	breq	.+10     	; 0x1dfc <__divsf3+0x13c>
    1df2:	20 5c       	subi	r18, 0xC0	; 192
    1df4:	3f 4f       	sbci	r19, 0xFF	; 255
    1df6:	4f 4f       	sbci	r20, 0xFF	; 255
    1df8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dfa:	20 78       	andi	r18, 0x80	; 128
    1dfc:	2d 87       	std	Y+13, r18	; 0x0d
    1dfe:	3e 87       	std	Y+14, r19	; 0x0e
    1e00:	4f 87       	std	Y+15, r20	; 0x0f
    1e02:	58 8b       	std	Y+16, r21	; 0x10
    1e04:	be 01       	movw	r22, r28
    1e06:	67 5f       	subi	r22, 0xF7	; 247
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__pack_f>
    1e10:	68 96       	adiw	r28, 0x18	; 24
    1e12:	ea e0       	ldi	r30, 0x0A	; 10
    1e14:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x10>

00001e18 <__gesf2>:
    1e18:	a8 e1       	ldi	r26, 0x18	; 24
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e2 e1       	ldi	r30, 0x12	; 18
    1e1e:	ff e0       	ldi	r31, 0x0F	; 15
    1e20:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__+0x18>
    1e24:	69 83       	std	Y+1, r22	; 0x01
    1e26:	7a 83       	std	Y+2, r23	; 0x02
    1e28:	8b 83       	std	Y+3, r24	; 0x03
    1e2a:	9c 83       	std	Y+4, r25	; 0x04
    1e2c:	2d 83       	std	Y+5, r18	; 0x05
    1e2e:	3e 83       	std	Y+6, r19	; 0x06
    1e30:	4f 83       	std	Y+7, r20	; 0x07
    1e32:	58 87       	std	Y+8, r21	; 0x08
    1e34:	89 e0       	ldi	r24, 0x09	; 9
    1e36:	e8 2e       	mov	r14, r24
    1e38:	f1 2c       	mov	r15, r1
    1e3a:	ec 0e       	add	r14, r28
    1e3c:	fd 1e       	adc	r15, r29
    1e3e:	ce 01       	movw	r24, r28
    1e40:	01 96       	adiw	r24, 0x01	; 1
    1e42:	b7 01       	movw	r22, r14
    1e44:	0e 94 2d 11 	call	0x225a	; 0x225a <__unpack_f>
    1e48:	8e 01       	movw	r16, r28
    1e4a:	0f 5e       	subi	r16, 0xEF	; 239
    1e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4e:	ce 01       	movw	r24, r28
    1e50:	05 96       	adiw	r24, 0x05	; 5
    1e52:	b8 01       	movw	r22, r16
    1e54:	0e 94 2d 11 	call	0x225a	; 0x225a <__unpack_f>
    1e58:	89 85       	ldd	r24, Y+9	; 0x09
    1e5a:	82 30       	cpi	r24, 0x02	; 2
    1e5c:	40 f0       	brcs	.+16     	; 0x1e6e <__gesf2+0x56>
    1e5e:	89 89       	ldd	r24, Y+17	; 0x11
    1e60:	82 30       	cpi	r24, 0x02	; 2
    1e62:	28 f0       	brcs	.+10     	; 0x1e6e <__gesf2+0x56>
    1e64:	c7 01       	movw	r24, r14
    1e66:	b8 01       	movw	r22, r16
    1e68:	0e 94 a5 11 	call	0x234a	; 0x234a <__fpcmp_parts_f>
    1e6c:	01 c0       	rjmp	.+2      	; 0x1e70 <__gesf2+0x58>
    1e6e:	8f ef       	ldi	r24, 0xFF	; 255
    1e70:	68 96       	adiw	r28, 0x18	; 24
    1e72:	e6 e0       	ldi	r30, 0x06	; 6
    1e74:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__+0x18>

00001e78 <__fixsfsi>:
    1e78:	ac e0       	ldi	r26, 0x0C	; 12
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e2 e4       	ldi	r30, 0x42	; 66
    1e7e:	ff e0       	ldi	r31, 0x0F	; 15
    1e80:	0c 94 35 12 	jmp	0x246a	; 0x246a <__prologue_saves__+0x20>
    1e84:	69 83       	std	Y+1, r22	; 0x01
    1e86:	7a 83       	std	Y+2, r23	; 0x02
    1e88:	8b 83       	std	Y+3, r24	; 0x03
    1e8a:	9c 83       	std	Y+4, r25	; 0x04
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	01 96       	adiw	r24, 0x01	; 1
    1e90:	be 01       	movw	r22, r28
    1e92:	6b 5f       	subi	r22, 0xFB	; 251
    1e94:	7f 4f       	sbci	r23, 0xFF	; 255
    1e96:	0e 94 2d 11 	call	0x225a	; 0x225a <__unpack_f>
    1e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9c:	82 30       	cpi	r24, 0x02	; 2
    1e9e:	61 f1       	breq	.+88     	; 0x1ef8 <__fixsfsi+0x80>
    1ea0:	82 30       	cpi	r24, 0x02	; 2
    1ea2:	50 f1       	brcs	.+84     	; 0x1ef8 <__fixsfsi+0x80>
    1ea4:	84 30       	cpi	r24, 0x04	; 4
    1ea6:	21 f4       	brne	.+8      	; 0x1eb0 <__fixsfsi+0x38>
    1ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eaa:	88 23       	and	r24, r24
    1eac:	51 f1       	breq	.+84     	; 0x1f02 <__fixsfsi+0x8a>
    1eae:	2e c0       	rjmp	.+92     	; 0x1f0c <__fixsfsi+0x94>
    1eb0:	2f 81       	ldd	r18, Y+7	; 0x07
    1eb2:	38 85       	ldd	r19, Y+8	; 0x08
    1eb4:	37 fd       	sbrc	r19, 7
    1eb6:	20 c0       	rjmp	.+64     	; 0x1ef8 <__fixsfsi+0x80>
    1eb8:	6e 81       	ldd	r22, Y+6	; 0x06
    1eba:	2f 31       	cpi	r18, 0x1F	; 31
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	1c f0       	brlt	.+6      	; 0x1ec6 <__fixsfsi+0x4e>
    1ec0:	66 23       	and	r22, r22
    1ec2:	f9 f0       	breq	.+62     	; 0x1f02 <__fixsfsi+0x8a>
    1ec4:	23 c0       	rjmp	.+70     	; 0x1f0c <__fixsfsi+0x94>
    1ec6:	8e e1       	ldi	r24, 0x1E	; 30
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	82 1b       	sub	r24, r18
    1ecc:	93 0b       	sbc	r25, r19
    1ece:	29 85       	ldd	r18, Y+9	; 0x09
    1ed0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ed2:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ed4:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ed6:	04 c0       	rjmp	.+8      	; 0x1ee0 <__fixsfsi+0x68>
    1ed8:	56 95       	lsr	r21
    1eda:	47 95       	ror	r20
    1edc:	37 95       	ror	r19
    1ede:	27 95       	ror	r18
    1ee0:	8a 95       	dec	r24
    1ee2:	d2 f7       	brpl	.-12     	; 0x1ed8 <__fixsfsi+0x60>
    1ee4:	66 23       	and	r22, r22
    1ee6:	b1 f0       	breq	.+44     	; 0x1f14 <__fixsfsi+0x9c>
    1ee8:	50 95       	com	r21
    1eea:	40 95       	com	r20
    1eec:	30 95       	com	r19
    1eee:	21 95       	neg	r18
    1ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	0e c0       	rjmp	.+28     	; 0x1f14 <__fixsfsi+0x9c>
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	50 e0       	ldi	r21, 0x00	; 0
    1f00:	09 c0       	rjmp	.+18     	; 0x1f14 <__fixsfsi+0x9c>
    1f02:	2f ef       	ldi	r18, 0xFF	; 255
    1f04:	3f ef       	ldi	r19, 0xFF	; 255
    1f06:	4f ef       	ldi	r20, 0xFF	; 255
    1f08:	5f e7       	ldi	r21, 0x7F	; 127
    1f0a:	04 c0       	rjmp	.+8      	; 0x1f14 <__fixsfsi+0x9c>
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	50 e8       	ldi	r21, 0x80	; 128
    1f14:	b9 01       	movw	r22, r18
    1f16:	ca 01       	movw	r24, r20
    1f18:	2c 96       	adiw	r28, 0x0c	; 12
    1f1a:	e2 e0       	ldi	r30, 0x02	; 2
    1f1c:	0c 94 51 12 	jmp	0x24a2	; 0x24a2 <__epilogue_restores__+0x20>

00001f20 <__floatunsisf>:
    1f20:	a8 e0       	ldi	r26, 0x08	; 8
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e6 e9       	ldi	r30, 0x96	; 150
    1f26:	ff e0       	ldi	r31, 0x0F	; 15
    1f28:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x10>
    1f2c:	7b 01       	movw	r14, r22
    1f2e:	8c 01       	movw	r16, r24
    1f30:	61 15       	cp	r22, r1
    1f32:	71 05       	cpc	r23, r1
    1f34:	81 05       	cpc	r24, r1
    1f36:	91 05       	cpc	r25, r1
    1f38:	19 f4       	brne	.+6      	; 0x1f40 <__floatunsisf+0x20>
    1f3a:	82 e0       	ldi	r24, 0x02	; 2
    1f3c:	89 83       	std	Y+1, r24	; 0x01
    1f3e:	60 c0       	rjmp	.+192    	; 0x2000 <__floatunsisf+0xe0>
    1f40:	83 e0       	ldi	r24, 0x03	; 3
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	8e e1       	ldi	r24, 0x1E	; 30
    1f46:	c8 2e       	mov	r12, r24
    1f48:	d1 2c       	mov	r13, r1
    1f4a:	dc 82       	std	Y+4, r13	; 0x04
    1f4c:	cb 82       	std	Y+3, r12	; 0x03
    1f4e:	ed 82       	std	Y+5, r14	; 0x05
    1f50:	fe 82       	std	Y+6, r15	; 0x06
    1f52:	0f 83       	std	Y+7, r16	; 0x07
    1f54:	18 87       	std	Y+8, r17	; 0x08
    1f56:	c8 01       	movw	r24, r16
    1f58:	b7 01       	movw	r22, r14
    1f5a:	0e 94 09 10 	call	0x2012	; 0x2012 <__clzsi2>
    1f5e:	fc 01       	movw	r30, r24
    1f60:	31 97       	sbiw	r30, 0x01	; 1
    1f62:	f7 ff       	sbrs	r31, 7
    1f64:	3b c0       	rjmp	.+118    	; 0x1fdc <__floatunsisf+0xbc>
    1f66:	22 27       	eor	r18, r18
    1f68:	33 27       	eor	r19, r19
    1f6a:	2e 1b       	sub	r18, r30
    1f6c:	3f 0b       	sbc	r19, r31
    1f6e:	57 01       	movw	r10, r14
    1f70:	68 01       	movw	r12, r16
    1f72:	02 2e       	mov	r0, r18
    1f74:	04 c0       	rjmp	.+8      	; 0x1f7e <__floatunsisf+0x5e>
    1f76:	d6 94       	lsr	r13
    1f78:	c7 94       	ror	r12
    1f7a:	b7 94       	ror	r11
    1f7c:	a7 94       	ror	r10
    1f7e:	0a 94       	dec	r0
    1f80:	d2 f7       	brpl	.-12     	; 0x1f76 <__floatunsisf+0x56>
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	a0 e0       	ldi	r26, 0x00	; 0
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	04 c0       	rjmp	.+8      	; 0x1f9c <__floatunsisf+0x7c>
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	aa 1f       	adc	r26, r26
    1f9a:	bb 1f       	adc	r27, r27
    1f9c:	2a 95       	dec	r18
    1f9e:	d2 f7       	brpl	.-12     	; 0x1f94 <__floatunsisf+0x74>
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	a1 09       	sbc	r26, r1
    1fa4:	b1 09       	sbc	r27, r1
    1fa6:	8e 21       	and	r24, r14
    1fa8:	9f 21       	and	r25, r15
    1faa:	a0 23       	and	r26, r16
    1fac:	b1 23       	and	r27, r17
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	a1 05       	cpc	r26, r1
    1fb2:	b1 05       	cpc	r27, r1
    1fb4:	21 f0       	breq	.+8      	; 0x1fbe <__floatunsisf+0x9e>
    1fb6:	41 e0       	ldi	r20, 0x01	; 1
    1fb8:	50 e0       	ldi	r21, 0x00	; 0
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	4a 29       	or	r20, r10
    1fc0:	5b 29       	or	r21, r11
    1fc2:	6c 29       	or	r22, r12
    1fc4:	7d 29       	or	r23, r13
    1fc6:	4d 83       	std	Y+5, r20	; 0x05
    1fc8:	5e 83       	std	Y+6, r21	; 0x06
    1fca:	6f 83       	std	Y+7, r22	; 0x07
    1fcc:	78 87       	std	Y+8, r23	; 0x08
    1fce:	8e e1       	ldi	r24, 0x1E	; 30
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	8e 1b       	sub	r24, r30
    1fd4:	9f 0b       	sbc	r25, r31
    1fd6:	9c 83       	std	Y+4, r25	; 0x04
    1fd8:	8b 83       	std	Y+3, r24	; 0x03
    1fda:	12 c0       	rjmp	.+36     	; 0x2000 <__floatunsisf+0xe0>
    1fdc:	30 97       	sbiw	r30, 0x00	; 0
    1fde:	81 f0       	breq	.+32     	; 0x2000 <__floatunsisf+0xe0>
    1fe0:	0e 2e       	mov	r0, r30
    1fe2:	04 c0       	rjmp	.+8      	; 0x1fec <__floatunsisf+0xcc>
    1fe4:	ee 0c       	add	r14, r14
    1fe6:	ff 1c       	adc	r15, r15
    1fe8:	00 1f       	adc	r16, r16
    1fea:	11 1f       	adc	r17, r17
    1fec:	0a 94       	dec	r0
    1fee:	d2 f7       	brpl	.-12     	; 0x1fe4 <__floatunsisf+0xc4>
    1ff0:	ed 82       	std	Y+5, r14	; 0x05
    1ff2:	fe 82       	std	Y+6, r15	; 0x06
    1ff4:	0f 83       	std	Y+7, r16	; 0x07
    1ff6:	18 87       	std	Y+8, r17	; 0x08
    1ff8:	ce 1a       	sub	r12, r30
    1ffa:	df 0a       	sbc	r13, r31
    1ffc:	dc 82       	std	Y+4, r13	; 0x04
    1ffe:	cb 82       	std	Y+3, r12	; 0x03
    2000:	1a 82       	std	Y+2, r1	; 0x02
    2002:	ce 01       	movw	r24, r28
    2004:	01 96       	adiw	r24, 0x01	; 1
    2006:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__pack_f>
    200a:	28 96       	adiw	r28, 0x08	; 8
    200c:	ea e0       	ldi	r30, 0x0A	; 10
    200e:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x10>

00002012 <__clzsi2>:
    2012:	ef 92       	push	r14
    2014:	ff 92       	push	r15
    2016:	0f 93       	push	r16
    2018:	1f 93       	push	r17
    201a:	7b 01       	movw	r14, r22
    201c:	8c 01       	movw	r16, r24
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	e8 16       	cp	r14, r24
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	f8 06       	cpc	r15, r24
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	08 07       	cpc	r16, r24
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	18 07       	cpc	r17, r24
    202e:	88 f4       	brcc	.+34     	; 0x2052 <__clzsi2+0x40>
    2030:	8f ef       	ldi	r24, 0xFF	; 255
    2032:	e8 16       	cp	r14, r24
    2034:	f1 04       	cpc	r15, r1
    2036:	01 05       	cpc	r16, r1
    2038:	11 05       	cpc	r17, r1
    203a:	31 f0       	breq	.+12     	; 0x2048 <__clzsi2+0x36>
    203c:	28 f0       	brcs	.+10     	; 0x2048 <__clzsi2+0x36>
    203e:	88 e0       	ldi	r24, 0x08	; 8
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a0 e0       	ldi	r26, 0x00	; 0
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	17 c0       	rjmp	.+46     	; 0x2076 <__clzsi2+0x64>
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	a0 e0       	ldi	r26, 0x00	; 0
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	12 c0       	rjmp	.+36     	; 0x2076 <__clzsi2+0x64>
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	e8 16       	cp	r14, r24
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	f8 06       	cpc	r15, r24
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	08 07       	cpc	r16, r24
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	18 07       	cpc	r17, r24
    2062:	28 f0       	brcs	.+10     	; 0x206e <__clzsi2+0x5c>
    2064:	88 e1       	ldi	r24, 0x18	; 24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	a0 e0       	ldi	r26, 0x00	; 0
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	04 c0       	rjmp	.+8      	; 0x2076 <__clzsi2+0x64>
    206e:	80 e1       	ldi	r24, 0x10	; 16
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a0 e0       	ldi	r26, 0x00	; 0
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	20 e2       	ldi	r18, 0x20	; 32
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	28 1b       	sub	r18, r24
    2080:	39 0b       	sbc	r19, r25
    2082:	4a 0b       	sbc	r20, r26
    2084:	5b 0b       	sbc	r21, r27
    2086:	04 c0       	rjmp	.+8      	; 0x2090 <__clzsi2+0x7e>
    2088:	16 95       	lsr	r17
    208a:	07 95       	ror	r16
    208c:	f7 94       	ror	r15
    208e:	e7 94       	ror	r14
    2090:	8a 95       	dec	r24
    2092:	d2 f7       	brpl	.-12     	; 0x2088 <__clzsi2+0x76>
    2094:	f7 01       	movw	r30, r14
    2096:	ea 5b       	subi	r30, 0xBA	; 186
    2098:	fb 4f       	sbci	r31, 0xFB	; 251
    209a:	80 81       	ld	r24, Z
    209c:	28 1b       	sub	r18, r24
    209e:	31 09       	sbc	r19, r1
    20a0:	41 09       	sbc	r20, r1
    20a2:	51 09       	sbc	r21, r1
    20a4:	c9 01       	movw	r24, r18
    20a6:	1f 91       	pop	r17
    20a8:	0f 91       	pop	r16
    20aa:	ff 90       	pop	r15
    20ac:	ef 90       	pop	r14
    20ae:	08 95       	ret

000020b0 <__pack_f>:
    20b0:	df 92       	push	r13
    20b2:	ef 92       	push	r14
    20b4:	ff 92       	push	r15
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	fc 01       	movw	r30, r24
    20bc:	e4 80       	ldd	r14, Z+4	; 0x04
    20be:	f5 80       	ldd	r15, Z+5	; 0x05
    20c0:	06 81       	ldd	r16, Z+6	; 0x06
    20c2:	17 81       	ldd	r17, Z+7	; 0x07
    20c4:	d1 80       	ldd	r13, Z+1	; 0x01
    20c6:	80 81       	ld	r24, Z
    20c8:	82 30       	cpi	r24, 0x02	; 2
    20ca:	48 f4       	brcc	.+18     	; 0x20de <__pack_f+0x2e>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a0 e1       	ldi	r26, 0x10	; 16
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e8 2a       	or	r14, r24
    20d6:	f9 2a       	or	r15, r25
    20d8:	0a 2b       	or	r16, r26
    20da:	1b 2b       	or	r17, r27
    20dc:	a5 c0       	rjmp	.+330    	; 0x2228 <__stack+0x29>
    20de:	84 30       	cpi	r24, 0x04	; 4
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <__pack_f+0x34>
    20e2:	9f c0       	rjmp	.+318    	; 0x2222 <__stack+0x23>
    20e4:	82 30       	cpi	r24, 0x02	; 2
    20e6:	21 f4       	brne	.+8      	; 0x20f0 <__pack_f+0x40>
    20e8:	ee 24       	eor	r14, r14
    20ea:	ff 24       	eor	r15, r15
    20ec:	87 01       	movw	r16, r14
    20ee:	05 c0       	rjmp	.+10     	; 0x20fa <__pack_f+0x4a>
    20f0:	e1 14       	cp	r14, r1
    20f2:	f1 04       	cpc	r15, r1
    20f4:	01 05       	cpc	r16, r1
    20f6:	11 05       	cpc	r17, r1
    20f8:	19 f4       	brne	.+6      	; 0x2100 <__pack_f+0x50>
    20fa:	e0 e0       	ldi	r30, 0x00	; 0
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	96 c0       	rjmp	.+300    	; 0x222c <__stack+0x2d>
    2100:	62 81       	ldd	r22, Z+2	; 0x02
    2102:	73 81       	ldd	r23, Z+3	; 0x03
    2104:	9f ef       	ldi	r25, 0xFF	; 255
    2106:	62 38       	cpi	r22, 0x82	; 130
    2108:	79 07       	cpc	r23, r25
    210a:	0c f0       	brlt	.+2      	; 0x210e <__pack_f+0x5e>
    210c:	5b c0       	rjmp	.+182    	; 0x21c4 <__pack_f+0x114>
    210e:	22 e8       	ldi	r18, 0x82	; 130
    2110:	3f ef       	ldi	r19, 0xFF	; 255
    2112:	26 1b       	sub	r18, r22
    2114:	37 0b       	sbc	r19, r23
    2116:	2a 31       	cpi	r18, 0x1A	; 26
    2118:	31 05       	cpc	r19, r1
    211a:	2c f0       	brlt	.+10     	; 0x2126 <__pack_f+0x76>
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	50 e0       	ldi	r21, 0x00	; 0
    2124:	2a c0       	rjmp	.+84     	; 0x217a <__pack_f+0xca>
    2126:	b8 01       	movw	r22, r16
    2128:	a7 01       	movw	r20, r14
    212a:	02 2e       	mov	r0, r18
    212c:	04 c0       	rjmp	.+8      	; 0x2136 <__pack_f+0x86>
    212e:	76 95       	lsr	r23
    2130:	67 95       	ror	r22
    2132:	57 95       	ror	r21
    2134:	47 95       	ror	r20
    2136:	0a 94       	dec	r0
    2138:	d2 f7       	brpl	.-12     	; 0x212e <__pack_f+0x7e>
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	a0 e0       	ldi	r26, 0x00	; 0
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	04 c0       	rjmp	.+8      	; 0x214c <__pack_f+0x9c>
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	aa 1f       	adc	r26, r26
    214a:	bb 1f       	adc	r27, r27
    214c:	2a 95       	dec	r18
    214e:	d2 f7       	brpl	.-12     	; 0x2144 <__pack_f+0x94>
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	a1 09       	sbc	r26, r1
    2154:	b1 09       	sbc	r27, r1
    2156:	8e 21       	and	r24, r14
    2158:	9f 21       	and	r25, r15
    215a:	a0 23       	and	r26, r16
    215c:	b1 23       	and	r27, r17
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	a1 05       	cpc	r26, r1
    2162:	b1 05       	cpc	r27, r1
    2164:	21 f0       	breq	.+8      	; 0x216e <__pack_f+0xbe>
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	a0 e0       	ldi	r26, 0x00	; 0
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	9a 01       	movw	r18, r20
    2170:	ab 01       	movw	r20, r22
    2172:	28 2b       	or	r18, r24
    2174:	39 2b       	or	r19, r25
    2176:	4a 2b       	or	r20, r26
    2178:	5b 2b       	or	r21, r27
    217a:	da 01       	movw	r26, r20
    217c:	c9 01       	movw	r24, r18
    217e:	8f 77       	andi	r24, 0x7F	; 127
    2180:	90 70       	andi	r25, 0x00	; 0
    2182:	a0 70       	andi	r26, 0x00	; 0
    2184:	b0 70       	andi	r27, 0x00	; 0
    2186:	80 34       	cpi	r24, 0x40	; 64
    2188:	91 05       	cpc	r25, r1
    218a:	a1 05       	cpc	r26, r1
    218c:	b1 05       	cpc	r27, r1
    218e:	39 f4       	brne	.+14     	; 0x219e <__pack_f+0xee>
    2190:	27 ff       	sbrs	r18, 7
    2192:	09 c0       	rjmp	.+18     	; 0x21a6 <__pack_f+0xf6>
    2194:	20 5c       	subi	r18, 0xC0	; 192
    2196:	3f 4f       	sbci	r19, 0xFF	; 255
    2198:	4f 4f       	sbci	r20, 0xFF	; 255
    219a:	5f 4f       	sbci	r21, 0xFF	; 255
    219c:	04 c0       	rjmp	.+8      	; 0x21a6 <__pack_f+0xf6>
    219e:	21 5c       	subi	r18, 0xC1	; 193
    21a0:	3f 4f       	sbci	r19, 0xFF	; 255
    21a2:	4f 4f       	sbci	r20, 0xFF	; 255
    21a4:	5f 4f       	sbci	r21, 0xFF	; 255
    21a6:	e0 e0       	ldi	r30, 0x00	; 0
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	20 30       	cpi	r18, 0x00	; 0
    21ac:	a0 e0       	ldi	r26, 0x00	; 0
    21ae:	3a 07       	cpc	r19, r26
    21b0:	a0 e0       	ldi	r26, 0x00	; 0
    21b2:	4a 07       	cpc	r20, r26
    21b4:	a0 e4       	ldi	r26, 0x40	; 64
    21b6:	5a 07       	cpc	r21, r26
    21b8:	10 f0       	brcs	.+4      	; 0x21be <__pack_f+0x10e>
    21ba:	e1 e0       	ldi	r30, 0x01	; 1
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	79 01       	movw	r14, r18
    21c0:	8a 01       	movw	r16, r20
    21c2:	27 c0       	rjmp	.+78     	; 0x2212 <__stack+0x13>
    21c4:	60 38       	cpi	r22, 0x80	; 128
    21c6:	71 05       	cpc	r23, r1
    21c8:	64 f5       	brge	.+88     	; 0x2222 <__stack+0x23>
    21ca:	fb 01       	movw	r30, r22
    21cc:	e1 58       	subi	r30, 0x81	; 129
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	d8 01       	movw	r26, r16
    21d2:	c7 01       	movw	r24, r14
    21d4:	8f 77       	andi	r24, 0x7F	; 127
    21d6:	90 70       	andi	r25, 0x00	; 0
    21d8:	a0 70       	andi	r26, 0x00	; 0
    21da:	b0 70       	andi	r27, 0x00	; 0
    21dc:	80 34       	cpi	r24, 0x40	; 64
    21de:	91 05       	cpc	r25, r1
    21e0:	a1 05       	cpc	r26, r1
    21e2:	b1 05       	cpc	r27, r1
    21e4:	39 f4       	brne	.+14     	; 0x21f4 <__pack_f+0x144>
    21e6:	e7 fe       	sbrs	r14, 7
    21e8:	0d c0       	rjmp	.+26     	; 0x2204 <__stack+0x5>
    21ea:	80 e4       	ldi	r24, 0x40	; 64
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	a0 e0       	ldi	r26, 0x00	; 0
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	04 c0       	rjmp	.+8      	; 0x21fc <__pack_f+0x14c>
    21f4:	8f e3       	ldi	r24, 0x3F	; 63
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	a0 e0       	ldi	r26, 0x00	; 0
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e8 0e       	add	r14, r24
    21fe:	f9 1e       	adc	r15, r25
    2200:	0a 1f       	adc	r16, r26
    2202:	1b 1f       	adc	r17, r27
    2204:	17 ff       	sbrs	r17, 7
    2206:	05 c0       	rjmp	.+10     	; 0x2212 <__stack+0x13>
    2208:	16 95       	lsr	r17
    220a:	07 95       	ror	r16
    220c:	f7 94       	ror	r15
    220e:	e7 94       	ror	r14
    2210:	31 96       	adiw	r30, 0x01	; 1
    2212:	87 e0       	ldi	r24, 0x07	; 7
    2214:	16 95       	lsr	r17
    2216:	07 95       	ror	r16
    2218:	f7 94       	ror	r15
    221a:	e7 94       	ror	r14
    221c:	8a 95       	dec	r24
    221e:	d1 f7       	brne	.-12     	; 0x2214 <__stack+0x15>
    2220:	05 c0       	rjmp	.+10     	; 0x222c <__stack+0x2d>
    2222:	ee 24       	eor	r14, r14
    2224:	ff 24       	eor	r15, r15
    2226:	87 01       	movw	r16, r14
    2228:	ef ef       	ldi	r30, 0xFF	; 255
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	6e 2f       	mov	r22, r30
    222e:	67 95       	ror	r22
    2230:	66 27       	eor	r22, r22
    2232:	67 95       	ror	r22
    2234:	90 2f       	mov	r25, r16
    2236:	9f 77       	andi	r25, 0x7F	; 127
    2238:	d7 94       	ror	r13
    223a:	dd 24       	eor	r13, r13
    223c:	d7 94       	ror	r13
    223e:	8e 2f       	mov	r24, r30
    2240:	86 95       	lsr	r24
    2242:	49 2f       	mov	r20, r25
    2244:	46 2b       	or	r20, r22
    2246:	58 2f       	mov	r21, r24
    2248:	5d 29       	or	r21, r13
    224a:	b7 01       	movw	r22, r14
    224c:	ca 01       	movw	r24, r20
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	ff 90       	pop	r15
    2254:	ef 90       	pop	r14
    2256:	df 90       	pop	r13
    2258:	08 95       	ret

0000225a <__unpack_f>:
    225a:	fc 01       	movw	r30, r24
    225c:	db 01       	movw	r26, r22
    225e:	40 81       	ld	r20, Z
    2260:	51 81       	ldd	r21, Z+1	; 0x01
    2262:	22 81       	ldd	r18, Z+2	; 0x02
    2264:	62 2f       	mov	r22, r18
    2266:	6f 77       	andi	r22, 0x7F	; 127
    2268:	70 e0       	ldi	r23, 0x00	; 0
    226a:	22 1f       	adc	r18, r18
    226c:	22 27       	eor	r18, r18
    226e:	22 1f       	adc	r18, r18
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	89 2f       	mov	r24, r25
    2274:	88 0f       	add	r24, r24
    2276:	82 2b       	or	r24, r18
    2278:	28 2f       	mov	r18, r24
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	99 1f       	adc	r25, r25
    227e:	99 27       	eor	r25, r25
    2280:	99 1f       	adc	r25, r25
    2282:	11 96       	adiw	r26, 0x01	; 1
    2284:	9c 93       	st	X, r25
    2286:	11 97       	sbiw	r26, 0x01	; 1
    2288:	21 15       	cp	r18, r1
    228a:	31 05       	cpc	r19, r1
    228c:	a9 f5       	brne	.+106    	; 0x22f8 <__unpack_f+0x9e>
    228e:	41 15       	cp	r20, r1
    2290:	51 05       	cpc	r21, r1
    2292:	61 05       	cpc	r22, r1
    2294:	71 05       	cpc	r23, r1
    2296:	11 f4       	brne	.+4      	; 0x229c <__unpack_f+0x42>
    2298:	82 e0       	ldi	r24, 0x02	; 2
    229a:	37 c0       	rjmp	.+110    	; 0x230a <__unpack_f+0xb0>
    229c:	82 e8       	ldi	r24, 0x82	; 130
    229e:	9f ef       	ldi	r25, 0xFF	; 255
    22a0:	13 96       	adiw	r26, 0x03	; 3
    22a2:	9c 93       	st	X, r25
    22a4:	8e 93       	st	-X, r24
    22a6:	12 97       	sbiw	r26, 0x02	; 2
    22a8:	9a 01       	movw	r18, r20
    22aa:	ab 01       	movw	r20, r22
    22ac:	67 e0       	ldi	r22, 0x07	; 7
    22ae:	22 0f       	add	r18, r18
    22b0:	33 1f       	adc	r19, r19
    22b2:	44 1f       	adc	r20, r20
    22b4:	55 1f       	adc	r21, r21
    22b6:	6a 95       	dec	r22
    22b8:	d1 f7       	brne	.-12     	; 0x22ae <__unpack_f+0x54>
    22ba:	83 e0       	ldi	r24, 0x03	; 3
    22bc:	8c 93       	st	X, r24
    22be:	0d c0       	rjmp	.+26     	; 0x22da <__unpack_f+0x80>
    22c0:	22 0f       	add	r18, r18
    22c2:	33 1f       	adc	r19, r19
    22c4:	44 1f       	adc	r20, r20
    22c6:	55 1f       	adc	r21, r21
    22c8:	12 96       	adiw	r26, 0x02	; 2
    22ca:	8d 91       	ld	r24, X+
    22cc:	9c 91       	ld	r25, X
    22ce:	13 97       	sbiw	r26, 0x03	; 3
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	13 96       	adiw	r26, 0x03	; 3
    22d4:	9c 93       	st	X, r25
    22d6:	8e 93       	st	-X, r24
    22d8:	12 97       	sbiw	r26, 0x02	; 2
    22da:	20 30       	cpi	r18, 0x00	; 0
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	38 07       	cpc	r19, r24
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	48 07       	cpc	r20, r24
    22e4:	80 e4       	ldi	r24, 0x40	; 64
    22e6:	58 07       	cpc	r21, r24
    22e8:	58 f3       	brcs	.-42     	; 0x22c0 <__unpack_f+0x66>
    22ea:	14 96       	adiw	r26, 0x04	; 4
    22ec:	2d 93       	st	X+, r18
    22ee:	3d 93       	st	X+, r19
    22f0:	4d 93       	st	X+, r20
    22f2:	5c 93       	st	X, r21
    22f4:	17 97       	sbiw	r26, 0x07	; 7
    22f6:	08 95       	ret
    22f8:	2f 3f       	cpi	r18, 0xFF	; 255
    22fa:	31 05       	cpc	r19, r1
    22fc:	79 f4       	brne	.+30     	; 0x231c <__unpack_f+0xc2>
    22fe:	41 15       	cp	r20, r1
    2300:	51 05       	cpc	r21, r1
    2302:	61 05       	cpc	r22, r1
    2304:	71 05       	cpc	r23, r1
    2306:	19 f4       	brne	.+6      	; 0x230e <__unpack_f+0xb4>
    2308:	84 e0       	ldi	r24, 0x04	; 4
    230a:	8c 93       	st	X, r24
    230c:	08 95       	ret
    230e:	64 ff       	sbrs	r22, 4
    2310:	03 c0       	rjmp	.+6      	; 0x2318 <__unpack_f+0xbe>
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	8c 93       	st	X, r24
    2316:	12 c0       	rjmp	.+36     	; 0x233c <__unpack_f+0xe2>
    2318:	1c 92       	st	X, r1
    231a:	10 c0       	rjmp	.+32     	; 0x233c <__unpack_f+0xe2>
    231c:	2f 57       	subi	r18, 0x7F	; 127
    231e:	30 40       	sbci	r19, 0x00	; 0
    2320:	13 96       	adiw	r26, 0x03	; 3
    2322:	3c 93       	st	X, r19
    2324:	2e 93       	st	-X, r18
    2326:	12 97       	sbiw	r26, 0x02	; 2
    2328:	83 e0       	ldi	r24, 0x03	; 3
    232a:	8c 93       	st	X, r24
    232c:	87 e0       	ldi	r24, 0x07	; 7
    232e:	44 0f       	add	r20, r20
    2330:	55 1f       	adc	r21, r21
    2332:	66 1f       	adc	r22, r22
    2334:	77 1f       	adc	r23, r23
    2336:	8a 95       	dec	r24
    2338:	d1 f7       	brne	.-12     	; 0x232e <__unpack_f+0xd4>
    233a:	70 64       	ori	r23, 0x40	; 64
    233c:	14 96       	adiw	r26, 0x04	; 4
    233e:	4d 93       	st	X+, r20
    2340:	5d 93       	st	X+, r21
    2342:	6d 93       	st	X+, r22
    2344:	7c 93       	st	X, r23
    2346:	17 97       	sbiw	r26, 0x07	; 7
    2348:	08 95       	ret

0000234a <__fpcmp_parts_f>:
    234a:	1f 93       	push	r17
    234c:	dc 01       	movw	r26, r24
    234e:	fb 01       	movw	r30, r22
    2350:	9c 91       	ld	r25, X
    2352:	92 30       	cpi	r25, 0x02	; 2
    2354:	08 f4       	brcc	.+2      	; 0x2358 <__fpcmp_parts_f+0xe>
    2356:	47 c0       	rjmp	.+142    	; 0x23e6 <__fpcmp_parts_f+0x9c>
    2358:	80 81       	ld	r24, Z
    235a:	82 30       	cpi	r24, 0x02	; 2
    235c:	08 f4       	brcc	.+2      	; 0x2360 <__fpcmp_parts_f+0x16>
    235e:	43 c0       	rjmp	.+134    	; 0x23e6 <__fpcmp_parts_f+0x9c>
    2360:	94 30       	cpi	r25, 0x04	; 4
    2362:	51 f4       	brne	.+20     	; 0x2378 <__fpcmp_parts_f+0x2e>
    2364:	11 96       	adiw	r26, 0x01	; 1
    2366:	1c 91       	ld	r17, X
    2368:	84 30       	cpi	r24, 0x04	; 4
    236a:	99 f5       	brne	.+102    	; 0x23d2 <__fpcmp_parts_f+0x88>
    236c:	81 81       	ldd	r24, Z+1	; 0x01
    236e:	68 2f       	mov	r22, r24
    2370:	70 e0       	ldi	r23, 0x00	; 0
    2372:	61 1b       	sub	r22, r17
    2374:	71 09       	sbc	r23, r1
    2376:	3f c0       	rjmp	.+126    	; 0x23f6 <__fpcmp_parts_f+0xac>
    2378:	84 30       	cpi	r24, 0x04	; 4
    237a:	21 f0       	breq	.+8      	; 0x2384 <__fpcmp_parts_f+0x3a>
    237c:	92 30       	cpi	r25, 0x02	; 2
    237e:	31 f4       	brne	.+12     	; 0x238c <__fpcmp_parts_f+0x42>
    2380:	82 30       	cpi	r24, 0x02	; 2
    2382:	b9 f1       	breq	.+110    	; 0x23f2 <__fpcmp_parts_f+0xa8>
    2384:	81 81       	ldd	r24, Z+1	; 0x01
    2386:	88 23       	and	r24, r24
    2388:	89 f1       	breq	.+98     	; 0x23ec <__fpcmp_parts_f+0xa2>
    238a:	2d c0       	rjmp	.+90     	; 0x23e6 <__fpcmp_parts_f+0x9c>
    238c:	11 96       	adiw	r26, 0x01	; 1
    238e:	1c 91       	ld	r17, X
    2390:	11 97       	sbiw	r26, 0x01	; 1
    2392:	82 30       	cpi	r24, 0x02	; 2
    2394:	f1 f0       	breq	.+60     	; 0x23d2 <__fpcmp_parts_f+0x88>
    2396:	81 81       	ldd	r24, Z+1	; 0x01
    2398:	18 17       	cp	r17, r24
    239a:	d9 f4       	brne	.+54     	; 0x23d2 <__fpcmp_parts_f+0x88>
    239c:	12 96       	adiw	r26, 0x02	; 2
    239e:	2d 91       	ld	r18, X+
    23a0:	3c 91       	ld	r19, X
    23a2:	13 97       	sbiw	r26, 0x03	; 3
    23a4:	82 81       	ldd	r24, Z+2	; 0x02
    23a6:	93 81       	ldd	r25, Z+3	; 0x03
    23a8:	82 17       	cp	r24, r18
    23aa:	93 07       	cpc	r25, r19
    23ac:	94 f0       	brlt	.+36     	; 0x23d2 <__fpcmp_parts_f+0x88>
    23ae:	28 17       	cp	r18, r24
    23b0:	39 07       	cpc	r19, r25
    23b2:	bc f0       	brlt	.+46     	; 0x23e2 <__fpcmp_parts_f+0x98>
    23b4:	14 96       	adiw	r26, 0x04	; 4
    23b6:	8d 91       	ld	r24, X+
    23b8:	9d 91       	ld	r25, X+
    23ba:	0d 90       	ld	r0, X+
    23bc:	bc 91       	ld	r27, X
    23be:	a0 2d       	mov	r26, r0
    23c0:	24 81       	ldd	r18, Z+4	; 0x04
    23c2:	35 81       	ldd	r19, Z+5	; 0x05
    23c4:	46 81       	ldd	r20, Z+6	; 0x06
    23c6:	57 81       	ldd	r21, Z+7	; 0x07
    23c8:	28 17       	cp	r18, r24
    23ca:	39 07       	cpc	r19, r25
    23cc:	4a 07       	cpc	r20, r26
    23ce:	5b 07       	cpc	r21, r27
    23d0:	18 f4       	brcc	.+6      	; 0x23d8 <__fpcmp_parts_f+0x8e>
    23d2:	11 23       	and	r17, r17
    23d4:	41 f0       	breq	.+16     	; 0x23e6 <__fpcmp_parts_f+0x9c>
    23d6:	0a c0       	rjmp	.+20     	; 0x23ec <__fpcmp_parts_f+0xa2>
    23d8:	82 17       	cp	r24, r18
    23da:	93 07       	cpc	r25, r19
    23dc:	a4 07       	cpc	r26, r20
    23de:	b5 07       	cpc	r27, r21
    23e0:	40 f4       	brcc	.+16     	; 0x23f2 <__fpcmp_parts_f+0xa8>
    23e2:	11 23       	and	r17, r17
    23e4:	19 f0       	breq	.+6      	; 0x23ec <__fpcmp_parts_f+0xa2>
    23e6:	61 e0       	ldi	r22, 0x01	; 1
    23e8:	70 e0       	ldi	r23, 0x00	; 0
    23ea:	05 c0       	rjmp	.+10     	; 0x23f6 <__fpcmp_parts_f+0xac>
    23ec:	6f ef       	ldi	r22, 0xFF	; 255
    23ee:	7f ef       	ldi	r23, 0xFF	; 255
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <__fpcmp_parts_f+0xac>
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	70 e0       	ldi	r23, 0x00	; 0
    23f6:	cb 01       	movw	r24, r22
    23f8:	1f 91       	pop	r17
    23fa:	08 95       	ret

000023fc <__udivmodhi4>:
    23fc:	aa 1b       	sub	r26, r26
    23fe:	bb 1b       	sub	r27, r27
    2400:	51 e1       	ldi	r21, 0x11	; 17
    2402:	07 c0       	rjmp	.+14     	; 0x2412 <__udivmodhi4_ep>

00002404 <__udivmodhi4_loop>:
    2404:	aa 1f       	adc	r26, r26
    2406:	bb 1f       	adc	r27, r27
    2408:	a6 17       	cp	r26, r22
    240a:	b7 07       	cpc	r27, r23
    240c:	10 f0       	brcs	.+4      	; 0x2412 <__udivmodhi4_ep>
    240e:	a6 1b       	sub	r26, r22
    2410:	b7 0b       	sbc	r27, r23

00002412 <__udivmodhi4_ep>:
    2412:	88 1f       	adc	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	5a 95       	dec	r21
    2418:	a9 f7       	brne	.-22     	; 0x2404 <__udivmodhi4_loop>
    241a:	80 95       	com	r24
    241c:	90 95       	com	r25
    241e:	bc 01       	movw	r22, r24
    2420:	cd 01       	movw	r24, r26
    2422:	08 95       	ret

00002424 <__divmodhi4>:
    2424:	97 fb       	bst	r25, 7
    2426:	09 2e       	mov	r0, r25
    2428:	07 26       	eor	r0, r23
    242a:	0a d0       	rcall	.+20     	; 0x2440 <__divmodhi4_neg1>
    242c:	77 fd       	sbrc	r23, 7
    242e:	04 d0       	rcall	.+8      	; 0x2438 <__divmodhi4_neg2>
    2430:	e5 df       	rcall	.-54     	; 0x23fc <__udivmodhi4>
    2432:	06 d0       	rcall	.+12     	; 0x2440 <__divmodhi4_neg1>
    2434:	00 20       	and	r0, r0
    2436:	1a f4       	brpl	.+6      	; 0x243e <__divmodhi4_exit>

00002438 <__divmodhi4_neg2>:
    2438:	70 95       	com	r23
    243a:	61 95       	neg	r22
    243c:	7f 4f       	sbci	r23, 0xFF	; 255

0000243e <__divmodhi4_exit>:
    243e:	08 95       	ret

00002440 <__divmodhi4_neg1>:
    2440:	f6 f7       	brtc	.-4      	; 0x243e <__divmodhi4_exit>
    2442:	90 95       	com	r25
    2444:	81 95       	neg	r24
    2446:	9f 4f       	sbci	r25, 0xFF	; 255
    2448:	08 95       	ret

0000244a <__prologue_saves__>:
    244a:	2f 92       	push	r2
    244c:	3f 92       	push	r3
    244e:	4f 92       	push	r4
    2450:	5f 92       	push	r5
    2452:	6f 92       	push	r6
    2454:	7f 92       	push	r7
    2456:	8f 92       	push	r8
    2458:	9f 92       	push	r9
    245a:	af 92       	push	r10
    245c:	bf 92       	push	r11
    245e:	cf 92       	push	r12
    2460:	df 92       	push	r13
    2462:	ef 92       	push	r14
    2464:	ff 92       	push	r15
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	ca 1b       	sub	r28, r26
    2474:	db 0b       	sbc	r29, r27
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	19 94       	eijmp

00002482 <__epilogue_restores__>:
    2482:	2a 88       	ldd	r2, Y+18	; 0x12
    2484:	39 88       	ldd	r3, Y+17	; 0x11
    2486:	48 88       	ldd	r4, Y+16	; 0x10
    2488:	5f 84       	ldd	r5, Y+15	; 0x0f
    248a:	6e 84       	ldd	r6, Y+14	; 0x0e
    248c:	7d 84       	ldd	r7, Y+13	; 0x0d
    248e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2490:	9b 84       	ldd	r9, Y+11	; 0x0b
    2492:	aa 84       	ldd	r10, Y+10	; 0x0a
    2494:	b9 84       	ldd	r11, Y+9	; 0x09
    2496:	c8 84       	ldd	r12, Y+8	; 0x08
    2498:	df 80       	ldd	r13, Y+7	; 0x07
    249a:	ee 80       	ldd	r14, Y+6	; 0x06
    249c:	fd 80       	ldd	r15, Y+5	; 0x05
    249e:	0c 81       	ldd	r16, Y+4	; 0x04
    24a0:	1b 81       	ldd	r17, Y+3	; 0x03
    24a2:	aa 81       	ldd	r26, Y+2	; 0x02
    24a4:	b9 81       	ldd	r27, Y+1	; 0x01
    24a6:	ce 0f       	add	r28, r30
    24a8:	d1 1d       	adc	r29, r1
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	ed 01       	movw	r28, r26
    24b6:	08 95       	ret

000024b8 <_exit>:
    24b8:	f8 94       	cli

000024ba <__stop_program>:
    24ba:	ff cf       	rjmp	.-2      	; 0x24ba <__stop_program>
