
motion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000bd  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000881  00000000  00000000  0000044f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000174  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000601  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000e0  00000000  00000000  00001448  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000131  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000208  00000000  00000000  00001659  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000c0  00000000  00000000  00001861  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e1       	ldi	r30, 0x1E	; 30
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
 112:	0c 94 8d 01 	jmp	0x31a	; 0x31a <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <motion_pin_config>:
#include<avr/io.h>
#include<avr/interrupt.h>
#include<util/delay.h>
void motion_pin_config(void)
{
	DDRA= DDRA | 0x0F; //0000 1111 --->	PA3 PA2 PA1 PA0 (HIGH)
 11a:	81 b1       	in	r24, 0x01	; 1
 11c:	8f 60       	ori	r24, 0x0F	; 15
 11e:	81 b9       	out	0x01, r24	; 1
	DDRL= DDRL | 0x18; //0001 1000 ---> PL3 PL4 (HIGH)
 120:	ea e0       	ldi	r30, 0x0A	; 10
 122:	f1 e0       	ldi	r31, 0x01	; 1
 124:	80 81       	ld	r24, Z
 126:	88 61       	ori	r24, 0x18	; 24
 128:	80 83       	st	Z, r24
	PORTA= PORTA & 0xF0;
 12a:	82 b1       	in	r24, 0x02	; 2
 12c:	80 7f       	andi	r24, 0xF0	; 240
 12e:	82 b9       	out	0x02, r24	; 2
	PORTL= PORTL | 0x18;
 130:	eb e0       	ldi	r30, 0x0B	; 11
 132:	f1 e0       	ldi	r31, 0x01	; 1
 134:	80 81       	ld	r24, Z
 136:	88 61       	ori	r24, 0x18	; 24
 138:	80 83       	st	Z, r24
}
 13a:	08 95       	ret

0000013c <port_init>:
#include<avr/io.h>
#include<avr/interrupt.h>
#include<util/delay.h>
void motion_pin_config(void)
{
	DDRA= DDRA | 0x0F; //0000 1111 --->	PA3 PA2 PA1 PA0 (HIGH)
 13c:	81 b1       	in	r24, 0x01	; 1
 13e:	8f 60       	ori	r24, 0x0F	; 15
 140:	81 b9       	out	0x01, r24	; 1
	DDRL= DDRL | 0x18; //0001 1000 ---> PL3 PL4 (HIGH)
 142:	ea e0       	ldi	r30, 0x0A	; 10
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	80 81       	ld	r24, Z
 148:	88 61       	ori	r24, 0x18	; 24
 14a:	80 83       	st	Z, r24
	PORTA= PORTA & 0xF0;
 14c:	82 b1       	in	r24, 0x02	; 2
 14e:	80 7f       	andi	r24, 0xF0	; 240
 150:	82 b9       	out	0x02, r24	; 2
	PORTL= PORTL | 0x18;
 152:	eb e0       	ldi	r30, 0x0B	; 11
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	80 81       	ld	r24, Z
 158:	88 61       	ori	r24, 0x18	; 24
 15a:	80 83       	st	Z, r24
}
void port_init(void)
{
	motion_pin_config();
}
 15c:	08 95       	ret

0000015e <init_timer5>:
void init_timer5(void)
{
	TCCR5B = 0x00;	//stop
 15e:	e1 e2       	ldi	r30, 0x21	; 33
 160:	f1 e0       	ldi	r31, 0x01	; 1
 162:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//counter higher 8 bit value to which OCRxH is compared with
 164:	9f ef       	ldi	r25, 0xFF	; 255
 166:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//counter higher 8 bit value to which OCRxH is compared with
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high for left motor
 170:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low for left motor
 174:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high for right motor	
 178:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register high for right motor
 17c:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Motor C1
 180:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Motor C1
 184:	90 93 2c 01 	sts	0x012C, r25

	TCCR5A = 0xA9;
 188:	89 ea       	ldi	r24, 0xA9	; 169
 18a:	80 93 20 01 	sts	0x0120, r24
/* COM5A1=1,COM5A0=0,COM5B1=1,COM5B0=0,COM5C1=1,COM5C0=0
For Overriding normal port functionality to OCRnA ouputs
WGM51=0,WGM50=1 along with WGM52 in TCCRB for selecting fast PWM 8 bit mode
*/

	TCCR5B = 0x0B;	//WGM12=1,CS12=0,CS11=1,CS10=1	(Prescaler=64)
 18e:	8b e0       	ldi	r24, 0x0B	; 11
 190:	80 83       	st	Z, r24

}
 192:	08 95       	ret

00000194 <velocity>:
void velocity(unsigned char left,unsigned char right)
{
	OCR5AL = (unsigned char) left;
 194:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char) right;
 198:	60 93 2a 01 	sts	0x012A, r22
}
 19c:	08 95       	ret

0000019e <motion_set>:
void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
 19e:	92 b1       	in	r25, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
 1a0:	90 7f       	andi	r25, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
 1a2:	8f 70       	andi	r24, 0x0F	; 15
 1a4:	89 2b       	or	r24, r25
	PORTA=PortA_Restore;	//Setting the current status of PORTA
 1a6:	82 b9       	out	0x02, r24	; 2
}
 1a8:	08 95       	ret

000001aa <forward>:
}
void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
 1aa:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
 1ac:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
 1ae:	86 60       	ori	r24, 0x06	; 6
	PORTA=PortA_Restore;	//Setting the current status of PORTA
 1b0:	82 b9       	out	0x02, r24	; 2
}
//MOTION			  // RB  RF  LF  LB						
void forward(void)    // PA3 PA2 PA1 PA0
{
	motion_set(0x06);   // 0 1 1 0
}
 1b2:	08 95       	ret

000001b4 <backward>:
}
void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
 1b4:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
 1b6:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
 1b8:	89 60       	ori	r24, 0x09	; 9
	PORTA=PortA_Restore;	//Setting the current status of PORTA
 1ba:	82 b9       	out	0x02, r24	; 2
	motion_set(0x06);   // 0 1 1 0
}
void backward(void)
{
	motion_set(0x09);	// 1 0 0 1
}
 1bc:	08 95       	ret

000001be <left>:
}
void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
 1be:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
 1c0:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
 1c2:	85 60       	ori	r24, 0x05	; 5
	PORTA=PortA_Restore;	//Setting the current status of PORTA
 1c4:	82 b9       	out	0x02, r24	; 2
	motion_set(0x09);	// 1 0 0 1
}
void left(void)
{
	motion_set(0x05);	// 0 1 0 1
}
 1c6:	08 95       	ret

000001c8 <right>:
}
void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
 1c8:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
 1ca:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
 1cc:	8a 60       	ori	r24, 0x0A	; 10
	PORTA=PortA_Restore;	//Setting the current status of PORTA
 1ce:	82 b9       	out	0x02, r24	; 2
	motion_set(0x05);	// 0 1 0 1
}
void right(void)
{
	motion_set(0x0A);	// 1 0 1 0
}
 1d0:	08 95       	ret

000001d2 <soft_left>:
}
void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
 1d2:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
 1d4:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
 1d6:	84 60       	ori	r24, 0x04	; 4
	PORTA=PortA_Restore;	//Setting the current status of PORTA
 1d8:	82 b9       	out	0x02, r24	; 2
	motion_set(0x0A);	// 1 0 1 0
}
void soft_left(void)	
{
	motion_set(0x04);	// 0 1 0 0
}
 1da:	08 95       	ret

000001dc <soft_right>:
}
void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
 1dc:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
 1de:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
 1e0:	82 60       	ori	r24, 0x02	; 2
	PORTA=PortA_Restore;	//Setting the current status of PORTA
 1e2:	82 b9       	out	0x02, r24	; 2
	motion_set(0x04);	// 0 1 0 0
}
void soft_right(void)
{
	motion_set(0x02);	// 0 0 1 0
}
 1e4:	08 95       	ret

000001e6 <stop>:
}
void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
 1e6:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
 1e8:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
	PORTA=PortA_Restore;	//Setting the current status of PORTA
 1ea:	82 b9       	out	0x02, r24	; 2
	motion_set(0x02);	// 0 0 1 0
}
void stop(void)
{
	motion_set(0x00);	// 0 0 0 0
}
 1ec:	08 95       	ret

000001ee <main>:
#include<avr/io.h>
#include<avr/interrupt.h>
#include<util/delay.h>
void motion_pin_config(void)
{
	DDRA= DDRA | 0x0F; //0000 1111 --->	PA3 PA2 PA1 PA0 (HIGH)
 1ee:	81 b1       	in	r24, 0x01	; 1
 1f0:	8f 60       	ori	r24, 0x0F	; 15
 1f2:	81 b9       	out	0x01, r24	; 1
	DDRL= DDRL | 0x18; //0001 1000 ---> PL3 PL4 (HIGH)
 1f4:	80 91 0a 01 	lds	r24, 0x010A
 1f8:	88 61       	ori	r24, 0x18	; 24
 1fa:	80 93 0a 01 	sts	0x010A, r24
	PORTA= PORTA & 0xF0;
 1fe:	82 b1       	in	r24, 0x02	; 2
 200:	80 7f       	andi	r24, 0xF0	; 240
 202:	82 b9       	out	0x02, r24	; 2
	PORTL= PORTL | 0x18;
 204:	80 91 0b 01 	lds	r24, 0x010B
 208:	88 61       	ori	r24, 0x18	; 24
 20a:	80 93 0b 01 	sts	0x010B, r24
{
	motion_pin_config();
}
void init_timer5(void)
{
	TCCR5B = 0x00;	//stop
 20e:	10 92 21 01 	sts	0x0121, r1
	TCNT5H = 0xFF;	//counter higher 8 bit value to which OCRxH is compared with
 212:	9f ef       	ldi	r25, 0xFF	; 255
 214:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//counter higher 8 bit value to which OCRxH is compared with
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high for left motor
 21e:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low for left motor
 222:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high for right motor	
 226:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register high for right motor
 22a:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Motor C1
 22e:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Motor C1
 232:	90 93 2c 01 	sts	0x012C, r25

	TCCR5A = 0xA9;
 236:	89 ea       	ldi	r24, 0xA9	; 169
 238:	80 93 20 01 	sts	0x0120, r24
/* COM5A1=1,COM5A0=0,COM5B1=1,COM5B0=0,COM5C1=1,COM5C0=0
For Overriding normal port functionality to OCRnA ouputs
WGM51=0,WGM50=1 along with WGM52 in TCCRB for selecting fast PWM 8 bit mode
*/

	TCCR5B = 0x0B;	//WGM12=1,CS12=0,CS11=1,CS10=1	(Prescaler=64)
 23c:	8b e0       	ldi	r24, 0x0B	; 11
 23e:	80 93 21 01 	sts	0x0121, r24

}
void velocity(unsigned char left,unsigned char right)
{
	OCR5AL = (unsigned char) left;
 242:	a4 e6       	ldi	r26, 0x64	; 100
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 244:	20 e7       	ldi	r18, 0x70	; 112
 246:	31 e0       	ldi	r19, 0x01	; 1
 248:	76 e9       	ldi	r23, 0x96	; 150
	OCR5BL = (unsigned char) right;
 24a:	6d e7       	ldi	r22, 0x7D	; 125
 24c:	5b e4       	ldi	r21, 0x4B	; 75
 24e:	4f ef       	ldi	r20, 0xFF	; 255
	TCCR5B = 0x0B;	//WGM12=1,CS12=0,CS11=1,CS10=1	(Prescaler=64)

}
void velocity(unsigned char left,unsigned char right)
{
	OCR5AL = (unsigned char) left;
 250:	a0 93 28 01 	sts	0x0128, r26
	OCR5BL = (unsigned char) right;
 254:	a0 93 2a 01 	sts	0x012A, r26
}
void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
 258:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
 25a:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
 25c:	86 60       	ori	r24, 0x06	; 6
	PORTA=PortA_Restore;	//Setting the current status of PORTA
 25e:	82 b9       	out	0x02, r24	; 2
 260:	80 e2       	ldi	r24, 0x20	; 32
 262:	9e e4       	ldi	r25, 0x4E	; 78
 264:	f9 01       	movw	r30, r18
 266:	31 97       	sbiw	r30, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <main+0x78>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 26c:	d9 f7       	brne	.-10     	; 0x264 <main+0x76>
	TCCR5B = 0x0B;	//WGM12=1,CS12=0,CS11=1,CS10=1	(Prescaler=64)

}
void velocity(unsigned char left,unsigned char right)
{
	OCR5AL = (unsigned char) left;
 26e:	70 93 28 01 	sts	0x0128, r23
	OCR5BL = (unsigned char) right;
 272:	70 93 2a 01 	sts	0x012A, r23
}
void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
 276:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
 278:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
 27a:	89 60       	ori	r24, 0x09	; 9
	PORTA=PortA_Restore;	//Setting the current status of PORTA
 27c:	82 b9       	out	0x02, r24	; 2
 27e:	80 e2       	ldi	r24, 0x20	; 32
 280:	9e e4       	ldi	r25, 0x4E	; 78
 282:	f9 01       	movw	r30, r18
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 288:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 28a:	d9 f7       	brne	.-10     	; 0x282 <main+0x94>
	TCCR5B = 0x0B;	//WGM12=1,CS12=0,CS11=1,CS10=1	(Prescaler=64)

}
void velocity(unsigned char left,unsigned char right)
{
	OCR5AL = (unsigned char) left;
 28c:	60 93 28 01 	sts	0x0128, r22
	OCR5BL = (unsigned char) right;
 290:	60 93 2a 01 	sts	0x012A, r22
}
void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
 294:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
 296:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
 298:	85 60       	ori	r24, 0x05	; 5
	PORTA=PortA_Restore;	//Setting the current status of PORTA
 29a:	82 b9       	out	0x02, r24	; 2
 29c:	80 e2       	ldi	r24, 0x20	; 32
 29e:	9e e4       	ldi	r25, 0x4E	; 78
 2a0:	f9 01       	movw	r30, r18
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <main+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a8:	d9 f7       	brne	.-10     	; 0x2a0 <main+0xb2>
	TCCR5B = 0x0B;	//WGM12=1,CS12=0,CS11=1,CS10=1	(Prescaler=64)

}
void velocity(unsigned char left,unsigned char right)
{
	OCR5AL = (unsigned char) left;
 2aa:	50 93 28 01 	sts	0x0128, r21
	OCR5BL = (unsigned char) right;
 2ae:	50 93 2a 01 	sts	0x012A, r21
}
void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
 2b2:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
 2b4:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
 2b6:	8a 60       	ori	r24, 0x0A	; 10
	PORTA=PortA_Restore;	//Setting the current status of PORTA
 2b8:	82 b9       	out	0x02, r24	; 2
 2ba:	80 e2       	ldi	r24, 0x20	; 32
 2bc:	9e e4       	ldi	r25, 0x4E	; 78
 2be:	f9 01       	movw	r30, r18
 2c0:	31 97       	sbiw	r30, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <main+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c6:	d9 f7       	brne	.-10     	; 0x2be <main+0xd0>
	TCCR5B = 0x0B;	//WGM12=1,CS12=0,CS11=1,CS10=1	(Prescaler=64)

}
void velocity(unsigned char left,unsigned char right)
{
	OCR5AL = (unsigned char) left;
 2c8:	40 93 28 01 	sts	0x0128, r20
	OCR5BL = (unsigned char) right;
 2cc:	40 93 2a 01 	sts	0x012A, r20
}
void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
 2d0:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
 2d2:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
 2d4:	84 60       	ori	r24, 0x04	; 4
	PORTA=PortA_Restore;	//Setting the current status of PORTA
 2d6:	82 b9       	out	0x02, r24	; 2
 2d8:	80 e2       	ldi	r24, 0x20	; 32
 2da:	9e e4       	ldi	r25, 0x4E	; 78
 2dc:	f9 01       	movw	r30, r18
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <main+0xf0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e4:	d9 f7       	brne	.-10     	; 0x2dc <main+0xee>
	TCCR5B = 0x0B;	//WGM12=1,CS12=0,CS11=1,CS10=1	(Prescaler=64)

}
void velocity(unsigned char left,unsigned char right)
{
	OCR5AL = (unsigned char) left;
 2e6:	40 93 28 01 	sts	0x0128, r20
	OCR5BL = (unsigned char) right;
 2ea:	40 93 2a 01 	sts	0x012A, r20
}
void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
 2ee:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
 2f0:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
 2f2:	82 60       	ori	r24, 0x02	; 2
	PORTA=PortA_Restore;	//Setting the current status of PORTA
 2f4:	82 b9       	out	0x02, r24	; 2
 2f6:	80 e2       	ldi	r24, 0x20	; 32
 2f8:	9e e4       	ldi	r25, 0x4E	; 78
 2fa:	f9 01       	movw	r30, r18
 2fc:	31 97       	sbiw	r30, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <main+0x10e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 300:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 302:	d9 f7       	brne	.-10     	; 0x2fa <main+0x10c>
}
void motion_set(unsigned char dir)
{
	unsigned char PortA_Restore=0;
	dir &= 0x0F;			//Remove Upper nibbel
	PortA_Restore= PORTA;	//Setting PortA_Restore to current PORTA status			
 304:	82 b1       	in	r24, 0x02	; 2
	PortA_Restore &= 0xF0;	//Setting lower nibbel to 0 
 306:	80 7f       	andi	r24, 0xF0	; 240
	PortA_Restore |=dir;	//Setting PortA_Restore to current dir
	PORTA=PortA_Restore;	//Setting the current status of PORTA
 308:	82 b9       	out	0x02, r24	; 2
 30a:	80 e2       	ldi	r24, 0x20	; 32
 30c:	9e e4       	ldi	r25, 0x4E	; 78
 30e:	f9 01       	movw	r30, r18
 310:	31 97       	sbiw	r30, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0x122>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 314:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 316:	d9 f7       	brne	.-10     	; 0x30e <main+0x120>
 318:	9b cf       	rjmp	.-202    	; 0x250 <main+0x62>

0000031a <_exit>:
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
