
sensorinput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000019  00800200  00800200  0000054a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000178  00000000  00000000  0000056a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006f5  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a5  00000000  00000000  00000dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000653  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000100  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001de  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002b4  00000000  00000000  000018ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ed       	ldi	r30, 0xD6	; 214
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 31       	cpi	r26, 0x19	; 25
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 3f 02 	call	0x47e	; 0x47e <main>
 122:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 12a:	86 e6       	ldi	r24, 0x66	; 102
 12c:	9e e0       	ldi	r25, 0x0E	; 14
 12e:	fc 01       	movw	r30, r24
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_set_4bit+0x6>
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 138:	40 e3       	ldi	r20, 0x30	; 48
 13a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 13c:	42 9a       	sbi	0x08, 2	; 8
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	38 e4       	ldi	r19, 0x48	; 72
 142:	f9 01       	movw	r30, r18
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 148:	42 98       	cbi	0x08, 2	; 8
 14a:	fc 01       	movw	r30, r24
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 150:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 152:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 154:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 156:	42 9a       	sbi	0x08, 2	; 8
 158:	f9 01       	movw	r30, r18
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 15e:	42 98       	cbi	0x08, 2	; 8
 160:	fc 01       	movw	r30, r24
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 166:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 168:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 16a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 16c:	42 9a       	sbi	0x08, 2	; 8
 16e:	f9 01       	movw	r30, r18
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 174:	42 98       	cbi	0x08, 2	; 8
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 17a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 17c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 17e:	80 e2       	ldi	r24, 0x20	; 32
 180:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 182:	42 9a       	sbi	0x08, 2	; 8
 184:	c9 01       	movw	r24, r18
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 18a:	42 98       	cbi	0x08, 2	; 8

	
}
 18c:	08 95       	ret

0000018e <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 18e:	98 b1       	in	r25, 0x08	; 8
 190:	9f 70       	andi	r25, 0x0F	; 15
 192:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 194:	28 b1       	in	r18, 0x08	; 8
 196:	98 2f       	mov	r25, r24
 198:	90 7f       	andi	r25, 0xF0	; 240
 19a:	92 2b       	or	r25, r18
 19c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 19e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1a0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1a2:	42 9a       	sbi	0x08, 2	; 8
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	38 e4       	ldi	r19, 0x48	; 72
 1a8:	f9 01       	movw	r30, r18
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
 1ae:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 1b0:	98 b1       	in	r25, 0x08	; 8
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 1b6:	98 b1       	in	r25, 0x08	; 8
 1b8:	82 95       	swap	r24
 1ba:	80 7f       	andi	r24, 0xF0	; 240
 1bc:	98 2b       	or	r25, r24
 1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1c4:	42 9a       	sbi	0x08, 2	; 8
 1c6:	c9 01       	movw	r24, r18
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
 1cc:	42 98       	cbi	0x08, 2	; 8
}
 1ce:	08 95       	ret

000001d0 <lcd_init>:
 1d0:	86 e6       	ldi	r24, 0x66	; 102
 1d2:	9e e0       	ldi	r25, 0x0E	; 14
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x4>
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 1d8:	88 e2       	ldi	r24, 0x28	; 40
 1da:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x01);
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x06);
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x0E);
 1ea:	8e e0       	ldi	r24, 0x0E	; 14
 1ec:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x80);
 1f0:	80 e8       	ldi	r24, 0x80	; 128
 1f2:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
		
}
 1f6:	08 95       	ret

000001f8 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 1f8:	98 b1       	in	r25, 0x08	; 8
 1fa:	9f 70       	andi	r25, 0x0F	; 15
 1fc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1fe:	28 b1       	in	r18, 0x08	; 8
 200:	98 2f       	mov	r25, r24
 202:	90 7f       	andi	r25, 0xF0	; 240
 204:	92 2b       	or	r25, r18
 206:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 208:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 20a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 20c:	42 9a       	sbi	0x08, 2	; 8
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	38 e4       	ldi	r19, 0x48	; 72
 212:	f9 01       	movw	r30, r18
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
 218:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 21a:	98 b1       	in	r25, 0x08	; 8
 21c:	9f 70       	andi	r25, 0x0F	; 15
 21e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 220:	98 b1       	in	r25, 0x08	; 8
 222:	82 95       	swap	r24
 224:	80 7f       	andi	r24, 0xF0	; 240
 226:	98 2b       	or	r25, r24
 228:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 22a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 22c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 22e:	42 9a       	sbi	0x08, 2	; 8
 230:	c9 01       	movw	r24, r18
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
 236:	42 98       	cbi	0x08, 2	; 8
}
 238:	08 95       	ret

0000023a <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
 23a:	80 e8       	ldi	r24, 0x80	; 128
 23c:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
}
 240:	08 95       	ret

00000242 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	ec 01       	movw	r28, r24
 248:	03 c0       	rjmp	.+6      	; 0x250 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 24a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
		str++;
 24e:	21 96       	adiw	r28, 0x01	; 1


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
 250:	88 81       	ld	r24, Y
 252:	88 23       	and	r24, r24
 254:	d1 f7       	brne	.-12     	; 0x24a <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	69 f0       	breq	.+26     	; 0x27a <lcd_cursor+0x1e>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	18 f4       	brcc	.+6      	; 0x26a <lcd_cursor+0xe>
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	a9 f4       	brne	.+42     	; 0x292 <lcd_cursor+0x36>
 268:	05 c0       	rjmp	.+10     	; 0x274 <lcd_cursor+0x18>
 26a:	83 30       	cpi	r24, 0x03	; 3
 26c:	49 f0       	breq	.+18     	; 0x280 <lcd_cursor+0x24>
 26e:	84 30       	cpi	r24, 0x04	; 4
 270:	81 f4       	brne	.+32     	; 0x292 <lcd_cursor+0x36>
 272:	0b c0       	rjmp	.+22     	; 0x28a <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 274:	86 2f       	mov	r24, r22
 276:	81 58       	subi	r24, 0x81	; 129
 278:	05 c0       	rjmp	.+10     	; 0x284 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 27a:	86 2f       	mov	r24, r22
 27c:	81 54       	subi	r24, 0x41	; 65
 27e:	02 c0       	rjmp	.+4      	; 0x284 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
 280:	86 2f       	mov	r24, r22
 282:	8d 56       	subi	r24, 0x6D	; 109
 284:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
 288:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 28a:	86 2f       	mov	r24, r22
 28c:	8d 52       	subi	r24, 0x2D	; 45
 28e:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
 292:	08 95       	ret

00000294 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	8a 01       	movw	r16, r20
 29e:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 2a0:	88 23       	and	r24, r24
 2a2:	11 f0       	breq	.+4      	; 0x2a8 <lcd_print+0x14>
 2a4:	66 23       	and	r22, r22
 2a6:	19 f4       	brne	.+6      	; 0x2ae <lcd_print+0x1a>
	{
		lcd_home();
 2a8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_home>
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2ae:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_cursor>
	}
	if(digits==5 || flag==1)
 2b2:	c5 30       	cpi	r28, 0x05	; 5
 2b4:	d1 05       	cpc	r29, r1
 2b6:	71 f4       	brne	.+28     	; 0x2d4 <lcd_print+0x40>
	{
		million=value/10000+48;
 2b8:	c8 01       	movw	r24, r16
 2ba:	60 e1       	ldi	r22, 0x10	; 16
 2bc:	77 e2       	ldi	r23, 0x27	; 39
 2be:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 2c2:	cb 01       	movw	r24, r22
 2c4:	c0 96       	adiw	r24, 0x30	; 48
 2c6:	90 93 01 02 	sts	0x0201, r25
 2ca:	80 93 00 02 	sts	0x0200, r24
		lcd_wr_char(million);
 2ce:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
 2d4:	c4 30       	cpi	r28, 0x04	; 4
 2d6:	d1 05       	cpc	r29, r1
 2d8:	11 f0       	breq	.+4      	; 0x2de <lcd_print+0x4a>
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	16 c0       	rjmp	.+44     	; 0x30a <lcd_print+0x76>
	{
		temp = value/1000;
 2de:	c8 01       	movw	r24, r16
 2e0:	68 ee       	ldi	r22, 0xE8	; 232
 2e2:	73 e0       	ldi	r23, 0x03	; 3
 2e4:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 2e8:	cb 01       	movw	r24, r22
 2ea:	60 93 06 02 	sts	0x0206, r22
 2ee:	90 93 07 02 	sts	0x0207, r25
		thousand = temp%10 + 48;
 2f2:	6a e0       	ldi	r22, 0x0A	; 10
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 2fa:	c0 96       	adiw	r24, 0x30	; 48
 2fc:	90 93 16 02 	sts	0x0216, r25
 300:	80 93 15 02 	sts	0x0215, r24
		lcd_wr_char(thousand);
 304:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
 308:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
 30a:	c3 30       	cpi	r28, 0x03	; 3
 30c:	d1 05       	cpc	r29, r1
 30e:	21 f0       	breq	.+8      	; 0x318 <lcd_print+0x84>
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	11 f0       	breq	.+4      	; 0x318 <lcd_print+0x84>
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	16 c0       	rjmp	.+44     	; 0x344 <lcd_print+0xb0>
	{
		temp = value/100;
 318:	c8 01       	movw	r24, r16
 31a:	64 e6       	ldi	r22, 0x64	; 100
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 322:	cb 01       	movw	r24, r22
 324:	60 93 06 02 	sts	0x0206, r22
 328:	90 93 07 02 	sts	0x0207, r25
		hundred = temp%10 + 48;
 32c:	6a e0       	ldi	r22, 0x0A	; 10
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 334:	c0 96       	adiw	r24, 0x30	; 48
 336:	90 93 12 02 	sts	0x0212, r25
 33a:	80 93 11 02 	sts	0x0211, r24
		lcd_wr_char(hundred);
 33e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
 342:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
 344:	c2 30       	cpi	r28, 0x02	; 2
 346:	d1 05       	cpc	r29, r1
 348:	21 f0       	breq	.+8      	; 0x352 <lcd_print+0xbe>
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	11 f0       	breq	.+4      	; 0x352 <lcd_print+0xbe>
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	16 c0       	rjmp	.+44     	; 0x37e <lcd_print+0xea>
	{
		temp = value/10;
 352:	c8 01       	movw	r24, r16
 354:	6a e0       	ldi	r22, 0x0A	; 10
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 35c:	cb 01       	movw	r24, r22
 35e:	60 93 06 02 	sts	0x0206, r22
 362:	90 93 07 02 	sts	0x0207, r25
		tens = temp%10 + 48;
 366:	6a e0       	ldi	r22, 0x0A	; 10
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 36e:	c0 96       	adiw	r24, 0x30	; 48
 370:	90 93 10 02 	sts	0x0210, r25
 374:	80 93 0f 02 	sts	0x020F, r24
		lcd_wr_char(tens);
 378:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
 37c:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
 37e:	c1 30       	cpi	r28, 0x01	; 1
 380:	d1 05       	cpc	r29, r1
 382:	11 f0       	breq	.+4      	; 0x388 <lcd_print+0xf4>
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	61 f4       	brne	.+24     	; 0x3a0 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
 388:	c8 01       	movw	r24, r16
 38a:	6a e0       	ldi	r22, 0x0A	; 10
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	0e 94 55 02 	call	0x4aa	; 0x4aa <__udivmodhi4>
 392:	c0 96       	adiw	r24, 0x30	; 48
 394:	90 93 14 02 	sts	0x0214, r25
 398:	80 93 13 02 	sts	0x0213, r24
		lcd_wr_char(unit);
 39c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
	}
	if(digits>5)
 3a0:	26 97       	sbiw	r28, 0x06	; 6
 3a2:	1c f0       	brlt	.+6      	; 0x3aa <lcd_print+0x116>
	{
		lcd_wr_char('E');
 3a4:	85 e4       	ldi	r24, 0x45	; 69
 3a6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
	}
	
}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	08 95       	ret

000003b4 <lcd_port_config>:

float BATT_Voltage,BATT_V;

void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
 3b4:	87 b1       	in	r24, 0x07	; 7
 3b6:	87 6f       	ori	r24, 0xF7	; 247
 3b8:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
 3ba:	88 b1       	in	r24, 0x08	; 8
 3bc:	80 78       	andi	r24, 0x80	; 128
 3be:	88 b9       	out	0x08, r24	; 8
}
 3c0:	08 95       	ret

000003c2 <adc_pin_config>:

void adc_pin_config(void)
{
	DDRF=0x00;
 3c2:	10 ba       	out	0x10, r1	; 16
	PORTF=0x00;
 3c4:	11 ba       	out	0x11, r1	; 17
	DDRK=0x00;
 3c6:	10 92 07 01 	sts	0x0107, r1
	PORTK=0x00;
 3ca:	10 92 08 01 	sts	0x0108, r1
}
 3ce:	08 95       	ret

000003d0 <adc_init>:

void adc_init(void)
{
	ADCSRA=0x00;
 3d0:	ea e7       	ldi	r30, 0x7A	; 122
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	10 82       	st	Z, r1
	ADCSRB=0x00;
 3d6:	10 92 7b 00 	sts	0x007B, r1
	ADMUX=0x00;
 3da:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA=0x86;	//ADEN=1 ADIE=1....
 3de:	86 e8       	ldi	r24, 0x86	; 134
 3e0:	80 83       	st	Z, r24
	ACSR=0x80;
 3e2:	80 e8       	ldi	r24, 0x80	; 128
 3e4:	80 bf       	out	0x30, r24	; 48
}
 3e6:	08 95       	ret

000003e8 <init_devices>:

void init_devices(void)
{
	cli();
 3e8:	f8 94       	cli

float BATT_Voltage,BATT_V;

void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
 3ea:	87 b1       	in	r24, 0x07	; 7
 3ec:	87 6f       	ori	r24, 0xF7	; 247
 3ee:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
 3f0:	88 b1       	in	r24, 0x08	; 8
 3f2:	80 78       	andi	r24, 0x80	; 128
 3f4:	88 b9       	out	0x08, r24	; 8
}

void adc_pin_config(void)
{
	DDRF=0x00;
 3f6:	10 ba       	out	0x10, r1	; 16
	PORTF=0x00;
 3f8:	11 ba       	out	0x11, r1	; 17
	DDRK=0x00;
 3fa:	10 92 07 01 	sts	0x0107, r1
	PORTK=0x00;
 3fe:	10 92 08 01 	sts	0x0108, r1
}

void adc_init(void)
{
	ADCSRA=0x00;
 402:	ea e7       	ldi	r30, 0x7A	; 122
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	10 82       	st	Z, r1
	ADCSRB=0x00;
 408:	10 92 7b 00 	sts	0x007B, r1
	ADMUX=0x00;
 40c:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA=0x86;	//ADEN=1 ADIE=1....
 410:	86 e8       	ldi	r24, 0x86	; 134
 412:	80 83       	st	Z, r24
	ACSR=0x80;
 414:	80 e8       	ldi	r24, 0x80	; 128
 416:	80 bf       	out	0x30, r24	; 48
{
	cli();
	lcd_port_config();
	adc_pin_config();
	adc_init();
	sei();
 418:	78 94       	sei
}
 41a:	08 95       	ret

0000041c <ADC_Conversion>:

unsigned char ADC_Conversion(unsigned char ch)
{
 41c:	98 2f       	mov	r25, r24
	unsigned char a;
	if(ch>7)
 41e:	88 30       	cpi	r24, 0x08	; 8
 420:	18 f0       	brcs	.+6      	; 0x428 <ADC_Conversion+0xc>
	{
		ADCSRB=0x08;
 422:	88 e0       	ldi	r24, 0x08	; 8
 424:	80 93 7b 00 	sts	0x007B, r24
	}
	ch=ch & 0x07;
	ADMUX=0x20 | ch;
 428:	97 70       	andi	r25, 0x07	; 7
 42a:	90 62       	ori	r25, 0x20	; 32
 42c:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA =ADCSRA | 0x40;		//set start conv bit
 430:	80 91 7a 00 	lds	r24, 0x007A
 434:	80 64       	ori	r24, 0x40	; 64
 436:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA & 0x10)==0);	//wait for adc conv to complete
 43a:	80 91 7a 00 	lds	r24, 0x007A
 43e:	84 ff       	sbrs	r24, 4
 440:	fc cf       	rjmp	.-8      	; 0x43a <ADC_Conversion+0x1e>
	a=ADCH;						//Result stored here after convo
 442:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA=ADCSRA | 0x10;		//Clear ADIF by setting it to 1
 446:	90 91 7a 00 	lds	r25, 0x007A
 44a:	90 61       	ori	r25, 0x10	; 16
 44c:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB=0x00;
 450:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
 454:	08 95       	ret

00000456 <print_sensor>:

void print_sensor(char row,char col,unsigned char channel)
{
 456:	0f 93       	push	r16
 458:	1f 93       	push	r17
 45a:	18 2f       	mov	r17, r24
 45c:	06 2f       	mov	r16, r22
 45e:	84 2f       	mov	r24, r20
	ADC_Value=ADC_Conversion(channel);
 460:	0e 94 0e 02 	call	0x41c	; 0x41c <ADC_Conversion>
 464:	48 2f       	mov	r20, r24
 466:	80 93 08 02 	sts	0x0208, r24
	lcd_print(row,col,ADC_Value,3);
 46a:	81 2f       	mov	r24, r17
 46c:	60 2f       	mov	r22, r16
 46e:	50 e0       	ldi	r21, 0x00	; 0
 470:	23 e0       	ldi	r18, 0x03	; 3
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
}
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	08 95       	ret

0000047e <main>:

int main(void)
{
	init_devices();
 47e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <init_devices>
	lcd_set_4bit();
 482:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
 486:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init>
	while(1){
		print_sensor(1,1,1);
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	41 e0       	ldi	r20, 0x01	; 1
 490:	0e 94 2b 02 	call	0x456	; 0x456 <print_sensor>
		print_sensor(1,5,2);
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	65 e0       	ldi	r22, 0x05	; 5
 498:	42 e0       	ldi	r20, 0x02	; 2
 49a:	0e 94 2b 02 	call	0x456	; 0x456 <print_sensor>
		print_sensor(1,9,3);
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	69 e0       	ldi	r22, 0x09	; 9
 4a2:	43 e0       	ldi	r20, 0x03	; 3
 4a4:	0e 94 2b 02 	call	0x456	; 0x456 <print_sensor>
 4a8:	f0 cf       	rjmp	.-32     	; 0x48a <main+0xc>

000004aa <__udivmodhi4>:
 4aa:	aa 1b       	sub	r26, r26
 4ac:	bb 1b       	sub	r27, r27
 4ae:	51 e1       	ldi	r21, 0x11	; 17
 4b0:	07 c0       	rjmp	.+14     	; 0x4c0 <__udivmodhi4_ep>

000004b2 <__udivmodhi4_loop>:
 4b2:	aa 1f       	adc	r26, r26
 4b4:	bb 1f       	adc	r27, r27
 4b6:	a6 17       	cp	r26, r22
 4b8:	b7 07       	cpc	r27, r23
 4ba:	10 f0       	brcs	.+4      	; 0x4c0 <__udivmodhi4_ep>
 4bc:	a6 1b       	sub	r26, r22
 4be:	b7 0b       	sbc	r27, r23

000004c0 <__udivmodhi4_ep>:
 4c0:	88 1f       	adc	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	5a 95       	dec	r21
 4c6:	a9 f7       	brne	.-22     	; 0x4b2 <__udivmodhi4_loop>
 4c8:	80 95       	com	r24
 4ca:	90 95       	com	r25
 4cc:	bc 01       	movw	r22, r24
 4ce:	cd 01       	movw	r24, r26
 4d0:	08 95       	ret

000004d2 <_exit>:
 4d2:	f8 94       	cli

000004d4 <__stop_program>:
 4d4:	ff cf       	rjmp	.-2      	; 0x4d4 <__stop_program>
